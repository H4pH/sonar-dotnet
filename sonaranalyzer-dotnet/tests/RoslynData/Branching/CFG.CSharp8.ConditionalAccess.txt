// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22ConditionalAccess%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.ConditionalAccess%22%20%7B%0Alabel%20%3D%20%22Sonar.ConditionalAccess%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AConditionalAccessExpression%7CIdentifierNameSyntax%3A%20o%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20ToString%7CMemberBindingExpressionSyntax%3A%20.ToString%7CInvocationExpressionSyntax%3A%20.ToString()%7D%22%5D%0D%0A2%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CVariableDeclaratorSyntax%3A%20ret%20%3D%20o%3F.ToString()%7D%22%5D%0D%0A1%20-%3E%203%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.ConditionalAccess%22%20%7B%0Alabel%20%3D%20%22Roslyn.ConditionalAccess%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C0%23%20IsNullOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C2%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C1%23%20InvocationOperation.ToString%20%2F%20InvocationExpressionSyntax%3A%20.ToString()%7C0%23%20FlowCaptureOperation%20%2F%20InvocationExpressionSyntax%3A%20.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C1%23%20DefaultValueOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root3%20%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20o%3F.ToString()%7C1%23%20FlowCaptureReferenceOperation%20%2F%20ConditionalAccessExpressionSyntax%3A%20o%3F.ToString()%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20o%3F.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root4%0D%0ARoot3%20-%3E%20Root4%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root5%7D%22%5D%0D%0ARoot4%20-%3E%20Root5%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void ConditionalAccess(object o)
    {
        var ret = o?.ToString();
    }
*/

digraph "ConditionalAccess" {
subgraph "cluster_Sonar.ConditionalAccess" {
label = "Sonar.ConditionalAccess"
0 [shape=record label="{BINARY:ConditionalAccessExpression|IdentifierNameSyntax: o}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
2 [shape=record label="{SIMPLE|IdentifierNameSyntax: ToString|MemberBindingExpressionSyntax: .ToString|InvocationExpressionSyntax: .ToString()}"]
2 -> 1
1 [shape=record label="{SIMPLE|VariableDeclaratorSyntax: ret = o?.ToString()}"]
1 -> 3
3 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.ConditionalAccess" {
label = "Roslyn.ConditionalAccess"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|1# ParameterReferenceOperation / IdentifierNameSyntax: o|0# FlowCaptureOperation / IdentifierNameSyntax: o|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|0# IsNullOperation / IdentifierNameSyntax: o|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|2# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|1# InvocationOperation.ToString / InvocationExpressionSyntax: .ToString()|0# FlowCaptureOperation / InvocationExpressionSyntax: .ToString()|##########}"]
Root1 -> Root2 [label="Else"]
}
Root3 [shape=record label="{BLOCK #Root3|1# DefaultValueOperation / IdentifierNameSyntax: o|0# FlowCaptureOperation / IdentifierNameSyntax: o|##########}"]
Root1 -> Root3 [label="WhenTrue"]
Root4 [shape=record label="{BLOCK #Root4|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = o?.ToString()|1# FlowCaptureReferenceOperation / ConditionalAccessExpressionSyntax: o?.ToString()|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = o?.ToString()|##########}"]
Root2 -> Root4
Root3 -> Root4
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root5 [shape=record label="{EXIT #Root5}"]
Root4 -> Root5
}
}
