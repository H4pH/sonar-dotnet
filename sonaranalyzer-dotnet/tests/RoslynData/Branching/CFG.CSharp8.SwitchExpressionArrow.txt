// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22SwitchExpressionArrow%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.SwitchExpressionArrow%22%20%7B%0Alabel%20%3D%20%22Sonar.SwitchExpressionArrow%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ASwitchExpressionArm%7CIdentifierNameSyntax%3A%20value%7CLiteralExpressionSyntax%3A%200%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22Zero%5C%22%7D%22%5D%0D%0A1%20-%3E%203%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ASwitchExpressionArm%7CIdentifierNameSyntax%3A%20value%7CLiteralExpressionSyntax%3A%201%7D%22%5D%0D%0A2%20-%3E%204%20%5Blabel%3D%22True%22%5D%0D%0A2%20-%3E%205%20%5Blabel%3D%22False%22%5D%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22One%5C%22%7D%22%5D%0D%0A4%20-%3E%203%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ASwitchExpressionArm%7CIdentifierNameSyntax%3A%20value%7CLiteralExpressionSyntax%3A%202%7D%22%5D%0D%0A5%20-%3E%206%20%5Blabel%3D%22True%22%5D%0D%0A5%20-%3E%207%20%5Blabel%3D%22False%22%5D%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22Two%5C%22%7D%22%5D%0D%0A6%20-%3E%203%0D%0A7%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22Else%5C%22%7D%22%5D%0D%0A7%20-%3E%203%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7D%22%5D%0D%0A3%20-%3E%208%0D%0A8%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.SwitchExpressionArrow%22%20%7B%0Alabel%20%3D%20%22Roslyn.SwitchExpressionArrow%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C1%23%20ConstantPatternOperation%20%2F%20ConstantPatternSyntax%3A%200%7C0%23%20IsPatternOperation%20%2F%20SwitchExpressionArmSyntax%3A%200%20%3D%5C%3E%20%5C%22Zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Zero%5C%22%7C0%23%20FlowCaptureOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%20%5Blabel%3D%22Else%22%5D%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C1%23%20ConstantPatternOperation%20%2F%20ConstantPatternSyntax%3A%201%7C0%23%20IsPatternOperation%20%2F%20SwitchExpressionArmSyntax%3A%201%20%3D%5C%3E%20%5C%22One%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root3%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22One%5C%22%7C0%23%20FlowCaptureOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22One%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3%20-%3E%20Root4%20%5Blabel%3D%22Else%22%5D%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root5%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%202%7C1%23%20ConstantPatternOperation%20%2F%20ConstantPatternSyntax%3A%202%7C0%23%20IsPatternOperation%20%2F%20SwitchExpressionArmSyntax%3A%202%20%3D%5C%3E%20%5C%22Two%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3%20-%3E%20Root5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root6%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Two%5C%22%7C0%23%20FlowCaptureOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Two%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5%20-%3E%20Root6%20%5Blabel%3D%22Else%22%5D%0D%0ARoot7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root7%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C1%23%20DiscardPatternOperation%20%2F%20DiscardPatternSyntax%3A%20_%7C0%23%20IsPatternOperation%20%2F%20SwitchExpressionArmSyntax%3A%20_%20%3D%5C%3E%20%5C%22Else%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5%20-%3E%20Root7%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot8%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root8%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Else%5C%22%7C0%23%20FlowCaptureOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Else%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot7%20-%3E%20Root8%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot9%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root9%7C%23%23%20BranchValue%20%23%23%7C0%23%20ObjectCreationOperation%20%2F%20SwitchExpressionSyntax%3A%20value%20switch%5Cn%20%20%20%20%20%20%20%20%5C%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%200%20%3D%5C%3E%20%5C%22Zero%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%201%20%3D%5C%3E%20%5C%22One%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%202%20%3D%5C%3E%20%5C%22Two%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%5C%3E%20%5C%22Else%5C%22%5Cn%20%20%20%20%20%20%20%20%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot7%20-%3E%20Root9%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot9%20-%3E%20NoDestinationRoot9%20%5Blabel%3D%22Throw%22%5D%0D%0ARoot10%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root10%7C%23%23%20BranchValue%20%23%23%7C0%23%20FlowCaptureReferenceOperation%20%2F%20SwitchExpressionSyntax%3A%20value%20switch%5Cn%20%20%20%20%20%20%20%20%5C%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%200%20%3D%5C%3E%20%5C%22Zero%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%201%20%3D%5C%3E%20%5C%22One%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%202%20%3D%5C%3E%20%5C%22Two%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%5C%3E%20%5C%22Else%5C%22%5Cn%20%20%20%20%20%20%20%20%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root10%0D%0ARoot4%20-%3E%20Root10%0D%0ARoot6%20-%3E%20Root10%0D%0ARoot8%20-%3E%20Root10%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot11%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root11%7D%22%5D%0D%0ARoot10%20-%3E%20Root11%20%5Blabel%3D%22Return%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string SwitchExpressionArrow(int value)
    {
        return value switch
        {
            0 => "Zero",
            1 => "One",
            2 => "Two",
            _ => "Else"
        };
    }
*/

digraph "SwitchExpressionArrow" {
subgraph "cluster_Sonar.SwitchExpressionArrow" {
label = "Sonar.SwitchExpressionArrow"
0 [shape=record label="{BINARY:SwitchExpressionArm|IdentifierNameSyntax: value|LiteralExpressionSyntax: 0}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Zero\"}"]
1 -> 3
2 [shape=record label="{BINARY:SwitchExpressionArm|IdentifierNameSyntax: value|LiteralExpressionSyntax: 1}"]
2 -> 4 [label="True"]
2 -> 5 [label="False"]
4 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"One\"}"]
4 -> 3
5 [shape=record label="{BINARY:SwitchExpressionArm|IdentifierNameSyntax: value|LiteralExpressionSyntax: 2}"]
5 -> 6 [label="True"]
5 -> 7 [label="False"]
6 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Two\"}"]
6 -> 3
7 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Else\"}"]
7 -> 3
3 [shape=record label="{JUMP:ReturnStatement}"]
3 -> 8
8 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.SwitchExpressionArrow" {
label = "Roslyn.SwitchExpressionArrow"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|1# ParameterReferenceOperation / IdentifierNameSyntax: value|0# FlowCaptureOperation / IdentifierNameSyntax: value|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: value|2# LiteralOperation / LiteralExpressionSyntax: 0|1# ConstantPatternOperation / ConstantPatternSyntax: 0|0# IsPatternOperation / SwitchExpressionArmSyntax: 0 =\> \"Zero\"|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|1# LiteralOperation / LiteralExpressionSyntax: \"Zero\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"Zero\"|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: value|2# LiteralOperation / LiteralExpressionSyntax: 1|1# ConstantPatternOperation / ConstantPatternSyntax: 1|0# IsPatternOperation / SwitchExpressionArmSyntax: 1 =\> \"One\"|##########}"]
Root1 -> Root3 [label="WhenFalse"]
Root4 [shape=record label="{BLOCK #Root4|1# LiteralOperation / LiteralExpressionSyntax: \"One\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"One\"|##########}"]
Root3 -> Root4 [label="Else"]
Root5 [shape=record label="{BLOCK #Root5|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: value|2# LiteralOperation / LiteralExpressionSyntax: 2|1# ConstantPatternOperation / ConstantPatternSyntax: 2|0# IsPatternOperation / SwitchExpressionArmSyntax: 2 =\> \"Two\"|##########}"]
Root3 -> Root5 [label="WhenFalse"]
Root6 [shape=record label="{BLOCK #Root6|1# LiteralOperation / LiteralExpressionSyntax: \"Two\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"Two\"|##########}"]
Root5 -> Root6 [label="Else"]
Root7 [shape=record label="{BLOCK #Root7|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: value|1# DiscardPatternOperation / DiscardPatternSyntax: _|0# IsPatternOperation / SwitchExpressionArmSyntax: _ =\> \"Else\"|##########}"]
Root5 -> Root7 [label="WhenFalse"]
Root8 [shape=record label="{BLOCK #Root8|1# LiteralOperation / LiteralExpressionSyntax: \"Else\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"Else\"|##########}"]
Root7 -> Root8 [label="Else"]
}
Root9 [shape=record label="{BLOCK #Root9|## BranchValue ##|0# ObjectCreationOperation / SwitchExpressionSyntax: value switch\n        \{\n            0 =\> \"Zero\",\n            1 =\> \"One\",\n            2 =\> \"Two\",\n            _ =\> \"Else\"\n        \}|##########}"]
Root7 -> Root9 [label="WhenFalse"]
Root9 -> NoDestinationRoot9 [label="Throw"]
Root10 [shape=record label="{BLOCK #Root10|## BranchValue ##|0# FlowCaptureReferenceOperation / SwitchExpressionSyntax: value switch\n        \{\n            0 =\> \"Zero\",\n            1 =\> \"One\",\n            2 =\> \"Two\",\n            _ =\> \"Else\"\n        \}|##########}"]
Root2 -> Root10
Root4 -> Root10
Root6 -> Root10
Root8 -> Root10
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root11 [shape=record label="{EXIT #Root11}"]
Root10 -> Root11 [label="Return"]
}
}
