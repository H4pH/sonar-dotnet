// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22SwitchStatementBreakWithWhen%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.SwitchStatementBreakWithWhen%22%20%7B%0Alabel%20%3D%20%22Sonar.SwitchStatementBreakWithWhen%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ASwitchStatement%7CVariableDeclaratorSyntax%3A%20ret%7CIdentifierNameSyntax%3A%20value%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CConstantPatternSyntax%3A%200%7D%22%5D%0D%0A1%20-%3E%202%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A%20condition%7D%22%5D%0D%0A2%20-%3E%204%20%5Blabel%3D%22True%22%5D%0D%0A2%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3ABreakStatement%7CLiteralExpressionSyntax%3A%20%5C%22Zero%5C%22%7CAssignmentExpressionSyntax%3A%20ret%20%3D%20%5C%22Zero%5C%22%7D%22%5D%0D%0A4%20-%3E%205%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACaseSwitchLabel%7CIdentifierNameSyntax%3A%20value%7D%22%5D%0D%0A3%20-%3E%206%20%5Blabel%3D%22True%22%5D%0D%0A3%20-%3E%207%20%5Blabel%3D%22False%22%5D%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3ABreakStatement%7CLiteralExpressionSyntax%3A%20%5C%22One%5C%22%7CAssignmentExpressionSyntax%3A%20ret%20%3D%20%5C%22One%5C%22%7D%22%5D%0D%0A6%20-%3E%205%0D%0A7%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACaseSwitchLabel%7CIdentifierNameSyntax%3A%20value%7D%22%5D%0D%0A7%20-%3E%208%20%5Blabel%3D%22True%22%5D%0D%0A7%20-%3E%209%20%5Blabel%3D%22False%22%5D%0D%0A8%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3ABreakStatement%7CLiteralExpressionSyntax%3A%20%5C%22Two%5C%22%7CAssignmentExpressionSyntax%3A%20ret%20%3D%20%5C%22Two%5C%22%7D%22%5D%0D%0A8%20-%3E%205%0D%0A9%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3ABreakStatement%7CLiteralExpressionSyntax%3A%20%5C%22Other%5C%22%7CAssignmentExpressionSyntax%3A%20ret%20%3D%20%5C%22Other%5C%22%7D%22%5D%0D%0A9%20-%3E%205%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20ret%7D%22%5D%0D%0A5%20-%3E%2010%0D%0A10%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.SwitchStatementBreakWithWhen%22%20%7B%0Alabel%20%3D%20%22Roslyn.SwitchStatementBreakWithWhen%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C1%23%20ConstantPatternOperation%20%2F%20ConstantPatternSyntax%3A%200%7C0%23%20IsPatternOperation%20%2F%20ConstantPatternSyntax%3A%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20condition%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%20%5Blabel%3D%22Else%22%5D%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ret%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Zero%5C%22%7C1%23%20SimpleAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20ret%20%3D%20%5C%22Zero%5C%22%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20ret%20%3D%20%5C%22Zero%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root3%20%5Blabel%3D%22Else%22%5D%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C0%23%20BinaryOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root4%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot2%20-%3E%20Root4%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root5%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ret%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22One%5C%22%7C1%23%20SimpleAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20ret%20%3D%20%5C%22One%5C%22%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20ret%20%3D%20%5C%22One%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4%20-%3E%20Root5%20%5Blabel%3D%22Else%22%5D%0D%0ARoot6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root6%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%202%7C0%23%20BinaryOperation%20%2F%20LiteralExpressionSyntax%3A%202%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4%20-%3E%20Root6%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root7%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ret%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Two%5C%22%7C1%23%20SimpleAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20ret%20%3D%20%5C%22Two%5C%22%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20ret%20%3D%20%5C%22Two%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot6%20-%3E%20Root7%20%5Blabel%3D%22Else%22%5D%0D%0ARoot8%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root8%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ret%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Other%5C%22%7C1%23%20SimpleAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20ret%20%3D%20%5C%22Other%5C%22%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20ret%20%3D%20%5C%22Other%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot6%20-%3E%20Root8%20%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0ARoot9%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root9%7C%23%23%20BranchValue%20%23%23%7C0%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ret%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3%20-%3E%20Root9%0D%0ARoot5%20-%3E%20Root9%0D%0ARoot7%20-%3E%20Root9%0D%0ARoot8%20-%3E%20Root9%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot10%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root10%7D%22%5D%0D%0ARoot9%20-%3E%20Root10%20%5Blabel%3D%22Return%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string SwitchStatementBreakWithWhen(int value, bool condition)
    {
        string ret;
        switch (value)
        {
            case 0 when condition:
                ret = "Zero";
                break;

            case 1:
                ret = "One";
                break;

            case 2:
                ret = "Two";
                break;

            default:
                ret = "Other";
                break;
        }
        return ret;
    }
*/

digraph "SwitchStatementBreakWithWhen" {
subgraph "cluster_Sonar.SwitchStatementBreakWithWhen" {
label = "Sonar.SwitchStatementBreakWithWhen"
0 [shape=record label="{BRANCH:SwitchStatement|VariableDeclaratorSyntax: ret|IdentifierNameSyntax: value}"]
0 -> 1
1 [shape=record label="{BINARY:CasePatternSwitchLabel|ConstantPatternSyntax: 0}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: condition}"]
2 -> 4 [label="True"]
2 -> 3 [label="False"]
4 [shape=record label="{JUMP:BreakStatement|LiteralExpressionSyntax: \"Zero\"|AssignmentExpressionSyntax: ret = \"Zero\"}"]
4 -> 5
3 [shape=record label="{BINARY:CaseSwitchLabel|IdentifierNameSyntax: value}"]
3 -> 6 [label="True"]
3 -> 7 [label="False"]
6 [shape=record label="{JUMP:BreakStatement|LiteralExpressionSyntax: \"One\"|AssignmentExpressionSyntax: ret = \"One\"}"]
6 -> 5
7 [shape=record label="{BINARY:CaseSwitchLabel|IdentifierNameSyntax: value}"]
7 -> 8 [label="True"]
7 -> 9 [label="False"]
8 [shape=record label="{JUMP:BreakStatement|LiteralExpressionSyntax: \"Two\"|AssignmentExpressionSyntax: ret = \"Two\"}"]
8 -> 5
9 [shape=record label="{JUMP:BreakStatement|LiteralExpressionSyntax: \"Other\"|AssignmentExpressionSyntax: ret = \"Other\"}"]
9 -> 5
5 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: ret}"]
5 -> 10
10 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.SwitchStatementBreakWithWhen" {
label = "Roslyn.SwitchStatementBreakWithWhen"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|1# ParameterReferenceOperation / IdentifierNameSyntax: value|0# FlowCaptureOperation / IdentifierNameSyntax: value|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: value|2# LiteralOperation / LiteralExpressionSyntax: 0|1# ConstantPatternOperation / ConstantPatternSyntax: 0|0# IsPatternOperation / ConstantPatternSyntax: 0|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: condition|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|2# LocalReferenceOperation / IdentifierNameSyntax: ret|2# LiteralOperation / LiteralExpressionSyntax: \"Zero\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: ret = \"Zero\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: ret = \"Zero\";|##########}"]
Root2 -> Root3 [label="Else"]
Root4 [shape=record label="{BLOCK #Root4|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: value|1# LiteralOperation / LiteralExpressionSyntax: 1|0# BinaryOperation / LiteralExpressionSyntax: 1|##########}"]
Root1 -> Root4 [label="WhenFalse"]
Root2 -> Root4 [label="WhenFalse"]
Root5 [shape=record label="{BLOCK #Root5|2# LocalReferenceOperation / IdentifierNameSyntax: ret|2# LiteralOperation / LiteralExpressionSyntax: \"One\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: ret = \"One\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: ret = \"One\";|##########}"]
Root4 -> Root5 [label="Else"]
Root6 [shape=record label="{BLOCK #Root6|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: value|1# LiteralOperation / LiteralExpressionSyntax: 2|0# BinaryOperation / LiteralExpressionSyntax: 2|##########}"]
Root4 -> Root6 [label="WhenFalse"]
Root7 [shape=record label="{BLOCK #Root7|2# LocalReferenceOperation / IdentifierNameSyntax: ret|2# LiteralOperation / LiteralExpressionSyntax: \"Two\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: ret = \"Two\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: ret = \"Two\";|##########}"]
Root6 -> Root7 [label="Else"]
Root8 [shape=record label="{BLOCK #Root8|2# LocalReferenceOperation / IdentifierNameSyntax: ret|2# LiteralOperation / LiteralExpressionSyntax: \"Other\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: ret = \"Other\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: ret = \"Other\";|##########}"]
Root6 -> Root8 [label="WhenFalse"]
}
Root9 [shape=record label="{BLOCK #Root9|## BranchValue ##|0# LocalReferenceOperation / IdentifierNameSyntax: ret|##########}"]
Root3 -> Root9
Root5 -> Root9
Root7 -> Root9
Root8 -> Root9
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root10 [shape=record label="{EXIT #Root10}"]
Root9 -> Root10 [label="Return"]
}
}
