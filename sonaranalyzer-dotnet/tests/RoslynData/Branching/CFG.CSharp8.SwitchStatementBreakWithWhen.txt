// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22SwitchStatementBreakWithWhen%22+%7B%0D%0Asubgraph+%22cluster_Sonar.SwitchStatementBreakWithWhen%22+%7B%0Alabel+%3D+%22Sonar.SwitchStatementBreakWithWhen%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBRANCH%3ASwitchStatement%7CVariableDeclaratorSyntax%3A+ret%7CIdentifierNameSyntax%3A+value%7D%22%5D%0D%0A0+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CConstantPatternSyntax%3A+0%7D%22%5D%0D%0A1+-%3E+2+%5Blabel%3D%22True%22%5D%0D%0A1+-%3E+3+%5Blabel%3D%22False%22%5D%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A+condition%7D%22%5D%0D%0A2+-%3E+4+%5Blabel%3D%22True%22%5D%0D%0A2+-%3E+3+%5Blabel%3D%22False%22%5D%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BJUMP%3ABreakStatement%7CLiteralExpressionSyntax%3A+%5C%22Zero%5C%22%7CAssignmentExpressionSyntax%3A+ret+%3D+%5C%22Zero%5C%22%7D%22%5D%0D%0A4+-%3E+5%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACaseSwitchLabel%7CIdentifierNameSyntax%3A+value%7D%22%5D%0D%0A3+-%3E+6+%5Blabel%3D%22True%22%5D%0D%0A3+-%3E+7+%5Blabel%3D%22False%22%5D%0D%0A6+%5Bshape%3Drecord+label%3D%22%7BJUMP%3ABreakStatement%7CLiteralExpressionSyntax%3A+%5C%22One%5C%22%7CAssignmentExpressionSyntax%3A+ret+%3D+%5C%22One%5C%22%7D%22%5D%0D%0A6+-%3E+5%0D%0A7+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACaseSwitchLabel%7CIdentifierNameSyntax%3A+value%7D%22%5D%0D%0A7+-%3E+8+%5Blabel%3D%22True%22%5D%0D%0A7+-%3E+9+%5Blabel%3D%22False%22%5D%0D%0A8+%5Bshape%3Drecord+label%3D%22%7BJUMP%3ABreakStatement%7CLiteralExpressionSyntax%3A+%5C%22Two%5C%22%7CAssignmentExpressionSyntax%3A+ret+%3D+%5C%22Two%5C%22%7D%22%5D%0D%0A8+-%3E+5%0D%0A9+%5Bshape%3Drecord+label%3D%22%7BJUMP%3ABreakStatement%7CLiteralExpressionSyntax%3A+%5C%22Other%5C%22%7CAssignmentExpressionSyntax%3A+ret+%3D+%5C%22Other%5C%22%7D%22%5D%0D%0A9+-%3E+5%0D%0A5+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A+ret%7D%22%5D%0D%0A5+-%3E+10%0D%0A10+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.SwitchStatementBreakWithWhen%22+%7B%0Alabel+%3D+%22Roslyn.SwitchStatementBreakWithWhen%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0AR1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R1%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+value%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+value%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+value%7C2%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C1%23+ConstantPatternOperation+%2F+ConstantPatternSyntax%3A+0%7C0%23+IsPatternOperation+%2F+ConstantPatternSyntax%3A+0%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0+-%3E+R1%0D%0AR2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R2%7C%23%23+BranchValue+%23%23%7C0%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+condition%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1+-%3E+R2+%5Blabel%3D%22Else%22%5D%0D%0AR3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R3%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+ret%7C2%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Zero%5C%22%7C1%23+SimpleAssignmentOperation+%2F+AssignmentExpressionSyntax%3A+ret+%3D+%5C%22Zero%5C%22%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+ret+%3D+%5C%22Zero%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2+-%3E+R3+%5Blabel%3D%22Else%22%5D%0D%0AR4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R4%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+value%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+1%7C0%23+BinaryOperation+%2F+LiteralExpressionSyntax%3A+1%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1+-%3E+R4+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR2+-%3E+R4+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R5%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+ret%7C2%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22One%5C%22%7C1%23+SimpleAssignmentOperation+%2F+AssignmentExpressionSyntax%3A+ret+%3D+%5C%22One%5C%22%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+ret+%3D+%5C%22One%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4+-%3E+R5+%5Blabel%3D%22Else%22%5D%0D%0AR6+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R6%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+value%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+2%7C0%23+BinaryOperation+%2F+LiteralExpressionSyntax%3A+2%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4+-%3E+R6+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR7+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R7%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+ret%7C2%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Two%5C%22%7C1%23+SimpleAssignmentOperation+%2F+AssignmentExpressionSyntax%3A+ret+%3D+%5C%22Two%5C%22%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+ret+%3D+%5C%22Two%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR6+-%3E+R7+%5Blabel%3D%22Else%22%5D%0D%0AR8+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R8%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+ret%7C2%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Other%5C%22%7C1%23+SimpleAssignmentOperation+%2F+AssignmentExpressionSyntax%3A+ret+%3D+%5C%22Other%5C%22%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+ret+%3D+%5C%22Other%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR6+-%3E+R8+%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0AR9+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R9%7C%23%23+BranchValue+%23%23%7C0%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+ret%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3+-%3E+R9%0D%0AR5+-%3E+R9%0D%0AR7+-%3E+R9%0D%0AR8+-%3E+R9%0D%0A%7D%0D%0AR0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23R0%7D%22%5D%0D%0AR10+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23R10%7D%22%5D%0D%0AR9+-%3E+R10%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string SwitchStatementBreakWithWhen(int value, bool condition)
    {
        string ret;
        switch (value)
        {
            case 0 when condition:
                ret = "Zero";
                break;

            case 1:
                ret = "One";
                break;

            case 2:
                ret = "Two";
                break;

            default:
                ret = "Other";
                break;
        }
        return ret;
    }
*/

digraph "SwitchStatementBreakWithWhen" {
subgraph "cluster_Sonar.SwitchStatementBreakWithWhen" {
label = "Sonar.SwitchStatementBreakWithWhen"
0 [shape=record label="{BRANCH:SwitchStatement|VariableDeclaratorSyntax: ret|IdentifierNameSyntax: value}"]
0 -> 1
1 [shape=record label="{BINARY:CasePatternSwitchLabel|ConstantPatternSyntax: 0}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: condition}"]
2 -> 4 [label="True"]
2 -> 3 [label="False"]
4 [shape=record label="{JUMP:BreakStatement|LiteralExpressionSyntax: \"Zero\"|AssignmentExpressionSyntax: ret = \"Zero\"}"]
4 -> 5
3 [shape=record label="{BINARY:CaseSwitchLabel|IdentifierNameSyntax: value}"]
3 -> 6 [label="True"]
3 -> 7 [label="False"]
6 [shape=record label="{JUMP:BreakStatement|LiteralExpressionSyntax: \"One\"|AssignmentExpressionSyntax: ret = \"One\"}"]
6 -> 5
7 [shape=record label="{BINARY:CaseSwitchLabel|IdentifierNameSyntax: value}"]
7 -> 8 [label="True"]
7 -> 9 [label="False"]
8 [shape=record label="{JUMP:BreakStatement|LiteralExpressionSyntax: \"Two\"|AssignmentExpressionSyntax: ret = \"Two\"}"]
8 -> 5
9 [shape=record label="{JUMP:BreakStatement|LiteralExpressionSyntax: \"Other\"|AssignmentExpressionSyntax: ret = \"Other\"}"]
9 -> 5
5 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: ret}"]
5 -> 10
10 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.SwitchStatementBreakWithWhen" {
label = "Roslyn.SwitchStatementBreakWithWhen"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
R1 [shape=record label="{BLOCK #R1|1# ParameterReferenceOperation / IdentifierNameSyntax: value|0# FlowCaptureOperation / IdentifierNameSyntax: value|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: value|2# LiteralOperation / LiteralExpressionSyntax: 0|1# ConstantPatternOperation / ConstantPatternSyntax: 0|0# IsPatternOperation / ConstantPatternSyntax: 0|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: condition|##########}"]
R1 -> R2 [label="Else"]
R3 [shape=record label="{BLOCK #R3|2# LocalReferenceOperation / IdentifierNameSyntax: ret|2# LiteralOperation / LiteralExpressionSyntax: \"Zero\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: ret = \"Zero\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: ret = \"Zero\";|##########}"]
R2 -> R3 [label="Else"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: value|1# LiteralOperation / LiteralExpressionSyntax: 1|0# BinaryOperation / LiteralExpressionSyntax: 1|##########}"]
R1 -> R4 [label="WhenFalse"]
R2 -> R4 [label="WhenFalse"]
R5 [shape=record label="{BLOCK #R5|2# LocalReferenceOperation / IdentifierNameSyntax: ret|2# LiteralOperation / LiteralExpressionSyntax: \"One\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: ret = \"One\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: ret = \"One\";|##########}"]
R4 -> R5 [label="Else"]
R6 [shape=record label="{BLOCK #R6|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: value|1# LiteralOperation / LiteralExpressionSyntax: 2|0# BinaryOperation / LiteralExpressionSyntax: 2|##########}"]
R4 -> R6 [label="WhenFalse"]
R7 [shape=record label="{BLOCK #R7|2# LocalReferenceOperation / IdentifierNameSyntax: ret|2# LiteralOperation / LiteralExpressionSyntax: \"Two\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: ret = \"Two\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: ret = \"Two\";|##########}"]
R6 -> R7 [label="Else"]
R8 [shape=record label="{BLOCK #R8|2# LocalReferenceOperation / IdentifierNameSyntax: ret|2# LiteralOperation / LiteralExpressionSyntax: \"Other\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: ret = \"Other\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: ret = \"Other\";|##########}"]
R6 -> R8 [label="WhenFalse"]
}
R9 [shape=record label="{BLOCK #R9|## BranchValue ##|0# LocalReferenceOperation / IdentifierNameSyntax: ret|##########}"]
R3 -> R9
R5 -> R9
R7 -> R9
R8 -> R9
}
R0 [shape=record label="{ENTRY #R0}"]
R10 [shape=record label="{EXIT #R10}"]
R9 -> R10
}
}
