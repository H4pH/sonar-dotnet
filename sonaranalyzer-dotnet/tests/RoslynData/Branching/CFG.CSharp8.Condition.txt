// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22Condition%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.Condition%22%20%7B%0Alabel%20%3D%20%22Sonar.Condition%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIdentifierName%7CLiteralExpressionSyntax%3A%20%5C%22Init%5C%22%7CVariableDeclaratorSyntax%3A%20value%20%3D%20%5C%22Init%5C%22%7CIdentifierNameSyntax%3A%20condition%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22True%5C%22%7CAssignmentExpressionSyntax%3A%20value%20%3D%20%5C%22True%5C%22%7D%22%5D%0D%0A1%20-%3E%203%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22False%5C%22%7CAssignmentExpressionSyntax%3A%20value%20%3D%20%5C%22False%5C%22%7D%22%5D%0D%0A2%20-%3E%203%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20value%7D%22%5D%0D%0A3%20-%3E%204%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.Condition%22%20%7B%0Alabel%20%3D%20%22Roslyn.Condition%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20%5C%22Init%5C%22%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Init%5C%22%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20%5C%22Init%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20condition%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22True%5C%22%7C1%23%20SimpleAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20value%20%3D%20%5C%22True%5C%22%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20value%20%3D%20%5C%22True%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%20%5Blabel%3D%22Else%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22False%5C%22%7C1%23%20SimpleAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20value%20%3D%20%5C%22False%5C%22%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20value%20%3D%20%5C%22False%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R3%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C%23%23%20BranchValue%20%23%23%7C0%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R4%0D%0AR3%20-%3E%20R4%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R5%7D%22%5D%0D%0AR4%20-%3E%20R5%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string Condition(bool condition)
    {
        string value = "Init";
        if (condition)
        {
            value = "True";
        }
        else
        {
            value = "False";
        }
        return value;
    }
*/

digraph "Condition" {
subgraph "cluster_Sonar.Condition" {
label = "Sonar.Condition"
0 [shape=record label="{BINARY:IdentifierName|LiteralExpressionSyntax: \"Init\"|VariableDeclaratorSyntax: value = \"Init\"|IdentifierNameSyntax: condition}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"True\"|AssignmentExpressionSyntax: value = \"True\"}"]
1 -> 3
2 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"False\"|AssignmentExpressionSyntax: value = \"False\"}"]
2 -> 3
3 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: value}"]
3 -> 4
4 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.Condition" {
label = "Roslyn.Condition"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# LocalReferenceOperation / VariableDeclaratorSyntax: value = \"Init\"|1# LiteralOperation / LiteralExpressionSyntax: \"Init\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: value = \"Init\"|##########|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: condition|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|2# LocalReferenceOperation / IdentifierNameSyntax: value|2# LiteralOperation / LiteralExpressionSyntax: \"True\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: value = \"True\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: value = \"True\";|##########}"]
R1 -> R2 [label="Else"]
R3 [shape=record label="{BLOCK #R3|2# LocalReferenceOperation / IdentifierNameSyntax: value|2# LiteralOperation / LiteralExpressionSyntax: \"False\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: value = \"False\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: value = \"False\";|##########}"]
R1 -> R3 [label="WhenFalse"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|0# LocalReferenceOperation / IdentifierNameSyntax: value|##########}"]
R2 -> R4
R3 -> R4
R5 [shape=record label="{EXIT #R5}"]
R4 -> R5
}
}
