// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22ElseIf%22+%7B%0D%0Asubgraph+%22cluster_Sonar.ElseIf%22+%7B%0Alabel+%3D+%22Sonar.ElseIf%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A+value%7CLiteralExpressionSyntax%3A+0%7CBinaryExpressionSyntax%3A+value+%3D%3D+0%7D%22%5D%0D%0A0+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A0+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A+%5C%22Zero%5C%22%7D%22%5D%0D%0A1+-%3E+3%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A+value%7CLiteralExpressionSyntax%3A+1%7CBinaryExpressionSyntax%3A+value+%3D%3D+1%7D%22%5D%0D%0A2+-%3E+4+%5Blabel%3D%22True%22%5D%0D%0A2+-%3E+5+%5Blabel%3D%22False%22%5D%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A+%5C%22One%5C%22%7D%22%5D%0D%0A4+-%3E+3%0D%0A5+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A+value%7CLiteralExpressionSyntax%3A+2%7CBinaryExpressionSyntax%3A+value+%3D%3D+2%7D%22%5D%0D%0A5+-%3E+6+%5Blabel%3D%22True%22%5D%0D%0A5+-%3E+7+%5Blabel%3D%22False%22%5D%0D%0A6+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A+%5C%22Two%5C%22%7D%22%5D%0D%0A6+-%3E+3%0D%0A7+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A+%5C%22Something+else%5C%22%7D%22%5D%0D%0A7+-%3E+3%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.ElseIf%22+%7B%0Alabel+%3D+%22Roslyn.ElseIf%22%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C%23%23+BranchValue+%23%23%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+value%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C0%23+BinaryOperation+%2F+BinaryExpressionSyntax%3A+value+%3D%3D+0%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root2%7C%23%23+BranchValue+%23%23%7C0%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root2+%5Blabel%3D%22Else%22%5D%0D%0ARoot3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root3%7C%23%23+BranchValue+%23%23%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+value%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+1%7C0%23+BinaryOperation+%2F+BinaryExpressionSyntax%3A+value+%3D%3D+1%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root3+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root4%7C%23%23+BranchValue+%23%23%7C0%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22One%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3+-%3E+Root4+%5Blabel%3D%22Else%22%5D%0D%0ARoot5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root5%7C%23%23+BranchValue+%23%23%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+value%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+2%7C0%23+BinaryOperation+%2F+BinaryExpressionSyntax%3A+value+%3D%3D+2%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3+-%3E+Root5+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot6+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root6%7C%23%23+BranchValue+%23%23%7C0%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Two%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5+-%3E+Root6+%5Blabel%3D%22Else%22%5D%0D%0ARoot7+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root7%7C%23%23+BranchValue+%23%23%7C0%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Something+else%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5+-%3E+Root7+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot8+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root8%7D%22%5D%0D%0ARoot2+-%3E+Root8+%5Blabel%3D%22Return%22%5D%0D%0ARoot4+-%3E+Root8+%5Blabel%3D%22Return%22%5D%0D%0ARoot6+-%3E+Root8+%5Blabel%3D%22Return%22%5D%0D%0ARoot7+-%3E+Root8+%5Blabel%3D%22Return%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string ElseIf(int value)
    {
        if (value == 0)
            return "Zero";
        else if (value == 1)
            return "One";
        else if (value == 2)
            return "Two";
        else
            return "Something else";
    }
*/

digraph "ElseIf" {
subgraph "cluster_Sonar.ElseIf" {
label = "Sonar.ElseIf"
0 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: value|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: value == 0}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: \"Zero\"}"]
1 -> 3
2 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: value|LiteralExpressionSyntax: 1|BinaryExpressionSyntax: value == 1}"]
2 -> 4 [label="True"]
2 -> 5 [label="False"]
4 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: \"One\"}"]
4 -> 3
5 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: value|LiteralExpressionSyntax: 2|BinaryExpressionSyntax: value == 2}"]
5 -> 6 [label="True"]
5 -> 7 [label="False"]
6 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: \"Two\"}"]
6 -> 3
7 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: \"Something else\"}"]
7 -> 3
3 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.ElseIf" {
label = "Roslyn.ElseIf"
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|1# ParameterReferenceOperation / IdentifierNameSyntax: value|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: value == 0|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|## BranchValue ##|0# LiteralOperation / LiteralExpressionSyntax: \"Zero\"|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|1# ParameterReferenceOperation / IdentifierNameSyntax: value|1# LiteralOperation / LiteralExpressionSyntax: 1|0# BinaryOperation / BinaryExpressionSyntax: value == 1|##########}"]
Root1 -> Root3 [label="WhenFalse"]
Root4 [shape=record label="{BLOCK #Root4|## BranchValue ##|0# LiteralOperation / LiteralExpressionSyntax: \"One\"|##########}"]
Root3 -> Root4 [label="Else"]
Root5 [shape=record label="{BLOCK #Root5|## BranchValue ##|1# ParameterReferenceOperation / IdentifierNameSyntax: value|1# LiteralOperation / LiteralExpressionSyntax: 2|0# BinaryOperation / BinaryExpressionSyntax: value == 2|##########}"]
Root3 -> Root5 [label="WhenFalse"]
Root6 [shape=record label="{BLOCK #Root6|## BranchValue ##|0# LiteralOperation / LiteralExpressionSyntax: \"Two\"|##########}"]
Root5 -> Root6 [label="Else"]
Root7 [shape=record label="{BLOCK #Root7|## BranchValue ##|0# LiteralOperation / LiteralExpressionSyntax: \"Something else\"|##########}"]
Root5 -> Root7 [label="WhenFalse"]
Root8 [shape=record label="{EXIT #Root8}"]
Root2 -> Root8 [label="Return"]
Root4 -> Root8 [label="Return"]
Root6 -> Root8 [label="Return"]
Root7 -> Root8 [label="Return"]
}
}
