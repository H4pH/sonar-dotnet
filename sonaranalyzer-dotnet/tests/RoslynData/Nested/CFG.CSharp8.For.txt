// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22For%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.For%22%20%7B%0Alabel%20%3D%20%22Sonar.For%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BFOR%3AForStatement%7CLiteralExpressionSyntax%3A%200%7CVariableDeclaratorSyntax%3A%20i%20%3D%200%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AForStatement%7CIdentifierNameSyntax%3A%20i%7CIdentifierNameSyntax%3A%20a%7CBinaryExpressionSyntax%3A%20i%20%5C%3C%20a%7D%22%5D%0D%0A1%20-%3E%202%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BFOR%3AForStatement%7CLiteralExpressionSyntax%3A%200%7CVariableDeclaratorSyntax%3A%20j%20%3D%200%7D%22%5D%0D%0A2%20-%3E%204%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AForStatement%7CIdentifierNameSyntax%3A%20j%7CIdentifierNameSyntax%3A%20b%7CBinaryExpressionSyntax%3A%20j%20%5C%3C%20b%7D%22%5D%0D%0A4%20-%3E%205%20%5Blabel%3D%22True%22%5D%0D%0A4%20-%3E%206%20%5Blabel%3D%22False%22%5D%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20i%7CIdentifierNameSyntax%3A%20j%7CBinaryExpressionSyntax%3A%20i%20%2B%20j%7CVariableDeclaratorSyntax%3A%20x%20%3D%20i%20%2B%20j%7D%22%5D%0D%0A5%20-%3E%207%0D%0A7%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20i%7CPostfixUnaryExpressionSyntax%3A%20i%2B%2B%7D%22%5D%0D%0A7%20-%3E%204%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20i%7CPostfixUnaryExpressionSyntax%3A%20i%2B%2B%7D%22%5D%0D%0A6%20-%3E%201%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.For%22%20%7B%0Alabel%20%3D%20%22Roslyn.For%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root5%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20x%20%3D%20i%20%2B%20j%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20j%7C1%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20i%20%2B%20j%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20x%20%3D%20i%20%2B%20j%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4%20-%3E%20Root5%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20j%20%3D%200%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20j%20%3D%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root3%20%5Blabel%3D%22Else%22%5D%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20j%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20b%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20j%20%5C%3C%20b%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3%20-%3E%20Root4%0D%0ARoot6%20-%3E%20Root4%0D%0ARoot6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root6%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C1%23%20IncrementOrDecrementOperation%20%2F%20PostfixUnaryExpressionSyntax%3A%20i%2B%2B%7C0%23%20ExpressionStatementOperation%20%2F%20PostfixUnaryExpressionSyntax%3A%20i%2B%2B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5%20-%3E%20Root6%0D%0A%7D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20i%20%3D%200%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20i%20%3D%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20i%20%5C%3C%20a%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%0D%0ARoot7%20-%3E%20Root2%0D%0ARoot7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root7%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C1%23%20IncrementOrDecrementOperation%20%2F%20PostfixUnaryExpressionSyntax%3A%20i%2B%2B%7C0%23%20ExpressionStatementOperation%20%2F%20PostfixUnaryExpressionSyntax%3A%20i%2B%2B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4%20-%3E%20Root7%20%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot8%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root8%7D%22%5D%0D%0ARoot2%20-%3E%20Root8%20%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void For(int a, int b)
    {
        for (int i = 0; i < a; i++)
        {
            for (int j = 0; j < b; i++)
            {
                var x = i + j;
            }
        }
    }
*/

digraph "For" {
subgraph "cluster_Sonar.For" {
label = "Sonar.For"
0 [shape=record label="{FOR:ForStatement|LiteralExpressionSyntax: 0|VariableDeclaratorSyntax: i = 0}"]
0 -> 1
1 [shape=record label="{BINARY:ForStatement|IdentifierNameSyntax: i|IdentifierNameSyntax: a|BinaryExpressionSyntax: i \< a}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{FOR:ForStatement|LiteralExpressionSyntax: 0|VariableDeclaratorSyntax: j = 0}"]
2 -> 4
4 [shape=record label="{BINARY:ForStatement|IdentifierNameSyntax: j|IdentifierNameSyntax: b|BinaryExpressionSyntax: j \< b}"]
4 -> 5 [label="True"]
4 -> 6 [label="False"]
5 [shape=record label="{SIMPLE|IdentifierNameSyntax: i|IdentifierNameSyntax: j|BinaryExpressionSyntax: i + j|VariableDeclaratorSyntax: x = i + j}"]
5 -> 7
7 [shape=record label="{SIMPLE|IdentifierNameSyntax: i|PostfixUnaryExpressionSyntax: i++}"]
7 -> 4
6 [shape=record label="{SIMPLE|IdentifierNameSyntax: i|PostfixUnaryExpressionSyntax: i++}"]
6 -> 1
3 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.For" {
label = "Roslyn.For"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root5 [shape=record label="{BLOCK #Root5|1# LocalReferenceOperation / VariableDeclaratorSyntax: x = i + j|2# LocalReferenceOperation / IdentifierNameSyntax: i|2# LocalReferenceOperation / IdentifierNameSyntax: j|1# BinaryOperation / BinaryExpressionSyntax: i + j|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: x = i + j|##########}"]
Root4 -> Root5 [label="Else"]
}
Root3 [shape=record label="{BLOCK #Root3|1# LocalReferenceOperation / VariableDeclaratorSyntax: j = 0|1# LiteralOperation / LiteralExpressionSyntax: 0|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: j = 0|##########}"]
Root2 -> Root3 [label="Else"]
Root4 [shape=record label="{BLOCK #Root4|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: j|1# ParameterReferenceOperation / IdentifierNameSyntax: b|0# BinaryOperation / BinaryExpressionSyntax: j \< b|##########}"]
Root3 -> Root4
Root6 -> Root4
Root6 [shape=record label="{BLOCK #Root6|2# LocalReferenceOperation / IdentifierNameSyntax: i|1# IncrementOrDecrementOperation / PostfixUnaryExpressionSyntax: i++|0# ExpressionStatementOperation / PostfixUnaryExpressionSyntax: i++|##########}"]
Root5 -> Root6
}
Root1 [shape=record label="{BLOCK #Root1|1# LocalReferenceOperation / VariableDeclaratorSyntax: i = 0|1# LiteralOperation / LiteralExpressionSyntax: 0|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: i = 0|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: i|1# ParameterReferenceOperation / IdentifierNameSyntax: a|0# BinaryOperation / BinaryExpressionSyntax: i \< a|##########}"]
Root1 -> Root2
Root7 -> Root2
Root7 [shape=record label="{BLOCK #Root7|2# LocalReferenceOperation / IdentifierNameSyntax: i|1# IncrementOrDecrementOperation / PostfixUnaryExpressionSyntax: i++|0# ExpressionStatementOperation / PostfixUnaryExpressionSyntax: i++|##########}"]
Root4 -> Root7 [label="WhenFalse"]
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root8 [shape=record label="{EXIT #Root8}"]
Root2 -> Root8 [label="WhenFalse"]
}
}
