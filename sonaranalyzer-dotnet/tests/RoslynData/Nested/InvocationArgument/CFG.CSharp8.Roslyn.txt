digraph "Roslyn.InvocationArgument" {
0 [shape=record label="{ENTRY #0}"]
1 [shape=record label="{BLOCK #1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: condition|##########}"]
0 -> 1
2 [shape=record label="{BLOCK #2|2# ParameterReferenceOperation / IdentifierNameSyntax: a|1# InvocationOperation / InvocationExpressionSyntax: a.ToString()|0# FlowCaptureOperation / InvocationExpressionSyntax: a.ToString()|##########}"]
1 -> 2 [label="Else"]
3 [shape=record label="{BLOCK #3|1# LiteralOperation / LiteralExpressionSyntax: \"Default\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"Default\"|##########}"]
1 -> 3 [label="WhenFalse"]
4 [shape=record label="{BLOCK #4|3# FlowCaptureReferenceOperation / ConditionalExpressionSyntax: condition ? a.ToString() : \"Default\"|2# ArgumentOperation / ArgumentSyntax: condition ? a.ToString() : \"Default\"|1# InvocationOperation / InvocationExpressionSyntax: Console.WriteLine(condition ? a.ToString() : \"Default\")|0# ExpressionStatementOperation / ExpressionStatementSyntax: Console.WriteLine(condition ? a.ToString() : \"Default\");|##########}"]
2 -> 4
3 -> 4
5 [shape=record label="{EXIT #5}"]
4 -> 5
}
