// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22TermaryCoalesce%22+%7B%0D%0Asubgraph+%22cluster_Sonar.TermaryCoalesce%22+%7B%0Alabel+%3D+%22Sonar.TermaryCoalesce%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A+condition%7D%22%5D%0D%0A0+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A0+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACoalesceExpression%7CIdentifierNameSyntax%3A+first%7D%22%5D%0D%0A1+-%3E+3+%5Blabel%3D%22True%22%5D%0D%0A1+-%3E+4+%5Blabel%3D%22False%22%5D%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A+second%7D%22%5D%0D%0A3+-%3E+4%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A+ternaryFalse%7D%22%5D%0D%0A2+-%3E+4%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CVariableDeclaratorSyntax%3A+x+%3D+condition+%3F+(first+%3F%3F+second)+%3A+ternaryFalse%7D%22%5D%0D%0A4+-%3E+5%0D%0A5+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.TermaryCoalesce%22+%7B%0Alabel+%3D+%22Roslyn.TermaryCoalesce%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root2%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+first%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+first%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+first%7C0%23+IsNullOperation+%2F+IdentifierNameSyntax%3A+first%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root2+%5Blabel%3D%22Else%22%5D%0D%0ARoot3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root3%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+first%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+first%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2+-%3E+Root3+%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C%23%23+BranchValue+%23%23%7C0%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+condition%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0ARoot4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root4%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+second%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+second%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2+-%3E+Root4+%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root5%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+ternaryFalse%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+ternaryFalse%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root5+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot6+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root6%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+x+%3D+condition+%3F+(first+%3F%3F+second)+%3A+ternaryFalse%7C1%23+FlowCaptureReferenceOperation+%2F+ConditionalExpressionSyntax%3A+condition+%3F+(first+%3F%3F+second)+%3A+ternaryFalse%7C0%23+SimpleAssignmentOperation+%2F+VariableDeclaratorSyntax%3A+x+%3D+condition+%3F+(first+%3F%3F+second)+%3A+ternaryFalse%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3+-%3E+Root6%0D%0ARoot4+-%3E+Root6%0D%0ARoot5+-%3E+Root6%0D%0A%7D%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot7+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root7%7D%22%5D%0D%0ARoot6+-%3E+Root7%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void TermaryCoalesce(bool condition, string first, string second, string ternaryFalse, string last)
    {
        var x = condition ? (first ?? second) : ternaryFalse;
    }
*/

digraph "TermaryCoalesce" {
subgraph "cluster_Sonar.TermaryCoalesce" {
label = "Sonar.TermaryCoalesce"
0 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: condition}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{BINARY:CoalesceExpression|IdentifierNameSyntax: first}"]
1 -> 3 [label="True"]
1 -> 4 [label="False"]
3 [shape=record label="{SIMPLE|IdentifierNameSyntax: second}"]
3 -> 4
2 [shape=record label="{SIMPLE|IdentifierNameSyntax: ternaryFalse}"]
2 -> 4
4 [shape=record label="{SIMPLE|VariableDeclaratorSyntax: x = condition ? (first ?? second) : ternaryFalse}"]
4 -> 5
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.TermaryCoalesce" {
label = "Roslyn.TermaryCoalesce"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root2 [shape=record label="{BLOCK #Root2|1# ParameterReferenceOperation / IdentifierNameSyntax: first|0# FlowCaptureOperation / IdentifierNameSyntax: first|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: first|0# IsNullOperation / IdentifierNameSyntax: first|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: first|0# FlowCaptureOperation / IdentifierNameSyntax: first|##########}"]
Root2 -> Root3 [label="Else"]
}
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: condition|##########}"]
Root0 -> Root1
Root4 [shape=record label="{BLOCK #Root4|1# ParameterReferenceOperation / IdentifierNameSyntax: second|0# FlowCaptureOperation / IdentifierNameSyntax: second|##########}"]
Root2 -> Root4 [label="WhenTrue"]
Root5 [shape=record label="{BLOCK #Root5|1# ParameterReferenceOperation / IdentifierNameSyntax: ternaryFalse|0# FlowCaptureOperation / IdentifierNameSyntax: ternaryFalse|##########}"]
Root1 -> Root5 [label="WhenFalse"]
Root6 [shape=record label="{BLOCK #Root6|1# LocalReferenceOperation / VariableDeclaratorSyntax: x = condition ? (first ?? second) : ternaryFalse|1# FlowCaptureReferenceOperation / ConditionalExpressionSyntax: condition ? (first ?? second) : ternaryFalse|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: x = condition ? (first ?? second) : ternaryFalse|##########}"]
Root3 -> Root6
Root4 -> Root6
Root5 -> Root6
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root7 [shape=record label="{EXIT #Root7}"]
Root6 -> Root7
}
}
