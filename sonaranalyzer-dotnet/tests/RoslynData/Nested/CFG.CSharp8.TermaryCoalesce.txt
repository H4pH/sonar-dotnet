// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22TermaryCoalesce%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.TermaryCoalesce%22%20%7B%0Alabel%20%3D%20%22Sonar.TermaryCoalesce%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A%20condition%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACoalesceExpression%7CIdentifierNameSyntax%3A%20first%7D%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%204%20%5Blabel%3D%22False%22%5D%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20second%7D%22%5D%0D%0A3%20-%3E%204%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20ternaryFalse%7D%22%5D%0D%0A2%20-%3E%204%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CVariableDeclaratorSyntax%3A%20x%20%3D%20condition%20%3F%20(first%20%3F%3F%20second)%20%3A%20ternaryFalse%7D%22%5D%0D%0A4%20-%3E%205%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.TermaryCoalesce%22%20%7B%0Alabel%20%3D%20%22Roslyn.TermaryCoalesce%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C0%23%20IsNullOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%20%5Blabel%3D%22Else%22%5D%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root3%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20condition%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20second%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20second%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root4%20%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root5%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ternaryFalse%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20ternaryFalse%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root6%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20x%20%3D%20condition%20%3F%20(first%20%3F%3F%20second)%20%3A%20ternaryFalse%7C1%23%20FlowCaptureReferenceOperation%20%2F%20ConditionalExpressionSyntax%3A%20condition%20%3F%20(first%20%3F%3F%20second)%20%3A%20ternaryFalse%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20x%20%3D%20condition%20%3F%20(first%20%3F%3F%20second)%20%3A%20ternaryFalse%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3%20-%3E%20Root6%0D%0ARoot4%20-%3E%20Root6%0D%0ARoot5%20-%3E%20Root6%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot7%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root7%7D%22%5D%0D%0ARoot6%20-%3E%20Root7%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void TermaryCoalesce(bool condition, string first, string second, string ternaryFalse, string last)
    {
        var x = condition ? (first ?? second) : ternaryFalse;
    }
*/

digraph "TermaryCoalesce" {
subgraph "cluster_Sonar.TermaryCoalesce" {
label = "Sonar.TermaryCoalesce"
0 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: condition}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{BINARY:CoalesceExpression|IdentifierNameSyntax: first}"]
1 -> 3 [label="True"]
1 -> 4 [label="False"]
3 [shape=record label="{SIMPLE|IdentifierNameSyntax: second}"]
3 -> 4
2 [shape=record label="{SIMPLE|IdentifierNameSyntax: ternaryFalse}"]
2 -> 4
4 [shape=record label="{SIMPLE|VariableDeclaratorSyntax: x = condition ? (first ?? second) : ternaryFalse}"]
4 -> 5
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.TermaryCoalesce" {
label = "Roslyn.TermaryCoalesce"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root2 [shape=record label="{BLOCK #Root2|1# ParameterReferenceOperation / IdentifierNameSyntax: first|0# FlowCaptureOperation / IdentifierNameSyntax: first|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: first|0# IsNullOperation / IdentifierNameSyntax: first|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: first|0# FlowCaptureOperation / IdentifierNameSyntax: first|##########}"]
Root2 -> Root3 [label="Else"]
}
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: condition|##########}"]
Root0 -> Root1
Root4 [shape=record label="{BLOCK #Root4|1# ParameterReferenceOperation / IdentifierNameSyntax: second|0# FlowCaptureOperation / IdentifierNameSyntax: second|##########}"]
Root2 -> Root4 [label="WhenTrue"]
Root5 [shape=record label="{BLOCK #Root5|1# ParameterReferenceOperation / IdentifierNameSyntax: ternaryFalse|0# FlowCaptureOperation / IdentifierNameSyntax: ternaryFalse|##########}"]
Root1 -> Root5 [label="WhenFalse"]
Root6 [shape=record label="{BLOCK #Root6|1# LocalReferenceOperation / VariableDeclaratorSyntax: x = condition ? (first ?? second) : ternaryFalse|1# FlowCaptureReferenceOperation / ConditionalExpressionSyntax: condition ? (first ?? second) : ternaryFalse|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: x = condition ? (first ?? second) : ternaryFalse|##########}"]
Root3 -> Root6
Root4 -> Root6
Root5 -> Root6
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root7 [shape=record label="{EXIT #Root7}"]
Root6 -> Root7
}
}
