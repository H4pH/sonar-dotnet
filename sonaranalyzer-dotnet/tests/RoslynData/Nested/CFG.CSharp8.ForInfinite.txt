// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22ForInfinite%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.ForInfinite%22%20%7B%0Alabel%20%3D%20%22Sonar.ForInfinite%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BFOR%3AForStatement%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AForStatement%7D%22%5D%0D%0A1%20-%3E%202%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3ABreakStatement%7CLiteralExpressionSyntax%3A%20%5C%22Value%5C%22%7CVariableDeclaratorSyntax%3A%20value%20%3D%20%5C%22Value%5C%22%7D%22%5D%0D%0A2%20-%3E%203%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.ForInfinite%22%20%7B%0Alabel%20%3D%20%22Roslyn.ForInfinite%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20%5C%22Value%5C%22%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Value%5C%22%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20%5C%22Value%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R2%7D%22%5D%0D%0AR1%20-%3E%20R2%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void ForInfinite()
    {
        for (; ; )
        {
            var value = "Value";
            break;
        }
    }
*/

digraph "ForInfinite" {
subgraph "cluster_Sonar.ForInfinite" {
label = "Sonar.ForInfinite"
0 [shape=record label="{FOR:ForStatement}"]
0 -> 1
1 [shape=record label="{BINARY:ForStatement}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{JUMP:BreakStatement|LiteralExpressionSyntax: \"Value\"|VariableDeclaratorSyntax: value = \"Value\"}"]
2 -> 3
3 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.ForInfinite" {
label = "Roslyn.ForInfinite"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# LocalReferenceOperation / VariableDeclaratorSyntax: value = \"Value\"|1# LiteralOperation / LiteralExpressionSyntax: \"Value\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: value = \"Value\"|##########}"]
R0 -> R1
R2 [shape=record label="{EXIT #R2}"]
R1 -> R2
}
}
