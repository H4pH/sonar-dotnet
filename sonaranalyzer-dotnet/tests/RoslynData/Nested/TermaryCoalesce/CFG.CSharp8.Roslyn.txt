digraph "Roslyn.TermaryCoalesce" {
0 [shape=record label="{ENTRY #0}"]
1 [shape=record label="{BLOCK #1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: condition|##########}"]
0 -> 1
2 [shape=record label="{BLOCK #2|1# ParameterReferenceOperation / IdentifierNameSyntax: first|0# FlowCaptureOperation / IdentifierNameSyntax: first|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: first|0# IsNullOperation / IdentifierNameSyntax: first|##########}"]
1 -> 2 [label="Else"]
3 [shape=record label="{BLOCK #3|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: first|0# FlowCaptureOperation / IdentifierNameSyntax: first|##########}"]
2 -> 3 [label="Else"]
4 [shape=record label="{BLOCK #4|1# ParameterReferenceOperation / IdentifierNameSyntax: second|0# FlowCaptureOperation / IdentifierNameSyntax: second|##########}"]
2 -> 4 [label="WhenTrue"]
5 [shape=record label="{BLOCK #5|1# ParameterReferenceOperation / IdentifierNameSyntax: ternaryFalse|0# FlowCaptureOperation / IdentifierNameSyntax: ternaryFalse|##########}"]
1 -> 5 [label="WhenFalse"]
6 [shape=record label="{BLOCK #6|1# LocalReferenceOperation / VariableDeclaratorSyntax: x = condition ? (first ?? second) : ternaryFalse|1# FlowCaptureReferenceOperation / ConditionalExpressionSyntax: condition ? (first ?? second) : ternaryFalse|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: x = condition ? (first ?? second) : ternaryFalse|##########}"]
3 -> 6
4 -> 6
5 -> 6
7 [shape=record label="{EXIT #7}"]
6 -> 7
}
