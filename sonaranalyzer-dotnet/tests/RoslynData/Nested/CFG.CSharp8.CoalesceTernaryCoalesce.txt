// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22CoalesceTernaryCoalesce%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.CoalesceTernaryCoalesce%22%20%7B%0Alabel%20%3D%20%22Sonar.CoalesceTernaryCoalesce%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACoalesceExpression%7CIdentifierNameSyntax%3A%20first%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A%20condition%7D%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%204%20%5Blabel%3D%22False%22%5D%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20ternaryTrue%7D%22%5D%0D%0A3%20-%3E%205%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20ternaryFalse%7D%22%5D%0D%0A4%20-%3E%205%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACoalesceExpression%7D%22%5D%0D%0A5%20-%3E%206%20%5Blabel%3D%22True%22%5D%0D%0A5%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20last%7D%22%5D%0D%0A6%20-%3E%202%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CVariableDeclaratorSyntax%3A%20x%20%3D%20first%20%3F%3F%20(condition%20%3F%20ternaryTrue%20%3A%20ternaryFalse)%20%3F%3F%20last%7D%22%5D%0D%0A2%20-%3E%207%0D%0A7%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.CoalesceTernaryCoalesce%22%20%7B%0Alabel%20%3D%20%22Roslyn.CoalesceTernaryCoalesce%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C0%23%20IsNullOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20first%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%20%5Blabel%3D%22Else%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20condition%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R3%20%5Blabel%3D%22WhenTrue%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ternaryTrue%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20ternaryTrue%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3%20-%3E%20R4%20%5Blabel%3D%22Else%22%5D%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R5%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ternaryFalse%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20ternaryFalse%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3%20-%3E%20R5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R6%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20ConditionalExpressionSyntax%3A%20condition%20%3F%20ternaryTrue%20%3A%20ternaryFalse%7C0%23%20IsNullOperation%20%2F%20ConditionalExpressionSyntax%3A%20condition%20%3F%20ternaryTrue%20%3A%20ternaryFalse%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20-%3E%20R6%0D%0AR5%20-%3E%20R6%0D%0AR7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R7%7C1%23%20FlowCaptureReferenceOperation%20%2F%20ConditionalExpressionSyntax%3A%20condition%20%3F%20ternaryTrue%20%3A%20ternaryFalse%7C0%23%20FlowCaptureOperation%20%2F%20ConditionalExpressionSyntax%3A%20condition%20%3F%20ternaryTrue%20%3A%20ternaryFalse%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR6%20-%3E%20R7%20%5Blabel%3D%22Else%22%5D%0D%0AR8%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R8%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20last%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20last%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR6%20-%3E%20R8%20%5Blabel%3D%22WhenTrue%22%5D%0D%0AR9%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R9%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20x%20%3D%20first%20%3F%3F%20(condition%20%3F%20ternaryTrue%20%3A%20ternaryFalse)%20%3F%3F%20last%7C1%23%20FlowCaptureReferenceOperation%20%2F%20BinaryExpressionSyntax%3A%20first%20%3F%3F%20(condition%20%3F%20ternaryTrue%20%3A%20ternaryFalse)%20%3F%3F%20last%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20x%20%3D%20first%20%3F%3F%20(condition%20%3F%20ternaryTrue%20%3A%20ternaryFalse)%20%3F%3F%20last%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R9%0D%0AR7%20-%3E%20R9%0D%0AR8%20-%3E%20R9%0D%0AR10%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R10%7D%22%5D%0D%0AR9%20-%3E%20R10%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void CoalesceTernaryCoalesce(bool condition, string first, string ternaryTrue, string ternaryFalse, string last)
    {
        var x = first ?? (condition ? ternaryTrue : ternaryFalse) ?? last;
    }
*/

digraph "CoalesceTernaryCoalesce" {
subgraph "cluster_Sonar.CoalesceTernaryCoalesce" {
label = "Sonar.CoalesceTernaryCoalesce"
0 [shape=record label="{BINARY:CoalesceExpression|IdentifierNameSyntax: first}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: condition}"]
1 -> 3 [label="True"]
1 -> 4 [label="False"]
3 [shape=record label="{SIMPLE|IdentifierNameSyntax: ternaryTrue}"]
3 -> 5
4 [shape=record label="{SIMPLE|IdentifierNameSyntax: ternaryFalse}"]
4 -> 5
5 [shape=record label="{BINARY:CoalesceExpression}"]
5 -> 6 [label="True"]
5 -> 2 [label="False"]
6 [shape=record label="{SIMPLE|IdentifierNameSyntax: last}"]
6 -> 2
2 [shape=record label="{SIMPLE|VariableDeclaratorSyntax: x = first ?? (condition ? ternaryTrue : ternaryFalse) ?? last}"]
2 -> 7
7 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.CoalesceTernaryCoalesce" {
label = "Roslyn.CoalesceTernaryCoalesce"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# ParameterReferenceOperation / IdentifierNameSyntax: first|0# FlowCaptureOperation / IdentifierNameSyntax: first|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: first|0# IsNullOperation / IdentifierNameSyntax: first|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: first|0# FlowCaptureOperation / IdentifierNameSyntax: first|##########}"]
R1 -> R2 [label="Else"]
R3 [shape=record label="{BLOCK #R3|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: condition|##########}"]
R1 -> R3 [label="WhenTrue"]
R4 [shape=record label="{BLOCK #R4|1# ParameterReferenceOperation / IdentifierNameSyntax: ternaryTrue|0# FlowCaptureOperation / IdentifierNameSyntax: ternaryTrue|##########}"]
R3 -> R4 [label="Else"]
R5 [shape=record label="{BLOCK #R5|1# ParameterReferenceOperation / IdentifierNameSyntax: ternaryFalse|0# FlowCaptureOperation / IdentifierNameSyntax: ternaryFalse|##########}"]
R3 -> R5 [label="WhenFalse"]
R6 [shape=record label="{BLOCK #R6|## BranchValue ##|1# FlowCaptureReferenceOperation / ConditionalExpressionSyntax: condition ? ternaryTrue : ternaryFalse|0# IsNullOperation / ConditionalExpressionSyntax: condition ? ternaryTrue : ternaryFalse|##########}"]
R4 -> R6
R5 -> R6
R7 [shape=record label="{BLOCK #R7|1# FlowCaptureReferenceOperation / ConditionalExpressionSyntax: condition ? ternaryTrue : ternaryFalse|0# FlowCaptureOperation / ConditionalExpressionSyntax: condition ? ternaryTrue : ternaryFalse|##########}"]
R6 -> R7 [label="Else"]
R8 [shape=record label="{BLOCK #R8|1# ParameterReferenceOperation / IdentifierNameSyntax: last|0# FlowCaptureOperation / IdentifierNameSyntax: last|##########}"]
R6 -> R8 [label="WhenTrue"]
R9 [shape=record label="{BLOCK #R9|1# LocalReferenceOperation / VariableDeclaratorSyntax: x = first ?? (condition ? ternaryTrue : ternaryFalse) ?? last|1# FlowCaptureReferenceOperation / BinaryExpressionSyntax: first ?? (condition ? ternaryTrue : ternaryFalse) ?? last|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: x = first ?? (condition ? ternaryTrue : ternaryFalse) ?? last|##########}"]
R2 -> R9
R7 -> R9
R8 -> R9
R10 [shape=record label="{EXIT #R10}"]
R9 -> R10
}
}
