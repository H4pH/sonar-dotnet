// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22ConditionalAccessChained%22+%7B%0D%0Asubgraph+%22cluster_Sonar.ConditionalAccessChained%22+%7B%0Alabel+%3D+%22Sonar.ConditionalAccessChained%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AConditionalAccessExpression%7CIdentifierNameSyntax%3A+o%7D%22%5D%0D%0A0+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A0+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AConditionalAccessExpression%7CIdentifierNameSyntax%3A+ToString%7CMemberBindingExpressionSyntax%3A+.ToString%7CInvocationExpressionSyntax%3A+.ToString()%7D%22%5D%0D%0A2+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A2+-%3E+3+%5Blabel%3D%22False%22%5D%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AConditionalAccessExpression%7CIdentifierNameSyntax%3A+Substring%7CMemberBindingExpressionSyntax%3A+.Substring%7CLiteralExpressionSyntax%3A+0%7CLiteralExpressionSyntax%3A+1%7CInvocationExpressionSyntax%3A+.Substring(0%2C+1)%7D%22%5D%0D%0A3+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A3+-%3E+4+%5Blabel%3D%22False%22%5D%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A+Length%7CMemberBindingExpressionSyntax%3A+.Length%7D%22%5D%0D%0A4+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CVariableDeclaratorSyntax%3A+ret+%3D+o%3F.ToString()%3F.Substring(0%2C+1)%3F.Length%7D%22%5D%0D%0A1+-%3E+5%0D%0A5+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.ConditionalAccessChained%22+%7B%0Alabel+%3D+%22Roslyn.ConditionalAccessChained%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+o%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+o%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+o%7C0%23+IsNullOperation+%2F+IdentifierNameSyntax%3A+o%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root2%7C2%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+o%7C1%23+InvocationOperation.ToString+%2F+InvocationExpressionSyntax%3A+.ToString()%7C0%23+FlowCaptureOperation+%2F+InvocationExpressionSyntax%3A+.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root2+%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root3%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+InvocationExpressionSyntax%3A+.ToString()%7C0%23+IsNullOperation+%2F+InvocationExpressionSyntax%3A+.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2+-%3E+Root3%0D%0ARoot4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root4%7C2%23+FlowCaptureReferenceOperation+%2F+InvocationExpressionSyntax%3A+.ToString()%7C3%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+0%7C3%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+1%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+1%7C1%23+InvocationOperation.Substring+%2F+InvocationExpressionSyntax%3A+.Substring(0%2C+1)%7C0%23+FlowCaptureOperation+%2F+InvocationExpressionSyntax%3A+.Substring(0%2C+1)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3+-%3E+Root4+%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root5%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+InvocationExpressionSyntax%3A+.Substring(0%2C+1)%7C0%23+IsNullOperation+%2F+InvocationExpressionSyntax%3A+.Substring(0%2C+1)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4+-%3E+Root5%0D%0ARoot6+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root6%7C3%23+FlowCaptureReferenceOperation+%2F+InvocationExpressionSyntax%3A+.Substring(0%2C+1)%7C2%23+PropertyReferenceOperation+%2F+MemberBindingExpressionSyntax%3A+.Length%7C1%23+ConversionOperation+%2F+MemberBindingExpressionSyntax%3A+.Length%7C0%23+FlowCaptureOperation+%2F+MemberBindingExpressionSyntax%3A+.Length%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5+-%3E+Root6+%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot7+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root7%7C1%23+DefaultValueOperation+%2F+ConditionalAccessExpressionSyntax%3A+o%3F.ToString()%3F.Substring(0%2C+1)%3F.Length%7C0%23+FlowCaptureOperation+%2F+ConditionalAccessExpressionSyntax%3A+o%3F.ToString()%3F.Substring(0%2C+1)%3F.Length%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root7+%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot3+-%3E+Root7+%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot5+-%3E+Root7+%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot8+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root8%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+ret+%3D+o%3F.ToString()%3F.Substring(0%2C+1)%3F.Length%7C1%23+FlowCaptureReferenceOperation+%2F+ConditionalAccessExpressionSyntax%3A+o%3F.ToString()%3F.Substring(0%2C+1)%3F.Length%7C0%23+SimpleAssignmentOperation+%2F+VariableDeclaratorSyntax%3A+ret+%3D+o%3F.ToString()%3F.Substring(0%2C+1)%3F.Length%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot6+-%3E+Root8%0D%0ARoot7+-%3E+Root8%0D%0A%7D%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot9+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root9%7D%22%5D%0D%0ARoot8+-%3E+Root9%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void ConditionalAccessChained(object o)
    {
        var ret = o?.ToString()?.Substring(0, 1)?.Length;
    }
*/

digraph "ConditionalAccessChained" {
subgraph "cluster_Sonar.ConditionalAccessChained" {
label = "Sonar.ConditionalAccessChained"
0 [shape=record label="{BINARY:ConditionalAccessExpression|IdentifierNameSyntax: o}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
2 [shape=record label="{BINARY:ConditionalAccessExpression|IdentifierNameSyntax: ToString|MemberBindingExpressionSyntax: .ToString|InvocationExpressionSyntax: .ToString()}"]
2 -> 1 [label="True"]
2 -> 3 [label="False"]
3 [shape=record label="{BINARY:ConditionalAccessExpression|IdentifierNameSyntax: Substring|MemberBindingExpressionSyntax: .Substring|LiteralExpressionSyntax: 0|LiteralExpressionSyntax: 1|InvocationExpressionSyntax: .Substring(0, 1)}"]
3 -> 1 [label="True"]
3 -> 4 [label="False"]
4 [shape=record label="{SIMPLE|IdentifierNameSyntax: Length|MemberBindingExpressionSyntax: .Length}"]
4 -> 1
1 [shape=record label="{SIMPLE|VariableDeclaratorSyntax: ret = o?.ToString()?.Substring(0, 1)?.Length}"]
1 -> 5
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.ConditionalAccessChained" {
label = "Roslyn.ConditionalAccessChained"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|1# ParameterReferenceOperation / IdentifierNameSyntax: o|0# FlowCaptureOperation / IdentifierNameSyntax: o|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|0# IsNullOperation / IdentifierNameSyntax: o|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|2# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|1# InvocationOperation.ToString / InvocationExpressionSyntax: .ToString()|0# FlowCaptureOperation / InvocationExpressionSyntax: .ToString()|##########}"]
Root1 -> Root2 [label="Else"]
}
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|1# FlowCaptureReferenceOperation / InvocationExpressionSyntax: .ToString()|0# IsNullOperation / InvocationExpressionSyntax: .ToString()|##########}"]
Root2 -> Root3
Root4 [shape=record label="{BLOCK #Root4|2# FlowCaptureReferenceOperation / InvocationExpressionSyntax: .ToString()|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ArgumentOperation / ArgumentSyntax: 0|3# LiteralOperation / LiteralExpressionSyntax: 1|2# ArgumentOperation / ArgumentSyntax: 1|1# InvocationOperation.Substring / InvocationExpressionSyntax: .Substring(0, 1)|0# FlowCaptureOperation / InvocationExpressionSyntax: .Substring(0, 1)|##########}"]
Root3 -> Root4 [label="Else"]
}
Root5 [shape=record label="{BLOCK #Root5|## BranchValue ##|1# FlowCaptureReferenceOperation / InvocationExpressionSyntax: .Substring(0, 1)|0# IsNullOperation / InvocationExpressionSyntax: .Substring(0, 1)|##########}"]
Root4 -> Root5
Root6 [shape=record label="{BLOCK #Root6|3# FlowCaptureReferenceOperation / InvocationExpressionSyntax: .Substring(0, 1)|2# PropertyReferenceOperation / MemberBindingExpressionSyntax: .Length|1# ConversionOperation / MemberBindingExpressionSyntax: .Length|0# FlowCaptureOperation / MemberBindingExpressionSyntax: .Length|##########}"]
Root5 -> Root6 [label="Else"]
}
Root7 [shape=record label="{BLOCK #Root7|1# DefaultValueOperation / ConditionalAccessExpressionSyntax: o?.ToString()?.Substring(0, 1)?.Length|0# FlowCaptureOperation / ConditionalAccessExpressionSyntax: o?.ToString()?.Substring(0, 1)?.Length|##########}"]
Root1 -> Root7 [label="WhenTrue"]
Root3 -> Root7 [label="WhenTrue"]
Root5 -> Root7 [label="WhenTrue"]
Root8 [shape=record label="{BLOCK #Root8|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = o?.ToString()?.Substring(0, 1)?.Length|1# FlowCaptureReferenceOperation / ConditionalAccessExpressionSyntax: o?.ToString()?.Substring(0, 1)?.Length|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = o?.ToString()?.Substring(0, 1)?.Length|##########}"]
Root6 -> Root8
Root7 -> Root8
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root9 [shape=record label="{EXIT #Root9}"]
Root8 -> Root9
}
}
