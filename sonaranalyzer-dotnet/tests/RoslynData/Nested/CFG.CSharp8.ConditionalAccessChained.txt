// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22ConditionalAccessChained%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.ConditionalAccessChained%22%20%7B%0Alabel%20%3D%20%22Sonar.ConditionalAccessChained%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AConditionalAccessExpression%7CIdentifierNameSyntax%3A%20o%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AConditionalAccessExpression%7CIdentifierNameSyntax%3A%20ToString%7CMemberBindingExpressionSyntax%3A%20.ToString%7CInvocationExpressionSyntax%3A%20.ToString()%7D%22%5D%0D%0A2%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A2%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AConditionalAccessExpression%7CIdentifierNameSyntax%3A%20Substring%7CMemberBindingExpressionSyntax%3A%20.Substring%7CLiteralExpressionSyntax%3A%200%7CLiteralExpressionSyntax%3A%201%7CInvocationExpressionSyntax%3A%20.Substring(0%2C%201)%7D%22%5D%0D%0A3%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A3%20-%3E%204%20%5Blabel%3D%22False%22%5D%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20Length%7CMemberBindingExpressionSyntax%3A%20.Length%7D%22%5D%0D%0A4%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CVariableDeclaratorSyntax%3A%20ret%20%3D%20o%3F.ToString()%3F.Substring(0%2C%201)%3F.Length%7D%22%5D%0D%0A1%20-%3E%205%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.ConditionalAccessChained%22%20%7B%0Alabel%20%3D%20%22Roslyn.ConditionalAccessChained%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C0%23%20IsNullOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C2%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C1%23%20InvocationOperation.ToString%20%2F%20InvocationExpressionSyntax%3A%20.ToString()%7C0%23%20FlowCaptureOperation%20%2F%20InvocationExpressionSyntax%3A%20.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20InvocationExpressionSyntax%3A%20.ToString()%7C0%23%20IsNullOperation%20%2F%20InvocationExpressionSyntax%3A%20.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root3%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C2%23%20FlowCaptureReferenceOperation%20%2F%20InvocationExpressionSyntax%3A%20.ToString()%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%200%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%201%7C1%23%20InvocationOperation.Substring%20%2F%20InvocationExpressionSyntax%3A%20.Substring(0%2C%201)%7C0%23%20FlowCaptureOperation%20%2F%20InvocationExpressionSyntax%3A%20.Substring(0%2C%201)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3%20-%3E%20Root4%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root5%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20InvocationExpressionSyntax%3A%20.Substring(0%2C%201)%7C0%23%20IsNullOperation%20%2F%20InvocationExpressionSyntax%3A%20.Substring(0%2C%201)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4%20-%3E%20Root5%0D%0ARoot6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root6%7C3%23%20FlowCaptureReferenceOperation%20%2F%20InvocationExpressionSyntax%3A%20.Substring(0%2C%201)%7C2%23%20PropertyReferenceOperation%20%2F%20MemberBindingExpressionSyntax%3A%20.Length%7C1%23%20ConversionOperation%20%2F%20MemberBindingExpressionSyntax%3A%20.Length%7C0%23%20FlowCaptureOperation%20%2F%20MemberBindingExpressionSyntax%3A%20.Length%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5%20-%3E%20Root6%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root7%7C1%23%20DefaultValueOperation%20%2F%20ConditionalAccessExpressionSyntax%3A%20o%3F.ToString()%3F.Substring(0%2C%201)%3F.Length%7C0%23%20FlowCaptureOperation%20%2F%20ConditionalAccessExpressionSyntax%3A%20o%3F.ToString()%3F.Substring(0%2C%201)%3F.Length%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root7%20%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot3%20-%3E%20Root7%20%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot5%20-%3E%20Root7%20%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot8%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root8%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20o%3F.ToString()%3F.Substring(0%2C%201)%3F.Length%7C1%23%20FlowCaptureReferenceOperation%20%2F%20ConditionalAccessExpressionSyntax%3A%20o%3F.ToString()%3F.Substring(0%2C%201)%3F.Length%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20o%3F.ToString()%3F.Substring(0%2C%201)%3F.Length%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot6%20-%3E%20Root8%0D%0ARoot7%20-%3E%20Root8%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot9%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root9%7D%22%5D%0D%0ARoot8%20-%3E%20Root9%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void ConditionalAccessChained(object o)
    {
        var ret = o?.ToString()?.Substring(0, 1)?.Length;
    }
*/

digraph "ConditionalAccessChained" {
subgraph "cluster_Sonar.ConditionalAccessChained" {
label = "Sonar.ConditionalAccessChained"
0 [shape=record label="{BINARY:ConditionalAccessExpression|IdentifierNameSyntax: o}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
2 [shape=record label="{BINARY:ConditionalAccessExpression|IdentifierNameSyntax: ToString|MemberBindingExpressionSyntax: .ToString|InvocationExpressionSyntax: .ToString()}"]
2 -> 1 [label="True"]
2 -> 3 [label="False"]
3 [shape=record label="{BINARY:ConditionalAccessExpression|IdentifierNameSyntax: Substring|MemberBindingExpressionSyntax: .Substring|LiteralExpressionSyntax: 0|LiteralExpressionSyntax: 1|InvocationExpressionSyntax: .Substring(0, 1)}"]
3 -> 1 [label="True"]
3 -> 4 [label="False"]
4 [shape=record label="{SIMPLE|IdentifierNameSyntax: Length|MemberBindingExpressionSyntax: .Length}"]
4 -> 1
1 [shape=record label="{SIMPLE|VariableDeclaratorSyntax: ret = o?.ToString()?.Substring(0, 1)?.Length}"]
1 -> 5
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.ConditionalAccessChained" {
label = "Roslyn.ConditionalAccessChained"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|1# ParameterReferenceOperation / IdentifierNameSyntax: o|0# FlowCaptureOperation / IdentifierNameSyntax: o|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|0# IsNullOperation / IdentifierNameSyntax: o|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|2# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|1# InvocationOperation.ToString / InvocationExpressionSyntax: .ToString()|0# FlowCaptureOperation / InvocationExpressionSyntax: .ToString()|##########}"]
Root1 -> Root2 [label="Else"]
}
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|1# FlowCaptureReferenceOperation / InvocationExpressionSyntax: .ToString()|0# IsNullOperation / InvocationExpressionSyntax: .ToString()|##########}"]
Root2 -> Root3
Root4 [shape=record label="{BLOCK #Root4|2# FlowCaptureReferenceOperation / InvocationExpressionSyntax: .ToString()|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ArgumentOperation / ArgumentSyntax: 0|3# LiteralOperation / LiteralExpressionSyntax: 1|2# ArgumentOperation / ArgumentSyntax: 1|1# InvocationOperation.Substring / InvocationExpressionSyntax: .Substring(0, 1)|0# FlowCaptureOperation / InvocationExpressionSyntax: .Substring(0, 1)|##########}"]
Root3 -> Root4 [label="Else"]
}
Root5 [shape=record label="{BLOCK #Root5|## BranchValue ##|1# FlowCaptureReferenceOperation / InvocationExpressionSyntax: .Substring(0, 1)|0# IsNullOperation / InvocationExpressionSyntax: .Substring(0, 1)|##########}"]
Root4 -> Root5
Root6 [shape=record label="{BLOCK #Root6|3# FlowCaptureReferenceOperation / InvocationExpressionSyntax: .Substring(0, 1)|2# PropertyReferenceOperation / MemberBindingExpressionSyntax: .Length|1# ConversionOperation / MemberBindingExpressionSyntax: .Length|0# FlowCaptureOperation / MemberBindingExpressionSyntax: .Length|##########}"]
Root5 -> Root6 [label="Else"]
}
Root7 [shape=record label="{BLOCK #Root7|1# DefaultValueOperation / ConditionalAccessExpressionSyntax: o?.ToString()?.Substring(0, 1)?.Length|0# FlowCaptureOperation / ConditionalAccessExpressionSyntax: o?.ToString()?.Substring(0, 1)?.Length|##########}"]
Root1 -> Root7 [label="WhenTrue"]
Root3 -> Root7 [label="WhenTrue"]
Root5 -> Root7 [label="WhenTrue"]
Root8 [shape=record label="{BLOCK #Root8|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = o?.ToString()?.Substring(0, 1)?.Length|1# FlowCaptureReferenceOperation / ConditionalAccessExpressionSyntax: o?.ToString()?.Substring(0, 1)?.Length|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = o?.ToString()?.Substring(0, 1)?.Length|##########}"]
Root6 -> Root8
Root7 -> Root8
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root9 [shape=record label="{EXIT #Root9}"]
Root8 -> Root9
}
}
