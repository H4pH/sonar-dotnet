// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22ConditionalAccessCoalesce%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.ConditionalAccessCoalesce%22%20%7B%0Alabel%20%3D%20%22Sonar.ConditionalAccessCoalesce%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AConditionalAccessExpression%7CIdentifierNameSyntax%3A%20o%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20ToString%7CMemberBindingExpressionSyntax%3A%20.ToString%7CInvocationExpressionSyntax%3A%20.ToString()%7D%22%5D%0D%0A2%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACoalesceExpression%7D%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%204%20%5Blabel%3D%22False%22%5D%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22N%2FA%5C%22%7D%22%5D%0D%0A3%20-%3E%204%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CVariableDeclaratorSyntax%3A%20ret%20%3D%20o%3F.ToString()%20%3F%3F%20%5C%22N%2FA%5C%22%7D%22%5D%0D%0A4%20-%3E%205%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.ConditionalAccessCoalesce%22%20%7B%0Alabel%20%3D%20%22Roslyn.ConditionalAccessCoalesce%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C0%23%20IsNullOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C2%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20.ToString()%7C0%23%20FlowCaptureOperation%20%2F%20InvocationExpressionSyntax%3A%20.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%20%5Blabel%3D%22Else%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C1%23%20DefaultValueOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20o%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R3%20%5Blabel%3D%22WhenTrue%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20ConditionalAccessExpressionSyntax%3A%20o%3F.ToString()%7C0%23%20IsNullOperation%20%2F%20ConditionalAccessExpressionSyntax%3A%20o%3F.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R4%0D%0AR3%20-%3E%20R4%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R5%7C1%23%20FlowCaptureReferenceOperation%20%2F%20ConditionalAccessExpressionSyntax%3A%20o%3F.ToString()%7C0%23%20FlowCaptureOperation%20%2F%20ConditionalAccessExpressionSyntax%3A%20o%3F.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20-%3E%20R5%20%5Blabel%3D%22Else%22%5D%0D%0AR6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R6%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22N%2FA%5C%22%7C0%23%20FlowCaptureOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22N%2FA%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20-%3E%20R6%20%5Blabel%3D%22WhenTrue%22%5D%0D%0AR7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R7%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20o%3F.ToString()%20%3F%3F%20%5C%22N%2FA%5C%22%7C1%23%20FlowCaptureReferenceOperation%20%2F%20BinaryExpressionSyntax%3A%20o%3F.ToString()%20%3F%3F%20%5C%22N%2FA%5C%22%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20o%3F.ToString()%20%3F%3F%20%5C%22N%2FA%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5%20-%3E%20R7%0D%0AR6%20-%3E%20R7%0D%0AR8%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R8%7D%22%5D%0D%0AR7%20-%3E%20R8%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void ConditionalAccessCoalesce(object o)
    {
        var ret = o?.ToString() ?? "N/A";
    }
*/

digraph "ConditionalAccessCoalesce" {
subgraph "cluster_Sonar.ConditionalAccessCoalesce" {
label = "Sonar.ConditionalAccessCoalesce"
0 [shape=record label="{BINARY:ConditionalAccessExpression|IdentifierNameSyntax: o}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
2 [shape=record label="{SIMPLE|IdentifierNameSyntax: ToString|MemberBindingExpressionSyntax: .ToString|InvocationExpressionSyntax: .ToString()}"]
2 -> 1
1 [shape=record label="{BINARY:CoalesceExpression}"]
1 -> 3 [label="True"]
1 -> 4 [label="False"]
3 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"N/A\"}"]
3 -> 4
4 [shape=record label="{SIMPLE|VariableDeclaratorSyntax: ret = o?.ToString() ?? \"N/A\"}"]
4 -> 5
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.ConditionalAccessCoalesce" {
label = "Roslyn.ConditionalAccessCoalesce"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# ParameterReferenceOperation / IdentifierNameSyntax: o|0# FlowCaptureOperation / IdentifierNameSyntax: o|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|0# IsNullOperation / IdentifierNameSyntax: o|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|2# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|1# InvocationOperation / InvocationExpressionSyntax: .ToString()|0# FlowCaptureOperation / InvocationExpressionSyntax: .ToString()|##########}"]
R1 -> R2 [label="Else"]
R3 [shape=record label="{BLOCK #R3|1# DefaultValueOperation / IdentifierNameSyntax: o|0# FlowCaptureOperation / IdentifierNameSyntax: o|##########}"]
R1 -> R3 [label="WhenTrue"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|1# FlowCaptureReferenceOperation / ConditionalAccessExpressionSyntax: o?.ToString()|0# IsNullOperation / ConditionalAccessExpressionSyntax: o?.ToString()|##########}"]
R2 -> R4
R3 -> R4
R5 [shape=record label="{BLOCK #R5|1# FlowCaptureReferenceOperation / ConditionalAccessExpressionSyntax: o?.ToString()|0# FlowCaptureOperation / ConditionalAccessExpressionSyntax: o?.ToString()|##########}"]
R4 -> R5 [label="Else"]
R6 [shape=record label="{BLOCK #R6|1# LiteralOperation / LiteralExpressionSyntax: \"N/A\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"N/A\"|##########}"]
R4 -> R6 [label="WhenTrue"]
R7 [shape=record label="{BLOCK #R7|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = o?.ToString() ?? \"N/A\"|1# FlowCaptureReferenceOperation / BinaryExpressionSyntax: o?.ToString() ?? \"N/A\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = o?.ToString() ?? \"N/A\"|##########}"]
R5 -> R7
R6 -> R7
R8 [shape=record label="{EXIT #R8}"]
R7 -> R8
}
}
