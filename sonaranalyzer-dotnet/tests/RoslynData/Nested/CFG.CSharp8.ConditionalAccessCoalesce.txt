// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22ConditionalAccessCoalesce%22+%7B%0D%0Asubgraph+%22cluster_Sonar.ConditionalAccessCoalesce%22+%7B%0Alabel+%3D+%22Sonar.ConditionalAccessCoalesce%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AConditionalAccessExpression%7CIdentifierNameSyntax%3A+o%7D%22%5D%0D%0A0+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A0+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A+ToString%7CMemberBindingExpressionSyntax%3A+.ToString%7CInvocationExpressionSyntax%3A+.ToString()%7D%22%5D%0D%0A2+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACoalesceExpression%7D%22%5D%0D%0A1+-%3E+3+%5Blabel%3D%22True%22%5D%0D%0A1+-%3E+4+%5Blabel%3D%22False%22%5D%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A+%5C%22N%2FA%5C%22%7D%22%5D%0D%0A3+-%3E+4%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CVariableDeclaratorSyntax%3A+ret+%3D+o%3F.ToString()+%3F%3F+%5C%22N%2FA%5C%22%7D%22%5D%0D%0A4+-%3E+5%0D%0A5+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.ConditionalAccessCoalesce%22+%7B%0Alabel+%3D+%22Roslyn.ConditionalAccessCoalesce%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0AR1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R1%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+o%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+o%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+o%7C0%23+IsNullOperation+%2F+IdentifierNameSyntax%3A+o%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0+-%3E+R1%0D%0AR2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R2%7C2%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+o%7C1%23+InvocationOperation+%2F+InvocationExpressionSyntax%3A+.ToString()%7C0%23+FlowCaptureOperation+%2F+InvocationExpressionSyntax%3A+.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1+-%3E+R2+%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0AR3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R3%7C1%23+DefaultValueOperation+%2F+IdentifierNameSyntax%3A+o%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+o%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1+-%3E+R3+%5Blabel%3D%22WhenTrue%22%5D%0D%0AR4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R4%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+ConditionalAccessExpressionSyntax%3A+o%3F.ToString()%7C0%23+IsNullOperation+%2F+ConditionalAccessExpressionSyntax%3A+o%3F.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2+-%3E+R4%0D%0AR3+-%3E+R4%0D%0AR5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R5%7C1%23+FlowCaptureReferenceOperation+%2F+ConditionalAccessExpressionSyntax%3A+o%3F.ToString()%7C0%23+FlowCaptureOperation+%2F+ConditionalAccessExpressionSyntax%3A+o%3F.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4+-%3E+R5+%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0AR6+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R6%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22N%2FA%5C%22%7C0%23+FlowCaptureOperation+%2F+LiteralExpressionSyntax%3A+%5C%22N%2FA%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4+-%3E+R6+%5Blabel%3D%22WhenTrue%22%5D%0D%0AR7+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R7%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+ret+%3D+o%3F.ToString()+%3F%3F+%5C%22N%2FA%5C%22%7C1%23+FlowCaptureReferenceOperation+%2F+BinaryExpressionSyntax%3A+o%3F.ToString()+%3F%3F+%5C%22N%2FA%5C%22%7C0%23+SimpleAssignmentOperation+%2F+VariableDeclaratorSyntax%3A+ret+%3D+o%3F.ToString()+%3F%3F+%5C%22N%2FA%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5+-%3E+R7%0D%0AR6+-%3E+R7%0D%0A%7D%0D%0AR0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23R0%7D%22%5D%0D%0AR8+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23R8%7D%22%5D%0D%0AR7+-%3E+R8%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void ConditionalAccessCoalesce(object o)
    {
        var ret = o?.ToString() ?? "N/A";
    }
*/

digraph "ConditionalAccessCoalesce" {
subgraph "cluster_Sonar.ConditionalAccessCoalesce" {
label = "Sonar.ConditionalAccessCoalesce"
0 [shape=record label="{BINARY:ConditionalAccessExpression|IdentifierNameSyntax: o}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
2 [shape=record label="{SIMPLE|IdentifierNameSyntax: ToString|MemberBindingExpressionSyntax: .ToString|InvocationExpressionSyntax: .ToString()}"]
2 -> 1
1 [shape=record label="{BINARY:CoalesceExpression}"]
1 -> 3 [label="True"]
1 -> 4 [label="False"]
3 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"N/A\"}"]
3 -> 4
4 [shape=record label="{SIMPLE|VariableDeclaratorSyntax: ret = o?.ToString() ?? \"N/A\"}"]
4 -> 5
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.ConditionalAccessCoalesce" {
label = "Roslyn.ConditionalAccessCoalesce"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
R1 [shape=record label="{BLOCK #R1|1# ParameterReferenceOperation / IdentifierNameSyntax: o|0# FlowCaptureOperation / IdentifierNameSyntax: o|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|0# IsNullOperation / IdentifierNameSyntax: o|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|2# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|1# InvocationOperation / InvocationExpressionSyntax: .ToString()|0# FlowCaptureOperation / InvocationExpressionSyntax: .ToString()|##########}"]
R1 -> R2 [label="Else"]
}
R3 [shape=record label="{BLOCK #R3|1# DefaultValueOperation / IdentifierNameSyntax: o|0# FlowCaptureOperation / IdentifierNameSyntax: o|##########}"]
R1 -> R3 [label="WhenTrue"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|1# FlowCaptureReferenceOperation / ConditionalAccessExpressionSyntax: o?.ToString()|0# IsNullOperation / ConditionalAccessExpressionSyntax: o?.ToString()|##########}"]
R2 -> R4
R3 -> R4
R5 [shape=record label="{BLOCK #R5|1# FlowCaptureReferenceOperation / ConditionalAccessExpressionSyntax: o?.ToString()|0# FlowCaptureOperation / ConditionalAccessExpressionSyntax: o?.ToString()|##########}"]
R4 -> R5 [label="Else"]
}
R6 [shape=record label="{BLOCK #R6|1# LiteralOperation / LiteralExpressionSyntax: \"N/A\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"N/A\"|##########}"]
R4 -> R6 [label="WhenTrue"]
R7 [shape=record label="{BLOCK #R7|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = o?.ToString() ?? \"N/A\"|1# FlowCaptureReferenceOperation / BinaryExpressionSyntax: o?.ToString() ?? \"N/A\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = o?.ToString() ?? \"N/A\"|##########}"]
R5 -> R7
R6 -> R7
}
R0 [shape=record label="{ENTRY #R0}"]
R8 [shape=record label="{EXIT #R8}"]
R7 -> R8
}
}
