// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22InvocationArgument%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.InvocationArgument%22%20%7B%0Alabel%20%3D%20%22Sonar.InvocationArgument%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A%20Console%7CMemberAccessExpressionSyntax%3A%20Console.WriteLine%7CIdentifierNameSyntax%3A%20condition%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20a%7CMemberAccessExpressionSyntax%3A%20a.ToString%7CInvocationExpressionSyntax%3A%20a.ToString()%7D%22%5D%0D%0A1%20-%3E%203%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22Default%5C%22%7D%22%5D%0D%0A2%20-%3E%203%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CInvocationExpressionSyntax%3A%20Console.WriteLine(condition%20%3F%20a.ToString()%20%3A%20%5C%22Default%5C%22)%7D%22%5D%0D%0A3%20-%3E%204%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.InvocationArgument%22%20%7B%0Alabel%20%3D%20%22Roslyn.InvocationArgument%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20condition%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C2%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20a.ToString()%7C0%23%20FlowCaptureOperation%20%2F%20InvocationExpressionSyntax%3A%20a.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%20%5Blabel%3D%22Else%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Default%5C%22%7C0%23%20FlowCaptureOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Default%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R3%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C3%23%20FlowCaptureReferenceOperation%20%2F%20ConditionalExpressionSyntax%3A%20condition%20%3F%20a.ToString()%20%3A%20%5C%22Default%5C%22%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20condition%20%3F%20a.ToString()%20%3A%20%5C%22Default%5C%22%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20Console.WriteLine(condition%20%3F%20a.ToString()%20%3A%20%5C%22Default%5C%22)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20Console.WriteLine(condition%20%3F%20a.ToString()%20%3A%20%5C%22Default%5C%22)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R4%0D%0AR3%20-%3E%20R4%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R5%7D%22%5D%0D%0AR4%20-%3E%20R5%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void InvocationArgument(bool condition, object a)
    {
        Console.WriteLine(condition ? a.ToString() : "Default");
    }
*/

digraph "InvocationArgument" {
subgraph "cluster_Sonar.InvocationArgument" {
label = "Sonar.InvocationArgument"
0 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: Console|MemberAccessExpressionSyntax: Console.WriteLine|IdentifierNameSyntax: condition}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{SIMPLE|IdentifierNameSyntax: a|MemberAccessExpressionSyntax: a.ToString|InvocationExpressionSyntax: a.ToString()}"]
1 -> 3
2 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Default\"}"]
2 -> 3
3 [shape=record label="{SIMPLE|InvocationExpressionSyntax: Console.WriteLine(condition ? a.ToString() : \"Default\")}"]
3 -> 4
4 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.InvocationArgument" {
label = "Roslyn.InvocationArgument"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: condition|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|2# ParameterReferenceOperation / IdentifierNameSyntax: a|1# InvocationOperation / InvocationExpressionSyntax: a.ToString()|0# FlowCaptureOperation / InvocationExpressionSyntax: a.ToString()|##########}"]
R1 -> R2 [label="Else"]
R3 [shape=record label="{BLOCK #R3|1# LiteralOperation / LiteralExpressionSyntax: \"Default\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"Default\"|##########}"]
R1 -> R3 [label="WhenFalse"]
R4 [shape=record label="{BLOCK #R4|3# FlowCaptureReferenceOperation / ConditionalExpressionSyntax: condition ? a.ToString() : \"Default\"|2# ArgumentOperation / ArgumentSyntax: condition ? a.ToString() : \"Default\"|1# InvocationOperation / InvocationExpressionSyntax: Console.WriteLine(condition ? a.ToString() : \"Default\")|0# ExpressionStatementOperation / ExpressionStatementSyntax: Console.WriteLine(condition ? a.ToString() : \"Default\");|##########}"]
R2 -> R4
R3 -> R4
R5 [shape=record label="{EXIT #R5}"]
R4 -> R5
}
}
