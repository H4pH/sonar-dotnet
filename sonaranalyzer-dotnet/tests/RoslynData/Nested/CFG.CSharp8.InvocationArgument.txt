// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22InvocationArgument%22+%7B%0D%0Asubgraph+%22cluster_Sonar.InvocationArgument%22+%7B%0Alabel+%3D+%22Sonar.InvocationArgument%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A+Console%7CMemberAccessExpressionSyntax%3A+Console.WriteLine%7CIdentifierNameSyntax%3A+condition%7D%22%5D%0D%0A0+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A0+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A+a%7CMemberAccessExpressionSyntax%3A+a.ToString%7CInvocationExpressionSyntax%3A+a.ToString()%7D%22%5D%0D%0A1+-%3E+3%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A+%5C%22Default%5C%22%7D%22%5D%0D%0A2+-%3E+3%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CInvocationExpressionSyntax%3A+Console.WriteLine(condition+%3F+a.ToString()+%3A+%5C%22Default%5C%22)%7D%22%5D%0D%0A3+-%3E+4%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.InvocationArgument%22+%7B%0Alabel+%3D+%22Roslyn.InvocationArgument%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C%23%23+BranchValue+%23%23%7C0%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+condition%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root2%7C2%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+a%7C1%23+InvocationOperation.ToString+%2F+InvocationExpressionSyntax%3A+a.ToString()%7C0%23+FlowCaptureOperation+%2F+InvocationExpressionSyntax%3A+a.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root2+%5Blabel%3D%22Else%22%5D%0D%0ARoot3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root3%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Default%5C%22%7C0%23+FlowCaptureOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Default%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root3+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root4%7C3%23+FlowCaptureReferenceOperation+%2F+ConditionalExpressionSyntax%3A+condition+%3F+a.ToString()+%3A+%5C%22Default%5C%22%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+condition+%3F+a.ToString()+%3A+%5C%22Default%5C%22%7C1%23+InvocationOperation.WriteLine+%2F+InvocationExpressionSyntax%3A+Console.WriteLine(condition+%3F+a.ToString()+%3A+%5C%22Default%5C%22)%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+Console.WriteLine(condition+%3F+a.ToString()+%3A+%5C%22Default%5C%22)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2+-%3E+Root4%0D%0ARoot3+-%3E+Root4%0D%0A%7D%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot5+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root5%7D%22%5D%0D%0ARoot4+-%3E+Root5%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void InvocationArgument(bool condition, object a)
    {
        Console.WriteLine(condition ? a.ToString() : "Default");
    }
*/

digraph "InvocationArgument" {
subgraph "cluster_Sonar.InvocationArgument" {
label = "Sonar.InvocationArgument"
0 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: Console|MemberAccessExpressionSyntax: Console.WriteLine|IdentifierNameSyntax: condition}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{SIMPLE|IdentifierNameSyntax: a|MemberAccessExpressionSyntax: a.ToString|InvocationExpressionSyntax: a.ToString()}"]
1 -> 3
2 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Default\"}"]
2 -> 3
3 [shape=record label="{SIMPLE|InvocationExpressionSyntax: Console.WriteLine(condition ? a.ToString() : \"Default\")}"]
3 -> 4
4 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.InvocationArgument" {
label = "Roslyn.InvocationArgument"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: condition|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|2# ParameterReferenceOperation / IdentifierNameSyntax: a|1# InvocationOperation.ToString / InvocationExpressionSyntax: a.ToString()|0# FlowCaptureOperation / InvocationExpressionSyntax: a.ToString()|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|1# LiteralOperation / LiteralExpressionSyntax: \"Default\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"Default\"|##########}"]
Root1 -> Root3 [label="WhenFalse"]
Root4 [shape=record label="{BLOCK #Root4|3# FlowCaptureReferenceOperation / ConditionalExpressionSyntax: condition ? a.ToString() : \"Default\"|2# ArgumentOperation / ArgumentSyntax: condition ? a.ToString() : \"Default\"|1# InvocationOperation.WriteLine / InvocationExpressionSyntax: Console.WriteLine(condition ? a.ToString() : \"Default\")|0# ExpressionStatementOperation / ExpressionStatementSyntax: Console.WriteLine(condition ? a.ToString() : \"Default\");|##########}"]
Root2 -> Root4
Root3 -> Root4
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root5 [shape=record label="{EXIT #Root5}"]
Root4 -> Root5
}
}
