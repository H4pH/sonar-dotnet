// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22If%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.If%22%20%7B%0Alabel%20%3D%20%22Sonar.If%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A%20outer%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A%20inner%7D%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%204%20%5Blabel%3D%22False%22%5D%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22Outer%20%26%26%20Inner%5C%22%7CVariableDeclaratorSyntax%3A%20a%20%3D%20%5C%22Outer%20%26%26%20Inner%5C%22%7D%22%5D%0D%0A3%20-%3E%205%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22Outer%20%26%26%20!Inner%5C%22%7CVariableDeclaratorSyntax%3A%20a%20%3D%20%5C%22Outer%20%26%26%20!Inner%5C%22%7D%22%5D%0D%0A4%20-%3E%205%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22!Outer%5C%22%7CVariableDeclaratorSyntax%3A%20a%20%3D%20%5C%22!Outer%5C%22%7D%22%5D%0D%0A2%20-%3E%205%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.If%22%20%7B%0Alabel%20%3D%20%22Roslyn.If%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20a%20%3D%20%5C%22Outer%20%26%26%20Inner%5C%22%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Outer%20%26%26%20Inner%5C%22%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20a%20%3D%20%5C%22Outer%20%26%26%20Inner%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root3%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20a%20%3D%20%5C%22Outer%20%26%26%20!Inner%5C%22%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Outer%20%26%26%20!Inner%5C%22%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20a%20%3D%20%5C%22Outer%20%26%26%20!Inner%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root4%20%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root5%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20a%20%3D%20%5C%22!Outer%5C%22%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22!Outer%5C%22%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20a%20%3D%20%5C%22!Outer%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20outer%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20inner%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%20%5Blabel%3D%22Else%22%5D%0D%0ARoot6%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root6%7D%22%5D%0D%0ARoot3%20-%3E%20Root6%0D%0ARoot4%20-%3E%20Root6%0D%0ARoot5%20-%3E%20Root6%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void If(bool outer, bool inner)
    {
        if (outer)
        {
            if (inner)
            {
                var a = "Outer && Inner";
            }
            else
            {
                var a = "Outer && !Inner";
            }
        }
        else
        {
            var a = "!Outer";
        }
    }
*/

digraph "If" {
subgraph "cluster_Sonar.If" {
label = "Sonar.If"
0 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: outer}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: inner}"]
1 -> 3 [label="True"]
1 -> 4 [label="False"]
3 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Outer && Inner\"|VariableDeclaratorSyntax: a = \"Outer && Inner\"}"]
3 -> 5
4 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Outer && !Inner\"|VariableDeclaratorSyntax: a = \"Outer && !Inner\"}"]
4 -> 5
2 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"!Outer\"|VariableDeclaratorSyntax: a = \"!Outer\"}"]
2 -> 5
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.If" {
label = "Roslyn.If"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root3 [shape=record label="{BLOCK #Root3|1# LocalReferenceOperation / VariableDeclaratorSyntax: a = \"Outer && Inner\"|1# LiteralOperation / LiteralExpressionSyntax: \"Outer && Inner\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: a = \"Outer && Inner\"|##########}"]
Root2 -> Root3 [label="Else"]
}
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root4 [shape=record label="{BLOCK #Root4|1# LocalReferenceOperation / VariableDeclaratorSyntax: a = \"Outer && !Inner\"|1# LiteralOperation / LiteralExpressionSyntax: \"Outer && !Inner\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: a = \"Outer && !Inner\"|##########}"]
Root2 -> Root4 [label="WhenFalse"]
}
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root5 [shape=record label="{BLOCK #Root5|1# LocalReferenceOperation / VariableDeclaratorSyntax: a = \"!Outer\"|1# LiteralOperation / LiteralExpressionSyntax: \"!Outer\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: a = \"!Outer\"|##########}"]
Root1 -> Root5 [label="WhenFalse"]
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: outer|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: inner|##########}"]
Root1 -> Root2 [label="Else"]
Root6 [shape=record label="{EXIT #Root6}"]
Root3 -> Root6
Root4 -> Root6
Root5 -> Root6
}
}
