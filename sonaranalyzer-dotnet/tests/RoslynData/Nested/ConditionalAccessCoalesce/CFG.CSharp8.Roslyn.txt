digraph "Roslyn.ConditionalAccessCoalesce" {
0 [shape=record label="{ENTRY #0}"]
1 [shape=record label="{BLOCK #1|1# ParameterReferenceOperation / IdentifierNameSyntax: o|0# FlowCaptureOperation / IdentifierNameSyntax: o|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|0# IsNullOperation / IdentifierNameSyntax: o|##########}"]
0 -> 1
2 [shape=record label="{BLOCK #2|2# FlowCaptureReferenceOperation / IdentifierNameSyntax: o|1# InvocationOperation / InvocationExpressionSyntax: .ToString()|0# FlowCaptureOperation / InvocationExpressionSyntax: .ToString()|##########}"]
1 -> 2 [label="Else"]
3 [shape=record label="{BLOCK #3|1# DefaultValueOperation / IdentifierNameSyntax: o|0# FlowCaptureOperation / IdentifierNameSyntax: o|##########}"]
1 -> 3 [label="WhenTrue"]
4 [shape=record label="{BLOCK #4|## BranchValue ##|1# FlowCaptureReferenceOperation / ConditionalAccessExpressionSyntax: o?.ToString()|0# IsNullOperation / ConditionalAccessExpressionSyntax: o?.ToString()|##########}"]
2 -> 4
3 -> 4
5 [shape=record label="{BLOCK #5|1# FlowCaptureReferenceOperation / ConditionalAccessExpressionSyntax: o?.ToString()|0# FlowCaptureOperation / ConditionalAccessExpressionSyntax: o?.ToString()|##########}"]
4 -> 5 [label="Else"]
6 [shape=record label="{BLOCK #6|1# LiteralOperation / LiteralExpressionSyntax: \"N/A\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"N/A\"|##########}"]
4 -> 6 [label="WhenTrue"]
7 [shape=record label="{BLOCK #7|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = o?.ToString() ?? \"N/A\"|1# FlowCaptureReferenceOperation / BinaryExpressionSyntax: o?.ToString() ?? \"N/A\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = o?.ToString() ?? \"N/A\"|##########}"]
5 -> 7
6 -> 7
8 [shape=record label="{EXIT #8}"]
7 -> 8
}
