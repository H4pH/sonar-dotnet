// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22While%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.While%22%20%7B%0Alabel%20%3D%20%22Sonar.While%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AGreaterThanExpression%7CIdentifierNameSyntax%3A%20i%7CLiteralExpressionSyntax%3A%200%7CBinaryExpressionSyntax%3A%20i%20%5C%3E%200%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20i%7CPostfixUnaryExpressionSyntax%3A%20i--%7CIdentifierNameSyntax%3A%20i%7CVariableDeclaratorSyntax%3A%20j%20%3D%20i%7D%22%5D%0D%0A1%20-%3E%203%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AGreaterThanExpression%7CIdentifierNameSyntax%3A%20j%7CLiteralExpressionSyntax%3A%200%7CBinaryExpressionSyntax%3A%20j%20%5C%3E%200%7D%22%5D%0D%0A3%20-%3E%204%20%5Blabel%3D%22True%22%5D%0D%0A3%20-%3E%200%20%5Blabel%3D%22False%22%5D%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20j%7CPostfixUnaryExpressionSyntax%3A%20j--%7D%22%5D%0D%0A4%20-%3E%203%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.While%22%20%7B%0Alabel%20%3D%20%22Roslyn.While%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C2%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C1%23%20IncrementOrDecrementOperation%20%2F%20PostfixUnaryExpressionSyntax%3A%20i--%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20i--%3B%7C%23%23%23%23%23%23%23%23%23%23%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20j%20%3D%20i%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20j%20%3D%20i%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%20%5Blabel%3D%22Else%22%5D%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20j%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20j%20%5C%3E%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root3%0D%0ARoot4%20-%3E%20Root3%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20j%7C1%23%20IncrementOrDecrementOperation%20%2F%20PostfixUnaryExpressionSyntax%3A%20j--%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20j--%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3%20-%3E%20Root4%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C%23%23%20BranchValue%20%23%23%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20i%20%5C%3E%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot3%20-%3E%20Root1%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root5%7D%22%5D%0D%0ARoot1%20-%3E%20Root5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void While(int i)
    {
        while (i > 0)
        {
            i--;
            var j = i;
            while (j > 0)
            {
                j--;
            }
        }
    }
*/

digraph "While" {
subgraph "cluster_Sonar.While" {
label = "Sonar.While"
0 [shape=record label="{BINARY:GreaterThanExpression|IdentifierNameSyntax: i|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: i \> 0}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{SIMPLE|IdentifierNameSyntax: i|PostfixUnaryExpressionSyntax: i--|IdentifierNameSyntax: i|VariableDeclaratorSyntax: j = i}"]
1 -> 3
3 [shape=record label="{BINARY:GreaterThanExpression|IdentifierNameSyntax: j|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: j \> 0}"]
3 -> 4 [label="True"]
3 -> 0 [label="False"]
4 [shape=record label="{SIMPLE|IdentifierNameSyntax: j|PostfixUnaryExpressionSyntax: j--}"]
4 -> 3
2 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.While" {
label = "Roslyn.While"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root2 [shape=record label="{BLOCK #Root2|2# ParameterReferenceOperation / IdentifierNameSyntax: i|1# IncrementOrDecrementOperation / PostfixUnaryExpressionSyntax: i--|0# ExpressionStatementOperation / ExpressionStatementSyntax: i--;|##########|1# LocalReferenceOperation / VariableDeclaratorSyntax: j = i|1# ParameterReferenceOperation / IdentifierNameSyntax: i|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: j = i|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: j|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: j \> 0|##########}"]
Root2 -> Root3
Root4 -> Root3
Root4 [shape=record label="{BLOCK #Root4|2# LocalReferenceOperation / IdentifierNameSyntax: j|1# IncrementOrDecrementOperation / PostfixUnaryExpressionSyntax: j--|0# ExpressionStatementOperation / ExpressionStatementSyntax: j--;|##########}"]
Root3 -> Root4 [label="Else"]
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|1# ParameterReferenceOperation / IdentifierNameSyntax: i|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: i \> 0|##########}"]
Root0 -> Root1
Root3 -> Root1 [label="WhenFalse"]
Root5 [shape=record label="{EXIT #Root5}"]
Root1 -> Root5 [label="WhenFalse"]
}
}
