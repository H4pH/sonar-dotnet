// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22IsTypeInConditionChain%22+%7B%0D%0Asubgraph+%22cluster_Sonar.IsTypeInConditionChain%22+%7B%0Alabel+%3D+%22Sonar.IsTypeInConditionChain%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AIsPatternExpression%7CIdentifierNameSyntax%3A+a%7CIsPatternExpressionSyntax%3A+a+is+string+str%7D%22%5D%0D%0A0+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A0+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AIsPatternExpression%7CIdentifierNameSyntax%3A+str%7CMemberAccessExpressionSyntax%3A+str.GetType%7CInvocationExpressionSyntax%3A+str.GetType()%7CRecursivePatternSyntax%3A+%5C%7B+%5C%7D+type%7CIsPatternExpressionSyntax%3A+str.GetType()+is+%5C%7B+%5C%7D+type%7D%22%5D%0D%0A1+-%3E+3+%5Blabel%3D%22True%22%5D%0D%0A1+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AIsPatternExpression%7CIdentifierNameSyntax%3A+type%7CMemberAccessExpressionSyntax%3A+type.BaseType%7CIsPatternExpressionSyntax%3A+type.BaseType+is+Type+baseType%7D%22%5D%0D%0A3+-%3E+4+%5Blabel%3D%22True%22%5D%0D%0A3+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ASimpleMemberAccessExpression%7CIdentifierNameSyntax%3A+baseType%7CMemberAccessExpressionSyntax%3A+baseType.IsAbstract%7D%22%5D%0D%0A4+-%3E+5+%5Blabel%3D%22True%22%5D%0D%0A4+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A5+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A+%5C%22value%5C%22%7CVariableDeclaratorSyntax%3A+ret+%3D+%5C%22value%5C%22%7D%22%5D%0D%0A5+-%3E+2%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.IsTypeInConditionChain%22+%7B%0Alabel+%3D+%22Roslyn.IsTypeInConditionChain%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0AR5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R5%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+ret+%3D+%5C%22value%5C%22%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22value%5C%22%7C0%23+SimpleAssignmentOperation+%2F+VariableDeclaratorSyntax%3A+ret+%3D+%5C%22value%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4+-%3E+R5+%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0AR1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R1%7C%23%23+BranchValue+%23%23%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+a%7C1%23+DeclarationPatternOperation+%2F+DeclarationPatternSyntax%3A+string+str%7C0%23+IsPatternOperation+%2F+IsPatternExpressionSyntax%3A+a+is+string+str%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0+-%3E+R1%0D%0AR2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R2%7C%23%23+BranchValue+%23%23%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+str%7C1%23+InvocationOperation+%2F+InvocationExpressionSyntax%3A+str.GetType()%7C1%23+RecursivePatternOperation+%2F+RecursivePatternSyntax%3A+%5C%7B+%5C%7D+type%7C0%23+IsPatternOperation+%2F+IsPatternExpressionSyntax%3A+str.GetType()+is+%5C%7B+%5C%7D+type%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1+-%3E+R2+%5Blabel%3D%22Else%22%5D%0D%0AR3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R3%7C%23%23+BranchValue+%23%23%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+type%7C1%23+PropertyReferenceOperation+%2F+MemberAccessExpressionSyntax%3A+type.BaseType%7C1%23+DeclarationPatternOperation+%2F+DeclarationPatternSyntax%3A+Type+baseType%7C0%23+IsPatternOperation+%2F+IsPatternExpressionSyntax%3A+type.BaseType+is+Type+baseType%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2+-%3E+R3+%5Blabel%3D%22Else%22%5D%0D%0AR4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R4%7C%23%23+BranchValue+%23%23%7C1%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+baseType%7C0%23+PropertyReferenceOperation+%2F+MemberAccessExpressionSyntax%3A+baseType.IsAbstract%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3+-%3E+R4+%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0AR0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23R0%7D%22%5D%0D%0AR6+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23R6%7D%22%5D%0D%0AR1+-%3E+R6+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR2+-%3E+R6+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR3+-%3E+R6+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR4+-%3E+R6+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR5+-%3E+R6%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void IsTypeInConditionChain(object a)
    {
        if (a is string str
            && str.GetType() is { } type
            && type.BaseType is Type baseType
            && baseType.IsAbstract)
        {
            var ret = "value";
        }
    }
*/

digraph "IsTypeInConditionChain" {
subgraph "cluster_Sonar.IsTypeInConditionChain" {
label = "Sonar.IsTypeInConditionChain"
0 [shape=record label="{BINARY:IsPatternExpression|IdentifierNameSyntax: a|IsPatternExpressionSyntax: a is string str}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{BINARY:IsPatternExpression|IdentifierNameSyntax: str|MemberAccessExpressionSyntax: str.GetType|InvocationExpressionSyntax: str.GetType()|RecursivePatternSyntax: \{ \} type|IsPatternExpressionSyntax: str.GetType() is \{ \} type}"]
1 -> 3 [label="True"]
1 -> 2 [label="False"]
3 [shape=record label="{BINARY:IsPatternExpression|IdentifierNameSyntax: type|MemberAccessExpressionSyntax: type.BaseType|IsPatternExpressionSyntax: type.BaseType is Type baseType}"]
3 -> 4 [label="True"]
3 -> 2 [label="False"]
4 [shape=record label="{BINARY:SimpleMemberAccessExpression|IdentifierNameSyntax: baseType|MemberAccessExpressionSyntax: baseType.IsAbstract}"]
4 -> 5 [label="True"]
4 -> 2 [label="False"]
5 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"value\"|VariableDeclaratorSyntax: ret = \"value\"}"]
5 -> 2
2 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.IsTypeInConditionChain" {
label = "Roslyn.IsTypeInConditionChain"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
R5 [shape=record label="{BLOCK #R5|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = \"value\"|1# LiteralOperation / LiteralExpressionSyntax: \"value\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = \"value\"|##########}"]
R4 -> R5 [label="Else"]
}
R1 [shape=record label="{BLOCK #R1|## BranchValue ##|1# ParameterReferenceOperation / IdentifierNameSyntax: a|1# DeclarationPatternOperation / DeclarationPatternSyntax: string str|0# IsPatternOperation / IsPatternExpressionSyntax: a is string str|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: str|1# InvocationOperation / InvocationExpressionSyntax: str.GetType()|1# RecursivePatternOperation / RecursivePatternSyntax: \{ \} type|0# IsPatternOperation / IsPatternExpressionSyntax: str.GetType() is \{ \} type|##########}"]
R1 -> R2 [label="Else"]
R3 [shape=record label="{BLOCK #R3|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: type|1# PropertyReferenceOperation / MemberAccessExpressionSyntax: type.BaseType|1# DeclarationPatternOperation / DeclarationPatternSyntax: Type baseType|0# IsPatternOperation / IsPatternExpressionSyntax: type.BaseType is Type baseType|##########}"]
R2 -> R3 [label="Else"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: baseType|0# PropertyReferenceOperation / MemberAccessExpressionSyntax: baseType.IsAbstract|##########}"]
R3 -> R4 [label="Else"]
}
R0 [shape=record label="{ENTRY #R0}"]
R6 [shape=record label="{EXIT #R6}"]
R1 -> R6 [label="WhenFalse"]
R2 -> R6 [label="WhenFalse"]
R3 -> R6 [label="WhenFalse"]
R4 -> R6 [label="WhenFalse"]
R5 -> R6
}
}
