// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22IsTypeInConditionChain%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.IsTypeInConditionChain%22%20%7B%0Alabel%20%3D%20%22Sonar.IsTypeInConditionChain%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIsPatternExpression%7CIdentifierNameSyntax%3A%20a%7CIsPatternExpressionSyntax%3A%20a%20is%20string%20str%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIsPatternExpression%7CIdentifierNameSyntax%3A%20str%7CMemberAccessExpressionSyntax%3A%20str.GetType%7CInvocationExpressionSyntax%3A%20str.GetType()%7CRecursivePatternSyntax%3A%20%5C%7B%20%5C%7D%20type%7CIsPatternExpressionSyntax%3A%20str.GetType()%20is%20%5C%7B%20%5C%7D%20type%7D%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIsPatternExpression%7CIdentifierNameSyntax%3A%20type%7CMemberAccessExpressionSyntax%3A%20type.BaseType%7CIsPatternExpressionSyntax%3A%20type.BaseType%20is%20Type%20baseType%7D%22%5D%0D%0A3%20-%3E%204%20%5Blabel%3D%22True%22%5D%0D%0A3%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ASimpleMemberAccessExpression%7CIdentifierNameSyntax%3A%20baseType%7CMemberAccessExpressionSyntax%3A%20baseType.IsAbstract%7D%22%5D%0D%0A4%20-%3E%205%20%5Blabel%3D%22True%22%5D%0D%0A4%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22value%5C%22%7CVariableDeclaratorSyntax%3A%20ret%20%3D%20%5C%22value%5C%22%7D%22%5D%0D%0A5%20-%3E%202%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.IsTypeInConditionChain%22%20%7B%0Alabel%20%3D%20%22Roslyn.IsTypeInConditionChain%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C%23%23%20BranchValue%20%23%23%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20string%20str%7C0%23%20IsPatternOperation%20%2F%20IsPatternExpressionSyntax%3A%20a%20is%20string%20str%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C%23%23%20BranchValue%20%23%23%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20str%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20str.GetType()%7C1%23%20RecursivePatternOperation%20%2F%20RecursivePatternSyntax%3A%20%5C%7B%20%5C%7D%20type%7C0%23%20IsPatternOperation%20%2F%20IsPatternExpressionSyntax%3A%20str.GetType()%20is%20%5C%7B%20%5C%7D%20type%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%20%5Blabel%3D%22Else%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C%23%23%20BranchValue%20%23%23%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20type%7C1%23%20PropertyReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20type.BaseType%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20Type%20baseType%7C0%23%20IsPatternOperation%20%2F%20IsPatternExpressionSyntax%3A%20type.BaseType%20is%20Type%20baseType%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R3%20%5Blabel%3D%22Else%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20baseType%7C0%23%20PropertyReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20baseType.IsAbstract%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3%20-%3E%20R4%20%5Blabel%3D%22Else%22%5D%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R5%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20%5C%22value%5C%22%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22value%5C%22%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20%5C%22value%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20-%3E%20R5%20%5Blabel%3D%22Else%22%5D%0D%0AR6%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R6%7D%22%5D%0D%0AR1%20-%3E%20R6%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR2%20-%3E%20R6%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR3%20-%3E%20R6%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR4%20-%3E%20R6%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR5%20-%3E%20R6%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void IsTypeInConditionChain(object a)
    {
        if (a is string str
            && str.GetType() is { } type
            && type.BaseType is Type baseType
            && baseType.IsAbstract)
        {
            var ret = "value";
        }
    }
*/

digraph "IsTypeInConditionChain" {
subgraph "cluster_Sonar.IsTypeInConditionChain" {
label = "Sonar.IsTypeInConditionChain"
0 [shape=record label="{BINARY:IsPatternExpression|IdentifierNameSyntax: a|IsPatternExpressionSyntax: a is string str}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{BINARY:IsPatternExpression|IdentifierNameSyntax: str|MemberAccessExpressionSyntax: str.GetType|InvocationExpressionSyntax: str.GetType()|RecursivePatternSyntax: \{ \} type|IsPatternExpressionSyntax: str.GetType() is \{ \} type}"]
1 -> 3 [label="True"]
1 -> 2 [label="False"]
3 [shape=record label="{BINARY:IsPatternExpression|IdentifierNameSyntax: type|MemberAccessExpressionSyntax: type.BaseType|IsPatternExpressionSyntax: type.BaseType is Type baseType}"]
3 -> 4 [label="True"]
3 -> 2 [label="False"]
4 [shape=record label="{BINARY:SimpleMemberAccessExpression|IdentifierNameSyntax: baseType|MemberAccessExpressionSyntax: baseType.IsAbstract}"]
4 -> 5 [label="True"]
4 -> 2 [label="False"]
5 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"value\"|VariableDeclaratorSyntax: ret = \"value\"}"]
5 -> 2
2 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.IsTypeInConditionChain" {
label = "Roslyn.IsTypeInConditionChain"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|## BranchValue ##|1# ParameterReferenceOperation / IdentifierNameSyntax: a|1# DeclarationPatternOperation / DeclarationPatternSyntax: string str|0# IsPatternOperation / IsPatternExpressionSyntax: a is string str|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: str|1# InvocationOperation / InvocationExpressionSyntax: str.GetType()|1# RecursivePatternOperation / RecursivePatternSyntax: \{ \} type|0# IsPatternOperation / IsPatternExpressionSyntax: str.GetType() is \{ \} type|##########}"]
R1 -> R2 [label="Else"]
R3 [shape=record label="{BLOCK #R3|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: type|1# PropertyReferenceOperation / MemberAccessExpressionSyntax: type.BaseType|1# DeclarationPatternOperation / DeclarationPatternSyntax: Type baseType|0# IsPatternOperation / IsPatternExpressionSyntax: type.BaseType is Type baseType|##########}"]
R2 -> R3 [label="Else"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: baseType|0# PropertyReferenceOperation / MemberAccessExpressionSyntax: baseType.IsAbstract|##########}"]
R3 -> R4 [label="Else"]
R5 [shape=record label="{BLOCK #R5|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = \"value\"|1# LiteralOperation / LiteralExpressionSyntax: \"value\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = \"value\"|##########}"]
R4 -> R5 [label="Else"]
R6 [shape=record label="{EXIT #R6}"]
R1 -> R6 [label="WhenFalse"]
R2 -> R6 [label="WhenFalse"]
R3 -> R6 [label="WhenFalse"]
R4 -> R6 [label="WhenFalse"]
R5 -> R6
}
}
