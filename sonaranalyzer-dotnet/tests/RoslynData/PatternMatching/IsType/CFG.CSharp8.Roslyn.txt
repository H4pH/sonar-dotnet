digraph "Roslyn.IsType" {
0 [shape=record label="{ENTRY #0}"]
1 [shape=record label="{BLOCK #1|## BranchValue ##|1# ParameterReferenceOperation / IdentifierNameSyntax: a|1# DeclarationPatternOperation / DeclarationPatternSyntax: string str|0# IsPatternOperation / IsPatternExpressionSyntax: a is string str|##########}"]
0 -> 1
2 [shape=record label="{BLOCK #2|3# LocalReferenceOperation / IdentifierNameSyntax: str|2# PropertyReferenceOperation / MemberAccessExpressionSyntax: str.Length|2# LiteralOperation / LiteralExpressionSyntax: 0|1# BinaryOperation / BinaryExpressionSyntax: str.Length \> 0|0# FlowCaptureOperation / BinaryExpressionSyntax: str.Length \> 0|##########}"]
1 -> 2 [label="Else"]
3 [shape=record label="{BLOCK #3|1# LiteralOperation / IsPatternExpressionSyntax: a is string str|0# FlowCaptureOperation / IsPatternExpressionSyntax: a is string str|##########}"]
1 -> 3 [label="WhenFalse"]
4 [shape=record label="{BLOCK #4|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = a is string str && str.Length \> 0|1# FlowCaptureReferenceOperation / BinaryExpressionSyntax: a is string str && str.Length \> 0|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = a is string str && str.Length \> 0|##########}"]
2 -> 4
3 -> 4
5 [shape=record label="{EXIT #5}"]
4 -> 5
}
