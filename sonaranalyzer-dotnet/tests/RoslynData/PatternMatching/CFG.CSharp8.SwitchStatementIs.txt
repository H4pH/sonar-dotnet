// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22SwitchStatementIs%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.SwitchStatementIs%22%20%7B%0Alabel%20%3D%20%22Sonar.SwitchStatementIs%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ASwitchStatement%7CIdentifierNameSyntax%3A%20arg%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A%20TypeA%20a%7D%22%5D%0D%0A1%20-%3E%202%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20a%7CMemberAccessExpressionSyntax%3A%20a.ToString%7CInvocationExpressionSyntax%3A%20a.ToString()%7D%22%5D%0D%0A2%20-%3E%204%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A%20TypeB%20b%7D%22%5D%0D%0A3%20-%3E%205%20%5Blabel%3D%22True%22%5D%0D%0A3%20-%3E%206%20%5Blabel%3D%22False%22%5D%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20b%7CMemberAccessExpressionSyntax%3A%20b.ToString%7CInvocationExpressionSyntax%3A%20b.ToString()%7D%22%5D%0D%0A5%20-%3E%204%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A%20TypeC%20c%7D%22%5D%0D%0A6%20-%3E%207%20%5Blabel%3D%22True%22%5D%0D%0A6%20-%3E%208%20%5Blabel%3D%22False%22%5D%0D%0A7%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20c%7CMemberAccessExpressionSyntax%3A%20c.ToString%7CInvocationExpressionSyntax%3A%20c.ToString()%7D%22%5D%0D%0A7%20-%3E%204%0D%0A8%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A%20null%7D%22%5D%0D%0A8%20-%3E%204%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.SwitchStatementIs%22%20%7B%0Alabel%20%3D%20%22Roslyn.SwitchStatementIs%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeA%20a%7C0%23%20IsPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeA%20a%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C0%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20a.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R3%20%5Blabel%3D%22Else%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeB%20b%7C0%23%20IsPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeB%20b%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R4%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R5%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20b%7C0%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20b.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20-%3E%20R5%20%5Blabel%3D%22Else%22%5D%0D%0AR6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R6%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeC%20c%7C0%23%20IsPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeC%20c%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20-%3E%20R6%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R7%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20c%7C0%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20c.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR6%20-%3E%20R7%20%5Blabel%3D%22Else%22%5D%0D%0AR8%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R8%7C%23%23%20BranchValue%20%23%23%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C0%23%20ConversionOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR6%20-%3E%20R8%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR9%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R9%7D%22%5D%0D%0AR3%20-%3E%20R9%0D%0AR5%20-%3E%20R9%0D%0AR7%20-%3E%20R9%0D%0AR8%20-%3E%20R9%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string SwitchStatementIs(object arg)
    {
        switch (arg)
        {
            case TypeA a:
                return a.ToString();
            case TypeB b:
                return b.ToString();
            case TypeC c:
                return c.ToString();
            default:
                return null;
        }
    }
*/

digraph "SwitchStatementIs" {
subgraph "cluster_Sonar.SwitchStatementIs" {
label = "Sonar.SwitchStatementIs"
0 [shape=record label="{BRANCH:SwitchStatement|IdentifierNameSyntax: arg}"]
0 -> 1
1 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeA a}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: a|MemberAccessExpressionSyntax: a.ToString|InvocationExpressionSyntax: a.ToString()}"]
2 -> 4
3 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeB b}"]
3 -> 5 [label="True"]
3 -> 6 [label="False"]
5 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: b|MemberAccessExpressionSyntax: b.ToString|InvocationExpressionSyntax: b.ToString()}"]
5 -> 4
6 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeC c}"]
6 -> 7 [label="True"]
6 -> 8 [label="False"]
7 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: c|MemberAccessExpressionSyntax: c.ToString|InvocationExpressionSyntax: c.ToString()}"]
7 -> 4
8 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: null}"]
8 -> 4
4 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.SwitchStatementIs" {
label = "Roslyn.SwitchStatementIs"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# ParameterReferenceOperation / IdentifierNameSyntax: arg|0# FlowCaptureOperation / IdentifierNameSyntax: arg|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeA a|0# IsPatternOperation / DeclarationPatternSyntax: TypeA a|##########}"]
R1 -> R2
R3 [shape=record label="{BLOCK #R3|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: a|0# InvocationOperation / InvocationExpressionSyntax: a.ToString()|##########}"]
R2 -> R3 [label="Else"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeB b|0# IsPatternOperation / DeclarationPatternSyntax: TypeB b|##########}"]
R2 -> R4 [label="WhenFalse"]
R5 [shape=record label="{BLOCK #R5|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: b|0# InvocationOperation / InvocationExpressionSyntax: b.ToString()|##########}"]
R4 -> R5 [label="Else"]
R6 [shape=record label="{BLOCK #R6|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeC c|0# IsPatternOperation / DeclarationPatternSyntax: TypeC c|##########}"]
R4 -> R6 [label="WhenFalse"]
R7 [shape=record label="{BLOCK #R7|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: c|0# InvocationOperation / InvocationExpressionSyntax: c.ToString()|##########}"]
R6 -> R7 [label="Else"]
R8 [shape=record label="{BLOCK #R8|## BranchValue ##|1# LiteralOperation / LiteralExpressionSyntax: null|0# ConversionOperation / LiteralExpressionSyntax: null|##########}"]
R6 -> R8 [label="WhenFalse"]
R9 [shape=record label="{EXIT #R9}"]
R3 -> R9
R5 -> R9
R7 -> R9
R8 -> R9
}
}
