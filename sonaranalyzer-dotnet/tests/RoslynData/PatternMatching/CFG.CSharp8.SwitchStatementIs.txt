// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22SwitchStatementIs%22+%7B%0D%0Asubgraph+%22cluster_Sonar.SwitchStatementIs%22+%7B%0Alabel+%3D+%22Sonar.SwitchStatementIs%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBRANCH%3ASwitchStatement%7CIdentifierNameSyntax%3A+arg%7D%22%5D%0D%0A0+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A+TypeA+a%7D%22%5D%0D%0A1+-%3E+2+%5Blabel%3D%22True%22%5D%0D%0A1+-%3E+3+%5Blabel%3D%22False%22%5D%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A+a%7CMemberAccessExpressionSyntax%3A+a.ToString%7CInvocationExpressionSyntax%3A+a.ToString()%7D%22%5D%0D%0A2+-%3E+4%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A+TypeB+b%7D%22%5D%0D%0A3+-%3E+5+%5Blabel%3D%22True%22%5D%0D%0A3+-%3E+6+%5Blabel%3D%22False%22%5D%0D%0A5+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A+b%7CMemberAccessExpressionSyntax%3A+b.ToString%7CInvocationExpressionSyntax%3A+b.ToString()%7D%22%5D%0D%0A5+-%3E+4%0D%0A6+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A+TypeC+c%7D%22%5D%0D%0A6+-%3E+7+%5Blabel%3D%22True%22%5D%0D%0A6+-%3E+8+%5Blabel%3D%22False%22%5D%0D%0A7+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A+c%7CMemberAccessExpressionSyntax%3A+c.ToString%7CInvocationExpressionSyntax%3A+c.ToString()%7D%22%5D%0D%0A7+-%3E+4%0D%0A8+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A+null%7D%22%5D%0D%0A8+-%3E+4%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.SwitchStatementIs%22+%7B%0Alabel+%3D+%22Roslyn.SwitchStatementIs%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root2%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+arg%7C1%23+DeclarationPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeA+a%7C0%23+IsPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeA+a%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root2%0D%0ARoot3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root3%7C%23%23+BranchValue+%23%23%7C1%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+a%7C0%23+InvocationOperation.ToString+%2F+InvocationExpressionSyntax%3A+a.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2+-%3E+Root3+%5Blabel%3D%22Else%22%5D%0D%0ARoot4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root4%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+arg%7C1%23+DeclarationPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeB+b%7C0%23+IsPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeB+b%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2+-%3E+Root4+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root5%7C%23%23+BranchValue+%23%23%7C1%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+b%7C0%23+InvocationOperation.ToString+%2F+InvocationExpressionSyntax%3A+b.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4+-%3E+Root5+%5Blabel%3D%22Else%22%5D%0D%0ARoot6+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root6%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+arg%7C1%23+DeclarationPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeC+c%7C0%23+IsPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeC+c%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4+-%3E+Root6+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot7+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root7%7C%23%23+BranchValue+%23%23%7C1%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+c%7C0%23+InvocationOperation.ToString+%2F+InvocationExpressionSyntax%3A+c.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot6+-%3E+Root7+%5Blabel%3D%22Else%22%5D%0D%0ARoot8+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root8%7C%23%23+BranchValue+%23%23%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+null%7C0%23+ConversionOperation+%2F+LiteralExpressionSyntax%3A+null%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot6+-%3E+Root8+%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+arg%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+arg%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0A%7D%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot9+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root9%7D%22%5D%0D%0ARoot3+-%3E+Root9+%5Blabel%3D%22Return%22%5D%0D%0ARoot5+-%3E+Root9+%5Blabel%3D%22Return%22%5D%0D%0ARoot7+-%3E+Root9+%5Blabel%3D%22Return%22%5D%0D%0ARoot8+-%3E+Root9+%5Blabel%3D%22Return%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string SwitchStatementIs(object arg)
    {
        switch (arg)
        {
            case TypeA a:
                return a.ToString();
            case TypeB b:
                return b.ToString();
            case TypeC c:
                return c.ToString();
            default:
                return null;
        }
    }
*/

digraph "SwitchStatementIs" {
subgraph "cluster_Sonar.SwitchStatementIs" {
label = "Sonar.SwitchStatementIs"
0 [shape=record label="{BRANCH:SwitchStatement|IdentifierNameSyntax: arg}"]
0 -> 1
1 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeA a}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: a|MemberAccessExpressionSyntax: a.ToString|InvocationExpressionSyntax: a.ToString()}"]
2 -> 4
3 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeB b}"]
3 -> 5 [label="True"]
3 -> 6 [label="False"]
5 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: b|MemberAccessExpressionSyntax: b.ToString|InvocationExpressionSyntax: b.ToString()}"]
5 -> 4
6 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeC c}"]
6 -> 7 [label="True"]
6 -> 8 [label="False"]
7 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: c|MemberAccessExpressionSyntax: c.ToString|InvocationExpressionSyntax: c.ToString()}"]
7 -> 4
8 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: null}"]
8 -> 4
4 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.SwitchStatementIs" {
label = "Roslyn.SwitchStatementIs"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root2 [shape=record label="{BLOCK #Root2|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeA a|0# IsPatternOperation / DeclarationPatternSyntax: TypeA a|##########}"]
Root1 -> Root2
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: a|0# InvocationOperation.ToString / InvocationExpressionSyntax: a.ToString()|##########}"]
Root2 -> Root3 [label="Else"]
Root4 [shape=record label="{BLOCK #Root4|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeB b|0# IsPatternOperation / DeclarationPatternSyntax: TypeB b|##########}"]
Root2 -> Root4 [label="WhenFalse"]
Root5 [shape=record label="{BLOCK #Root5|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: b|0# InvocationOperation.ToString / InvocationExpressionSyntax: b.ToString()|##########}"]
Root4 -> Root5 [label="Else"]
Root6 [shape=record label="{BLOCK #Root6|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeC c|0# IsPatternOperation / DeclarationPatternSyntax: TypeC c|##########}"]
Root4 -> Root6 [label="WhenFalse"]
Root7 [shape=record label="{BLOCK #Root7|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: c|0# InvocationOperation.ToString / InvocationExpressionSyntax: c.ToString()|##########}"]
Root6 -> Root7 [label="Else"]
Root8 [shape=record label="{BLOCK #Root8|## BranchValue ##|1# LiteralOperation / LiteralExpressionSyntax: null|0# ConversionOperation / LiteralExpressionSyntax: null|##########}"]
Root6 -> Root8 [label="WhenFalse"]
}
Root1 [shape=record label="{BLOCK #Root1|1# ParameterReferenceOperation / IdentifierNameSyntax: arg|0# FlowCaptureOperation / IdentifierNameSyntax: arg|##########}"]
Root0 -> Root1
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root9 [shape=record label="{EXIT #Root9}"]
Root3 -> Root9 [label="Return"]
Root5 -> Root9 [label="Return"]
Root7 -> Root9 [label="Return"]
Root8 -> Root9 [label="Return"]
}
}
