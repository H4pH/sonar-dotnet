// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22TuplePattern%22+%7B%0D%0Asubgraph+%22cluster_Sonar.TuplePattern%22+%7B%0Alabel+%3D+%22Sonar.TuplePattern%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ASwitchExpressionArm%7CIdentifierNameSyntax%3A+tuple%7CRecursivePatternSyntax%3A+(0%2C+_)%7D%22%5D%0D%0A0+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A0+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A+%5C%22First+is+zero%5C%22%7D%22%5D%0D%0A1+-%3E+3%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ASwitchExpressionArm%7CIdentifierNameSyntax%3A+tuple%7CRecursivePatternSyntax%3A+(_%2C+0)%7D%22%5D%0D%0A2+-%3E+4+%5Blabel%3D%22True%22%5D%0D%0A2+-%3E+5+%5Blabel%3D%22False%22%5D%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A+%5C%22Second+is+zero%5C%22%7D%22%5D%0D%0A4+-%3E+3%0D%0A5+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A+%5C%22No+zero%5C%22%7D%22%5D%0D%0A5+-%3E+3%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7D%22%5D%0D%0A3+-%3E+6%0D%0A6+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.TuplePattern%22+%7B%0Alabel+%3D+%22Roslyn.TuplePattern%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+tuple%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+tuple%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+tuple%7C3%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C2%23+ConstantPatternOperation+%2F+ConstantPatternSyntax%3A+0%7C2%23+DiscardPatternOperation+%2F+DiscardPatternSyntax%3A+_%7C1%23+RecursivePatternOperation+%2F+RecursivePatternSyntax%3A+(0%2C+_)%7C0%23+IsPatternOperation+%2F+SwitchExpressionArmSyntax%3A+(0%2C+_)+%3D%5C%3E+%5C%22First+is+zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root2%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22First+is+zero%5C%22%7C0%23+FlowCaptureOperation+%2F+LiteralExpressionSyntax%3A+%5C%22First+is+zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root2+%5Blabel%3D%22Else%22%5D%0D%0ARoot3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root3%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+tuple%7C2%23+DiscardPatternOperation+%2F+DiscardPatternSyntax%3A+_%7C3%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C2%23+ConstantPatternOperation+%2F+ConstantPatternSyntax%3A+0%7C1%23+RecursivePatternOperation+%2F+RecursivePatternSyntax%3A+(_%2C+0)%7C0%23+IsPatternOperation+%2F+SwitchExpressionArmSyntax%3A+(_%2C+0)+%3D%5C%3E+%5C%22Second+is+zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root3+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root4%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Second+is+zero%5C%22%7C0%23+FlowCaptureOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Second+is+zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3+-%3E+Root4+%5Blabel%3D%22Else%22%5D%0D%0ARoot5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root5%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+tuple%7C1%23+DiscardPatternOperation+%2F+DiscardPatternSyntax%3A+_%7C0%23+IsPatternOperation+%2F+SwitchExpressionArmSyntax%3A+_+%3D%5C%3E+%5C%22No+zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3+-%3E+Root5+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot6+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root6%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22No+zero%5C%22%7C0%23+FlowCaptureOperation+%2F+LiteralExpressionSyntax%3A+%5C%22No+zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5+-%3E+Root6+%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0ARoot7+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root7%7C%23%23+BranchValue+%23%23%7C0%23+ObjectCreationOperation+%2F+SwitchExpressionSyntax%3A+tuple+switch%5Cn++++++++%5C%7B%5Cn++++++++++++(0%2C+_)+%3D%5C%3E+%5C%22First+is+zero%5C%22%2C%5Cn++++++++++++(_%2C+0)+%3D%5C%3E+%5C%22Second+is+zero%5C%22%2C%5Cn++++++++++++_+%3D%5C%3E+%5C%22No+zero%5C%22%5Cn++++++++%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5+-%3E+Root7+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot7+-%3E+NoDestinationRoot7+%5Blabel%3D%22Throw%22%5D%0D%0ARoot8+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root8%7C%23%23+BranchValue+%23%23%7C0%23+FlowCaptureReferenceOperation+%2F+SwitchExpressionSyntax%3A+tuple+switch%5Cn++++++++%5C%7B%5Cn++++++++++++(0%2C+_)+%3D%5C%3E+%5C%22First+is+zero%5C%22%2C%5Cn++++++++++++(_%2C+0)+%3D%5C%3E+%5C%22Second+is+zero%5C%22%2C%5Cn++++++++++++_+%3D%5C%3E+%5C%22No+zero%5C%22%5Cn++++++++%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2+-%3E+Root8%0D%0ARoot4+-%3E+Root8%0D%0ARoot6+-%3E+Root8%0D%0A%7D%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot9+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root9%7D%22%5D%0D%0ARoot8+-%3E+Root9+%5Blabel%3D%22Return%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string TuplePattern((int, int) tuple)
    {
        return tuple switch
        {
            (0, _) => "First is zero",
            (_, 0) => "Second is zero",
            _ => "No zero"
        };
    }
*/

digraph "TuplePattern" {
subgraph "cluster_Sonar.TuplePattern" {
label = "Sonar.TuplePattern"
0 [shape=record label="{BINARY:SwitchExpressionArm|IdentifierNameSyntax: tuple|RecursivePatternSyntax: (0, _)}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"First is zero\"}"]
1 -> 3
2 [shape=record label="{BINARY:SwitchExpressionArm|IdentifierNameSyntax: tuple|RecursivePatternSyntax: (_, 0)}"]
2 -> 4 [label="True"]
2 -> 5 [label="False"]
4 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Second is zero\"}"]
4 -> 3
5 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"No zero\"}"]
5 -> 3
3 [shape=record label="{JUMP:ReturnStatement}"]
3 -> 6
6 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.TuplePattern" {
label = "Roslyn.TuplePattern"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|1# ParameterReferenceOperation / IdentifierNameSyntax: tuple|0# FlowCaptureOperation / IdentifierNameSyntax: tuple|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: tuple|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ConstantPatternOperation / ConstantPatternSyntax: 0|2# DiscardPatternOperation / DiscardPatternSyntax: _|1# RecursivePatternOperation / RecursivePatternSyntax: (0, _)|0# IsPatternOperation / SwitchExpressionArmSyntax: (0, _) =\> \"First is zero\"|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|1# LiteralOperation / LiteralExpressionSyntax: \"First is zero\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"First is zero\"|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: tuple|2# DiscardPatternOperation / DiscardPatternSyntax: _|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ConstantPatternOperation / ConstantPatternSyntax: 0|1# RecursivePatternOperation / RecursivePatternSyntax: (_, 0)|0# IsPatternOperation / SwitchExpressionArmSyntax: (_, 0) =\> \"Second is zero\"|##########}"]
Root1 -> Root3 [label="WhenFalse"]
Root4 [shape=record label="{BLOCK #Root4|1# LiteralOperation / LiteralExpressionSyntax: \"Second is zero\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"Second is zero\"|##########}"]
Root3 -> Root4 [label="Else"]
Root5 [shape=record label="{BLOCK #Root5|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: tuple|1# DiscardPatternOperation / DiscardPatternSyntax: _|0# IsPatternOperation / SwitchExpressionArmSyntax: _ =\> \"No zero\"|##########}"]
Root3 -> Root5 [label="WhenFalse"]
Root6 [shape=record label="{BLOCK #Root6|1# LiteralOperation / LiteralExpressionSyntax: \"No zero\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"No zero\"|##########}"]
Root5 -> Root6 [label="Else"]
}
Root7 [shape=record label="{BLOCK #Root7|## BranchValue ##|0# ObjectCreationOperation / SwitchExpressionSyntax: tuple switch\n        \{\n            (0, _) =\> \"First is zero\",\n            (_, 0) =\> \"Second is zero\",\n            _ =\> \"No zero\"\n        \}|##########}"]
Root5 -> Root7 [label="WhenFalse"]
Root7 -> NoDestinationRoot7 [label="Throw"]
Root8 [shape=record label="{BLOCK #Root8|## BranchValue ##|0# FlowCaptureReferenceOperation / SwitchExpressionSyntax: tuple switch\n        \{\n            (0, _) =\> \"First is zero\",\n            (_, 0) =\> \"Second is zero\",\n            _ =\> \"No zero\"\n        \}|##########}"]
Root2 -> Root8
Root4 -> Root8
Root6 -> Root8
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root9 [shape=record label="{EXIT #Root9}"]
Root8 -> Root9 [label="Return"]
}
}
