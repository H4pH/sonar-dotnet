// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22TuplePattern%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.TuplePattern%22%20%7B%0Alabel%20%3D%20%22Sonar.TuplePattern%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ASwitchExpressionArm%7CIdentifierNameSyntax%3A%20tuple%7CRecursivePatternSyntax%3A%20(0%2C%20_)%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22First%20is%20zero%5C%22%7D%22%5D%0D%0A1%20-%3E%203%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ASwitchExpressionArm%7CIdentifierNameSyntax%3A%20tuple%7CRecursivePatternSyntax%3A%20(_%2C%200)%7D%22%5D%0D%0A2%20-%3E%204%20%5Blabel%3D%22True%22%5D%0D%0A2%20-%3E%205%20%5Blabel%3D%22False%22%5D%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22Second%20is%20zero%5C%22%7D%22%5D%0D%0A4%20-%3E%203%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22No%20zero%5C%22%7D%22%5D%0D%0A5%20-%3E%203%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7D%22%5D%0D%0A3%20-%3E%206%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.TuplePattern%22%20%7B%0Alabel%20%3D%20%22Roslyn.TuplePattern%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20tuple%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20tuple%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20tuple%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C2%23%20ConstantPatternOperation%20%2F%20ConstantPatternSyntax%3A%200%7C2%23%20DiscardPatternOperation%20%2F%20DiscardPatternSyntax%3A%20_%7C1%23%20RecursivePatternOperation%20%2F%20RecursivePatternSyntax%3A%20(0%2C%20_)%7C0%23%20IsPatternOperation%20%2F%20SwitchExpressionArmSyntax%3A%20(0%2C%20_)%20%3D%5C%3E%20%5C%22First%20is%20zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22First%20is%20zero%5C%22%7C0%23%20FlowCaptureOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22First%20is%20zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%20%5Blabel%3D%22Else%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20tuple%7C2%23%20DiscardPatternOperation%20%2F%20DiscardPatternSyntax%3A%20_%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C2%23%20ConstantPatternOperation%20%2F%20ConstantPatternSyntax%3A%200%7C1%23%20RecursivePatternOperation%20%2F%20RecursivePatternSyntax%3A%20(_%2C%200)%7C0%23%20IsPatternOperation%20%2F%20SwitchExpressionArmSyntax%3A%20(_%2C%200)%20%3D%5C%3E%20%5C%22Second%20is%20zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R3%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Second%20is%20zero%5C%22%7C0%23%20FlowCaptureOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Second%20is%20zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3%20-%3E%20R4%20%5Blabel%3D%22Else%22%5D%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R5%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20tuple%7C1%23%20DiscardPatternOperation%20%2F%20DiscardPatternSyntax%3A%20_%7C0%23%20IsPatternOperation%20%2F%20SwitchExpressionArmSyntax%3A%20_%20%3D%5C%3E%20%5C%22No%20zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3%20-%3E%20R5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R6%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22No%20zero%5C%22%7C0%23%20FlowCaptureOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22No%20zero%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5%20-%3E%20R6%20%5Blabel%3D%22Else%22%5D%0D%0AR7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R7%7C%23%23%20BranchValue%20%23%23%7C0%23%20ObjectCreationOperation%20%2F%20SwitchExpressionSyntax%3A%20tuple%20switch%5Cn%20%20%20%20%20%20%20%20%5C%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20(0%2C%20_)%20%3D%5C%3E%20%5C%22First%20is%20zero%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20(_%2C%200)%20%3D%5C%3E%20%5C%22Second%20is%20zero%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%5C%3E%20%5C%22No%20zero%5C%22%5Cn%20%20%20%20%20%20%20%20%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5%20-%3E%20R7%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR8%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R8%7C%23%23%20BranchValue%20%23%23%7C0%23%20FlowCaptureReferenceOperation%20%2F%20SwitchExpressionSyntax%3A%20tuple%20switch%5Cn%20%20%20%20%20%20%20%20%5C%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20(0%2C%20_)%20%3D%5C%3E%20%5C%22First%20is%20zero%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20(_%2C%200)%20%3D%5C%3E%20%5C%22Second%20is%20zero%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%5C%3E%20%5C%22No%20zero%5C%22%5Cn%20%20%20%20%20%20%20%20%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R8%0D%0AR4%20-%3E%20R8%0D%0AR6%20-%3E%20R8%0D%0AR9%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R9%7D%22%5D%0D%0AR8%20-%3E%20R9%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string TuplePattern((int, int) tuple)
    {
        return tuple switch
        {
            (0, _) => "First is zero",
            (_, 0) => "Second is zero",
            _ => "No zero"
        };
    }
*/

digraph "TuplePattern" {
subgraph "cluster_Sonar.TuplePattern" {
label = "Sonar.TuplePattern"
0 [shape=record label="{BINARY:SwitchExpressionArm|IdentifierNameSyntax: tuple|RecursivePatternSyntax: (0, _)}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"First is zero\"}"]
1 -> 3
2 [shape=record label="{BINARY:SwitchExpressionArm|IdentifierNameSyntax: tuple|RecursivePatternSyntax: (_, 0)}"]
2 -> 4 [label="True"]
2 -> 5 [label="False"]
4 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Second is zero\"}"]
4 -> 3
5 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"No zero\"}"]
5 -> 3
3 [shape=record label="{JUMP:ReturnStatement}"]
3 -> 6
6 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.TuplePattern" {
label = "Roslyn.TuplePattern"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# ParameterReferenceOperation / IdentifierNameSyntax: tuple|0# FlowCaptureOperation / IdentifierNameSyntax: tuple|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: tuple|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ConstantPatternOperation / ConstantPatternSyntax: 0|2# DiscardPatternOperation / DiscardPatternSyntax: _|1# RecursivePatternOperation / RecursivePatternSyntax: (0, _)|0# IsPatternOperation / SwitchExpressionArmSyntax: (0, _) =\> \"First is zero\"|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|1# LiteralOperation / LiteralExpressionSyntax: \"First is zero\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"First is zero\"|##########}"]
R1 -> R2 [label="Else"]
R3 [shape=record label="{BLOCK #R3|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: tuple|2# DiscardPatternOperation / DiscardPatternSyntax: _|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ConstantPatternOperation / ConstantPatternSyntax: 0|1# RecursivePatternOperation / RecursivePatternSyntax: (_, 0)|0# IsPatternOperation / SwitchExpressionArmSyntax: (_, 0) =\> \"Second is zero\"|##########}"]
R1 -> R3 [label="WhenFalse"]
R4 [shape=record label="{BLOCK #R4|1# LiteralOperation / LiteralExpressionSyntax: \"Second is zero\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"Second is zero\"|##########}"]
R3 -> R4 [label="Else"]
R5 [shape=record label="{BLOCK #R5|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: tuple|1# DiscardPatternOperation / DiscardPatternSyntax: _|0# IsPatternOperation / SwitchExpressionArmSyntax: _ =\> \"No zero\"|##########}"]
R3 -> R5 [label="WhenFalse"]
R6 [shape=record label="{BLOCK #R6|1# LiteralOperation / LiteralExpressionSyntax: \"No zero\"|0# FlowCaptureOperation / LiteralExpressionSyntax: \"No zero\"|##########}"]
R5 -> R6 [label="Else"]
R7 [shape=record label="{BLOCK #R7|## BranchValue ##|0# ObjectCreationOperation / SwitchExpressionSyntax: tuple switch\n        \{\n            (0, _) =\> \"First is zero\",\n            (_, 0) =\> \"Second is zero\",\n            _ =\> \"No zero\"\n        \}|##########}"]
R5 -> R7 [label="WhenFalse"]
R8 [shape=record label="{BLOCK #R8|## BranchValue ##|0# FlowCaptureReferenceOperation / SwitchExpressionSyntax: tuple switch\n        \{\n            (0, _) =\> \"First is zero\",\n            (_, 0) =\> \"Second is zero\",\n            _ =\> \"No zero\"\n        \}|##########}"]
R2 -> R8
R4 -> R8
R6 -> R8
R9 [shape=record label="{EXIT #R9}"]
R8 -> R9
}
}
