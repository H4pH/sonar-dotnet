// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22Deconstruct%22+%7B%0D%0Asubgraph+%22cluster_Sonar.Deconstruct%22+%7B%0Alabel+%3D+%22Sonar.Deconstruct%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A+A%7CAssignmentExpressionSyntax%3A+a+%3D+A%7CIdentifierNameSyntax%3A+B%7CAssignmentExpressionSyntax%3A+b+%3D+B%7D%22%5D%0D%0A0+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.Deconstruct%22+%7B%0Alabel+%3D+%22Roslyn.Deconstruct%22%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C2%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+a%7C3%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+A%7C2%23+FieldReferenceOperation+%2F+IdentifierNameSyntax%3A+A%7C1%23+SimpleAssignmentOperation+%2F+AssignmentExpressionSyntax%3A+a+%3D+A%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+a+%3D+A%3B%7C%23%23%23%23%23%23%23%23%23%23%7C2%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+b%7C3%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+B%7C2%23+FieldReferenceOperation+%2F+IdentifierNameSyntax%3A+B%7C1%23+SimpleAssignmentOperation+%2F+AssignmentExpressionSyntax%3A+b+%3D+B%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+b+%3D+B%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root2%7D%22%5D%0D%0ARoot1+-%3E+Root2%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void Deconstruct(out int a, out int b)
    {
        a = A;
        b = B;
    }
*/

digraph "Deconstruct" {
subgraph "cluster_Sonar.Deconstruct" {
label = "Sonar.Deconstruct"
0 [shape=record label="{SIMPLE|IdentifierNameSyntax: A|AssignmentExpressionSyntax: a = A|IdentifierNameSyntax: B|AssignmentExpressionSyntax: b = B}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.Deconstruct" {
label = "Roslyn.Deconstruct"
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|2# ParameterReferenceOperation / IdentifierNameSyntax: a|3# InstanceReferenceOperation / IdentifierNameSyntax: A|2# FieldReferenceOperation / IdentifierNameSyntax: A|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: a = A|0# ExpressionStatementOperation / ExpressionStatementSyntax: a = A;|##########|2# ParameterReferenceOperation / IdentifierNameSyntax: b|3# InstanceReferenceOperation / IdentifierNameSyntax: B|2# FieldReferenceOperation / IdentifierNameSyntax: B|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: b = B|0# ExpressionStatementOperation / ExpressionStatementSyntax: b = B;|##########}"]
Root0 -> Root1
Root2 [shape=record label="{EXIT #Root2}"]
Root1 -> Root2
}
}
