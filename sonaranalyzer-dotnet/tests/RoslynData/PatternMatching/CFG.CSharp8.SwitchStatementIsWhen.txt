// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22SwitchStatementIsWhen%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.SwitchStatementIsWhen%22%20%7B%0Alabel%20%3D%20%22Sonar.SwitchStatementIsWhen%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ASwitchStatement%7CIdentifierNameSyntax%3A%20arg%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A%20TypeA%20a%7D%22%5D%0D%0A1%20-%3E%202%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A%20a%7CMemberAccessExpressionSyntax%3A%20a.ValueA%7CLiteralExpressionSyntax%3A%200%7CBinaryExpressionSyntax%3A%20a.ValueA%20%3D%3D%200%7D%22%5D%0D%0A2%20-%3E%204%20%5Blabel%3D%22True%22%5D%0D%0A2%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20a%7CMemberAccessExpressionSyntax%3A%20a.ToString%7CInvocationExpressionSyntax%3A%20a.ToString()%7D%22%5D%0D%0A4%20-%3E%205%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A%20TypeB%20b%7D%22%5D%0D%0A3%20-%3E%206%20%5Blabel%3D%22True%22%5D%0D%0A3%20-%3E%207%20%5Blabel%3D%22False%22%5D%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A%20b%7CMemberAccessExpressionSyntax%3A%20b.ValueB%7CLiteralExpressionSyntax%3A%200%7CBinaryExpressionSyntax%3A%20b.ValueB%20%3D%3D%200%7D%22%5D%0D%0A6%20-%3E%208%20%5Blabel%3D%22True%22%5D%0D%0A6%20-%3E%207%20%5Blabel%3D%22False%22%5D%0D%0A8%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20b%7CMemberAccessExpressionSyntax%3A%20b.ToString%7CInvocationExpressionSyntax%3A%20b.ToString()%7D%22%5D%0D%0A8%20-%3E%205%0D%0A7%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A%20TypeC%20c%7D%22%5D%0D%0A7%20-%3E%209%20%5Blabel%3D%22True%22%5D%0D%0A7%20-%3E%2010%20%5Blabel%3D%22False%22%5D%0D%0A9%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A%20c%7CMemberAccessExpressionSyntax%3A%20c.ValueC%7CLiteralExpressionSyntax%3A%200%7CBinaryExpressionSyntax%3A%20c.ValueC%20%3D%3D%200%7D%22%5D%0D%0A9%20-%3E%2011%20%5Blabel%3D%22True%22%5D%0D%0A9%20-%3E%2010%20%5Blabel%3D%22False%22%5D%0D%0A11%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20c%7CMemberAccessExpressionSyntax%3A%20c.ToString%7CInvocationExpressionSyntax%3A%20c.ToString()%7D%22%5D%0D%0A11%20-%3E%205%0D%0A10%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A%20null%7D%22%5D%0D%0A10%20-%3E%205%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.SwitchStatementIsWhen%22%20%7B%0Alabel%20%3D%20%22Roslyn.SwitchStatementIsWhen%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeA%20a%7C0%23%20IsPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeA%20a%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C%23%23%20BranchValue%20%23%23%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C1%23%20FieldReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20a.ValueA%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20a.ValueA%20%3D%3D%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R3%20%5Blabel%3D%22Else%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C0%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20a.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3%20-%3E%20R4%20%5Blabel%3D%22Else%22%5D%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R5%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeB%20b%7C0%23%20IsPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeB%20b%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR3%20-%3E%20R5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R6%7C%23%23%20BranchValue%20%23%23%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20b%7C1%23%20FieldReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20b.ValueB%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20b.ValueB%20%3D%3D%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5%20-%3E%20R6%20%5Blabel%3D%22Else%22%5D%0D%0AR7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R7%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20b%7C0%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20b.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR6%20-%3E%20R7%20%5Blabel%3D%22Else%22%5D%0D%0AR8%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R8%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeC%20c%7C0%23%20IsPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeC%20c%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5%20-%3E%20R8%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR6%20-%3E%20R8%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR9%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R9%7C%23%23%20BranchValue%20%23%23%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20c%7C1%23%20FieldReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20c.ValueC%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20c.ValueC%20%3D%3D%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR8%20-%3E%20R9%20%5Blabel%3D%22Else%22%5D%0D%0AR10%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R10%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20c%7C0%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20c.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR9%20-%3E%20R10%20%5Blabel%3D%22Else%22%5D%0D%0AR11%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R11%7C%23%23%20BranchValue%20%23%23%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C0%23%20ConversionOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR8%20-%3E%20R11%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR9%20-%3E%20R11%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR12%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R12%7D%22%5D%0D%0AR4%20-%3E%20R12%0D%0AR7%20-%3E%20R12%0D%0AR10%20-%3E%20R12%0D%0AR11%20-%3E%20R12%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string SwitchStatementIsWhen(object arg)
    {
        switch (arg)
        {
            case TypeA a when a.ValueA == 0:
                return a.ToString();
            case TypeB b when b.ValueB == 0:
                return b.ToString();
            case TypeC c when c.ValueC == 0:
                return c.ToString();
            default:
                return null;
        }
    }
*/

digraph "SwitchStatementIsWhen" {
subgraph "cluster_Sonar.SwitchStatementIsWhen" {
label = "Sonar.SwitchStatementIsWhen"
0 [shape=record label="{BRANCH:SwitchStatement|IdentifierNameSyntax: arg}"]
0 -> 1
1 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeA a}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: a|MemberAccessExpressionSyntax: a.ValueA|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: a.ValueA == 0}"]
2 -> 4 [label="True"]
2 -> 3 [label="False"]
4 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: a|MemberAccessExpressionSyntax: a.ToString|InvocationExpressionSyntax: a.ToString()}"]
4 -> 5
3 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeB b}"]
3 -> 6 [label="True"]
3 -> 7 [label="False"]
6 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: b|MemberAccessExpressionSyntax: b.ValueB|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: b.ValueB == 0}"]
6 -> 8 [label="True"]
6 -> 7 [label="False"]
8 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: b|MemberAccessExpressionSyntax: b.ToString|InvocationExpressionSyntax: b.ToString()}"]
8 -> 5
7 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeC c}"]
7 -> 9 [label="True"]
7 -> 10 [label="False"]
9 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: c|MemberAccessExpressionSyntax: c.ValueC|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: c.ValueC == 0}"]
9 -> 11 [label="True"]
9 -> 10 [label="False"]
11 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: c|MemberAccessExpressionSyntax: c.ToString|InvocationExpressionSyntax: c.ToString()}"]
11 -> 5
10 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: null}"]
10 -> 5
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.SwitchStatementIsWhen" {
label = "Roslyn.SwitchStatementIsWhen"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# ParameterReferenceOperation / IdentifierNameSyntax: arg|0# FlowCaptureOperation / IdentifierNameSyntax: arg|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeA a|0# IsPatternOperation / DeclarationPatternSyntax: TypeA a|##########}"]
R1 -> R2
R3 [shape=record label="{BLOCK #R3|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: a|1# FieldReferenceOperation / MemberAccessExpressionSyntax: a.ValueA|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: a.ValueA == 0|##########}"]
R2 -> R3 [label="Else"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: a|0# InvocationOperation / InvocationExpressionSyntax: a.ToString()|##########}"]
R3 -> R4 [label="Else"]
R5 [shape=record label="{BLOCK #R5|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeB b|0# IsPatternOperation / DeclarationPatternSyntax: TypeB b|##########}"]
R2 -> R5 [label="WhenFalse"]
R3 -> R5 [label="WhenFalse"]
R6 [shape=record label="{BLOCK #R6|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: b|1# FieldReferenceOperation / MemberAccessExpressionSyntax: b.ValueB|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: b.ValueB == 0|##########}"]
R5 -> R6 [label="Else"]
R7 [shape=record label="{BLOCK #R7|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: b|0# InvocationOperation / InvocationExpressionSyntax: b.ToString()|##########}"]
R6 -> R7 [label="Else"]
R8 [shape=record label="{BLOCK #R8|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeC c|0# IsPatternOperation / DeclarationPatternSyntax: TypeC c|##########}"]
R5 -> R8 [label="WhenFalse"]
R6 -> R8 [label="WhenFalse"]
R9 [shape=record label="{BLOCK #R9|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: c|1# FieldReferenceOperation / MemberAccessExpressionSyntax: c.ValueC|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: c.ValueC == 0|##########}"]
R8 -> R9 [label="Else"]
R10 [shape=record label="{BLOCK #R10|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: c|0# InvocationOperation / InvocationExpressionSyntax: c.ToString()|##########}"]
R9 -> R10 [label="Else"]
R11 [shape=record label="{BLOCK #R11|## BranchValue ##|1# LiteralOperation / LiteralExpressionSyntax: null|0# ConversionOperation / LiteralExpressionSyntax: null|##########}"]
R8 -> R11 [label="WhenFalse"]
R9 -> R11 [label="WhenFalse"]
R12 [shape=record label="{EXIT #R12}"]
R4 -> R12
R7 -> R12
R10 -> R12
R11 -> R12
}
}
