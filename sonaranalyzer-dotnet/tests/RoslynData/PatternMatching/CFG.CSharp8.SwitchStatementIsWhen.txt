// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22SwitchStatementIsWhen%22+%7B%0D%0Asubgraph+%22cluster_Sonar.SwitchStatementIsWhen%22+%7B%0Alabel+%3D+%22Sonar.SwitchStatementIsWhen%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBRANCH%3ASwitchStatement%7CIdentifierNameSyntax%3A+arg%7D%22%5D%0D%0A0+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A+TypeA+a%7D%22%5D%0D%0A1+-%3E+2+%5Blabel%3D%22True%22%5D%0D%0A1+-%3E+3+%5Blabel%3D%22False%22%5D%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A+a%7CMemberAccessExpressionSyntax%3A+a.ValueA%7CLiteralExpressionSyntax%3A+0%7CBinaryExpressionSyntax%3A+a.ValueA+%3D%3D+0%7D%22%5D%0D%0A2+-%3E+4+%5Blabel%3D%22True%22%5D%0D%0A2+-%3E+3+%5Blabel%3D%22False%22%5D%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A+a%7CMemberAccessExpressionSyntax%3A+a.ToString%7CInvocationExpressionSyntax%3A+a.ToString()%7D%22%5D%0D%0A4+-%3E+5%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A+TypeB+b%7D%22%5D%0D%0A3+-%3E+6+%5Blabel%3D%22True%22%5D%0D%0A3+-%3E+7+%5Blabel%3D%22False%22%5D%0D%0A6+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A+b%7CMemberAccessExpressionSyntax%3A+b.ValueB%7CLiteralExpressionSyntax%3A+0%7CBinaryExpressionSyntax%3A+b.ValueB+%3D%3D+0%7D%22%5D%0D%0A6+-%3E+8+%5Blabel%3D%22True%22%5D%0D%0A6+-%3E+7+%5Blabel%3D%22False%22%5D%0D%0A8+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A+b%7CMemberAccessExpressionSyntax%3A+b.ToString%7CInvocationExpressionSyntax%3A+b.ToString()%7D%22%5D%0D%0A8+-%3E+5%0D%0A7+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A+TypeC+c%7D%22%5D%0D%0A7+-%3E+9+%5Blabel%3D%22True%22%5D%0D%0A7+-%3E+10+%5Blabel%3D%22False%22%5D%0D%0A9+%5Bshape%3Drecord+label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A+c%7CMemberAccessExpressionSyntax%3A+c.ValueC%7CLiteralExpressionSyntax%3A+0%7CBinaryExpressionSyntax%3A+c.ValueC+%3D%3D+0%7D%22%5D%0D%0A9+-%3E+11+%5Blabel%3D%22True%22%5D%0D%0A9+-%3E+10+%5Blabel%3D%22False%22%5D%0D%0A11+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A+c%7CMemberAccessExpressionSyntax%3A+c.ToString%7CInvocationExpressionSyntax%3A+c.ToString()%7D%22%5D%0D%0A11+-%3E+5%0D%0A10+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A+null%7D%22%5D%0D%0A10+-%3E+5%0D%0A5+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.SwitchStatementIsWhen%22+%7B%0Alabel+%3D+%22Roslyn.SwitchStatementIsWhen%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0AR2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R2%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+arg%7C1%23+DeclarationPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeA+a%7C0%23+IsPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeA+a%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1+-%3E+R2%0D%0AR3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R3%7C%23%23+BranchValue+%23%23%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+a%7C1%23+FieldReferenceOperation+%2F+MemberAccessExpressionSyntax%3A+a.ValueA%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C0%23+BinaryOperation+%2F+BinaryExpressionSyntax%3A+a.ValueA+%3D%3D+0%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2+-%3E+R3+%5Blabel%3D%22Else%22%5D%0D%0AR4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R4%7C%23%23+BranchValue+%23%23%7C1%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+a%7C0%23+InvocationOperation+%2F+InvocationExpressionSyntax%3A+a.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3+-%3E+R4+%5Blabel%3D%22Else%22%5D%0D%0AR5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R5%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+arg%7C1%23+DeclarationPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeB+b%7C0%23+IsPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeB+b%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2+-%3E+R5+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR3+-%3E+R5+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR6+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R6%7C%23%23+BranchValue+%23%23%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+b%7C1%23+FieldReferenceOperation+%2F+MemberAccessExpressionSyntax%3A+b.ValueB%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C0%23+BinaryOperation+%2F+BinaryExpressionSyntax%3A+b.ValueB+%3D%3D+0%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5+-%3E+R6+%5Blabel%3D%22Else%22%5D%0D%0AR7+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R7%7C%23%23+BranchValue+%23%23%7C1%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+b%7C0%23+InvocationOperation+%2F+InvocationExpressionSyntax%3A+b.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR6+-%3E+R7+%5Blabel%3D%22Else%22%5D%0D%0AR8+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R8%7C%23%23+BranchValue+%23%23%7C1%23+FlowCaptureReferenceOperation+%2F+IdentifierNameSyntax%3A+arg%7C1%23+DeclarationPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeC+c%7C0%23+IsPatternOperation+%2F+DeclarationPatternSyntax%3A+TypeC+c%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5+-%3E+R8+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR6+-%3E+R8+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR9+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R9%7C%23%23+BranchValue+%23%23%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+c%7C1%23+FieldReferenceOperation+%2F+MemberAccessExpressionSyntax%3A+c.ValueC%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C0%23+BinaryOperation+%2F+BinaryExpressionSyntax%3A+c.ValueC+%3D%3D+0%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR8+-%3E+R9+%5Blabel%3D%22Else%22%5D%0D%0AR10+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R10%7C%23%23+BranchValue+%23%23%7C1%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+c%7C0%23+InvocationOperation+%2F+InvocationExpressionSyntax%3A+c.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR9+-%3E+R10+%5Blabel%3D%22Else%22%5D%0D%0AR11+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R11%7C%23%23+BranchValue+%23%23%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+null%7C0%23+ConversionOperation+%2F+LiteralExpressionSyntax%3A+null%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR8+-%3E+R11+%5Blabel%3D%22WhenFalse%22%5D%0D%0AR9+-%3E+R11+%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0AR1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R1%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+arg%7C0%23+FlowCaptureOperation+%2F+IdentifierNameSyntax%3A+arg%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0+-%3E+R1%0D%0A%7D%0D%0AR0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23R0%7D%22%5D%0D%0AR12+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23R12%7D%22%5D%0D%0AR4+-%3E+R12%0D%0AR7+-%3E+R12%0D%0AR10+-%3E+R12%0D%0AR11+-%3E+R12%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string SwitchStatementIsWhen(object arg)
    {
        switch (arg)
        {
            case TypeA a when a.ValueA == 0:
                return a.ToString();
            case TypeB b when b.ValueB == 0:
                return b.ToString();
            case TypeC c when c.ValueC == 0:
                return c.ToString();
            default:
                return null;
        }
    }
*/

digraph "SwitchStatementIsWhen" {
subgraph "cluster_Sonar.SwitchStatementIsWhen" {
label = "Sonar.SwitchStatementIsWhen"
0 [shape=record label="{BRANCH:SwitchStatement|IdentifierNameSyntax: arg}"]
0 -> 1
1 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeA a}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: a|MemberAccessExpressionSyntax: a.ValueA|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: a.ValueA == 0}"]
2 -> 4 [label="True"]
2 -> 3 [label="False"]
4 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: a|MemberAccessExpressionSyntax: a.ToString|InvocationExpressionSyntax: a.ToString()}"]
4 -> 5
3 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeB b}"]
3 -> 6 [label="True"]
3 -> 7 [label="False"]
6 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: b|MemberAccessExpressionSyntax: b.ValueB|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: b.ValueB == 0}"]
6 -> 8 [label="True"]
6 -> 7 [label="False"]
8 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: b|MemberAccessExpressionSyntax: b.ToString|InvocationExpressionSyntax: b.ToString()}"]
8 -> 5
7 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeC c}"]
7 -> 9 [label="True"]
7 -> 10 [label="False"]
9 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: c|MemberAccessExpressionSyntax: c.ValueC|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: c.ValueC == 0}"]
9 -> 11 [label="True"]
9 -> 10 [label="False"]
11 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: c|MemberAccessExpressionSyntax: c.ToString|InvocationExpressionSyntax: c.ToString()}"]
11 -> 5
10 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: null}"]
10 -> 5
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.SwitchStatementIsWhen" {
label = "Roslyn.SwitchStatementIsWhen"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
R2 [shape=record label="{BLOCK #R2|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeA a|0# IsPatternOperation / DeclarationPatternSyntax: TypeA a|##########}"]
R1 -> R2
R3 [shape=record label="{BLOCK #R3|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: a|1# FieldReferenceOperation / MemberAccessExpressionSyntax: a.ValueA|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: a.ValueA == 0|##########}"]
R2 -> R3 [label="Else"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: a|0# InvocationOperation / InvocationExpressionSyntax: a.ToString()|##########}"]
R3 -> R4 [label="Else"]
R5 [shape=record label="{BLOCK #R5|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeB b|0# IsPatternOperation / DeclarationPatternSyntax: TypeB b|##########}"]
R2 -> R5 [label="WhenFalse"]
R3 -> R5 [label="WhenFalse"]
R6 [shape=record label="{BLOCK #R6|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: b|1# FieldReferenceOperation / MemberAccessExpressionSyntax: b.ValueB|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: b.ValueB == 0|##########}"]
R5 -> R6 [label="Else"]
R7 [shape=record label="{BLOCK #R7|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: b|0# InvocationOperation / InvocationExpressionSyntax: b.ToString()|##########}"]
R6 -> R7 [label="Else"]
R8 [shape=record label="{BLOCK #R8|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeC c|0# IsPatternOperation / DeclarationPatternSyntax: TypeC c|##########}"]
R5 -> R8 [label="WhenFalse"]
R6 -> R8 [label="WhenFalse"]
R9 [shape=record label="{BLOCK #R9|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: c|1# FieldReferenceOperation / MemberAccessExpressionSyntax: c.ValueC|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: c.ValueC == 0|##########}"]
R8 -> R9 [label="Else"]
R10 [shape=record label="{BLOCK #R10|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: c|0# InvocationOperation / InvocationExpressionSyntax: c.ToString()|##########}"]
R9 -> R10 [label="Else"]
R11 [shape=record label="{BLOCK #R11|## BranchValue ##|1# LiteralOperation / LiteralExpressionSyntax: null|0# ConversionOperation / LiteralExpressionSyntax: null|##########}"]
R8 -> R11 [label="WhenFalse"]
R9 -> R11 [label="WhenFalse"]
}
R1 [shape=record label="{BLOCK #R1|1# ParameterReferenceOperation / IdentifierNameSyntax: arg|0# FlowCaptureOperation / IdentifierNameSyntax: arg|##########}"]
R0 -> R1
}
R0 [shape=record label="{ENTRY #R0}"]
R12 [shape=record label="{EXIT #R12}"]
R4 -> R12
R7 -> R12
R10 -> R12
R11 -> R12
}
}
