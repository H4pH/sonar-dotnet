// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22SwitchStatementIsWhen%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.SwitchStatementIsWhen%22%20%7B%0Alabel%20%3D%20%22Sonar.SwitchStatementIsWhen%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ASwitchStatement%7CIdentifierNameSyntax%3A%20arg%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A%20TypeA%20a%7D%22%5D%0D%0A1%20-%3E%202%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A%20a%7CMemberAccessExpressionSyntax%3A%20a.ValueA%7CLiteralExpressionSyntax%3A%200%7CBinaryExpressionSyntax%3A%20a.ValueA%20%3D%3D%200%7D%22%5D%0D%0A2%20-%3E%204%20%5Blabel%3D%22True%22%5D%0D%0A2%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20a%7CMemberAccessExpressionSyntax%3A%20a.ToString%7CInvocationExpressionSyntax%3A%20a.ToString()%7D%22%5D%0D%0A4%20-%3E%205%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A%20TypeB%20b%7D%22%5D%0D%0A3%20-%3E%206%20%5Blabel%3D%22True%22%5D%0D%0A3%20-%3E%207%20%5Blabel%3D%22False%22%5D%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A%20b%7CMemberAccessExpressionSyntax%3A%20b.ValueB%7CLiteralExpressionSyntax%3A%200%7CBinaryExpressionSyntax%3A%20b.ValueB%20%3D%3D%200%7D%22%5D%0D%0A6%20-%3E%208%20%5Blabel%3D%22True%22%5D%0D%0A6%20-%3E%207%20%5Blabel%3D%22False%22%5D%0D%0A8%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20b%7CMemberAccessExpressionSyntax%3A%20b.ToString%7CInvocationExpressionSyntax%3A%20b.ToString()%7D%22%5D%0D%0A8%20-%3E%205%0D%0A7%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACasePatternSwitchLabel%7CDeclarationPatternSyntax%3A%20TypeC%20c%7D%22%5D%0D%0A7%20-%3E%209%20%5Blabel%3D%22True%22%5D%0D%0A7%20-%3E%2010%20%5Blabel%3D%22False%22%5D%0D%0A9%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A%20c%7CMemberAccessExpressionSyntax%3A%20c.ValueC%7CLiteralExpressionSyntax%3A%200%7CBinaryExpressionSyntax%3A%20c.ValueC%20%3D%3D%200%7D%22%5D%0D%0A9%20-%3E%2011%20%5Blabel%3D%22True%22%5D%0D%0A9%20-%3E%2010%20%5Blabel%3D%22False%22%5D%0D%0A11%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20c%7CMemberAccessExpressionSyntax%3A%20c.ToString%7CInvocationExpressionSyntax%3A%20c.ToString()%7D%22%5D%0D%0A11%20-%3E%205%0D%0A10%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A%20null%7D%22%5D%0D%0A10%20-%3E%205%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.SwitchStatementIsWhen%22%20%7B%0Alabel%20%3D%20%22Roslyn.SwitchStatementIsWhen%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeA%20a%7C0%23%20IsPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeA%20a%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C%23%23%20BranchValue%20%23%23%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C1%23%20FieldReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20a.ValueA%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20a.ValueA%20%3D%3D%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root3%20%5Blabel%3D%22Else%22%5D%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C0%23%20InvocationOperation.ToString%20%2F%20InvocationExpressionSyntax%3A%20a.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3%20-%3E%20Root4%20%5Blabel%3D%22Else%22%5D%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root5%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeB%20b%7C0%23%20IsPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeB%20b%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot3%20-%3E%20Root5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root6%7C%23%23%20BranchValue%20%23%23%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20b%7C1%23%20FieldReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20b.ValueB%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20b.ValueB%20%3D%3D%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5%20-%3E%20Root6%20%5Blabel%3D%22Else%22%5D%0D%0ARoot7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root7%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20b%7C0%23%20InvocationOperation.ToString%20%2F%20InvocationExpressionSyntax%3A%20b.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot6%20-%3E%20Root7%20%5Blabel%3D%22Else%22%5D%0D%0ARoot8%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root8%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeC%20c%7C0%23%20IsPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20TypeC%20c%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5%20-%3E%20Root8%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot6%20-%3E%20Root8%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot9%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root9%7C%23%23%20BranchValue%20%23%23%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20c%7C1%23%20FieldReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20c.ValueC%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20c.ValueC%20%3D%3D%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot8%20-%3E%20Root9%20%5Blabel%3D%22Else%22%5D%0D%0ARoot10%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root10%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20c%7C0%23%20InvocationOperation.ToString%20%2F%20InvocationExpressionSyntax%3A%20c.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot9%20-%3E%20Root10%20%5Blabel%3D%22Else%22%5D%0D%0ARoot11%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root11%7C%23%23%20BranchValue%20%23%23%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C0%23%20ConversionOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot8%20-%3E%20Root11%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot9%20-%3E%20Root11%20%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C0%23%20FlowCaptureOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot12%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root12%7D%22%5D%0D%0ARoot4%20-%3E%20Root12%20%5Blabel%3D%22Return%22%5D%0D%0ARoot7%20-%3E%20Root12%20%5Blabel%3D%22Return%22%5D%0D%0ARoot10%20-%3E%20Root12%20%5Blabel%3D%22Return%22%5D%0D%0ARoot11%20-%3E%20Root12%20%5Blabel%3D%22Return%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string SwitchStatementIsWhen(object arg)
    {
        switch (arg)
        {
            case TypeA a when a.ValueA == 0:
                return a.ToString();
            case TypeB b when b.ValueB == 0:
                return b.ToString();
            case TypeC c when c.ValueC == 0:
                return c.ToString();
            default:
                return null;
        }
    }
*/

digraph "SwitchStatementIsWhen" {
subgraph "cluster_Sonar.SwitchStatementIsWhen" {
label = "Sonar.SwitchStatementIsWhen"
0 [shape=record label="{BRANCH:SwitchStatement|IdentifierNameSyntax: arg}"]
0 -> 1
1 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeA a}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: a|MemberAccessExpressionSyntax: a.ValueA|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: a.ValueA == 0}"]
2 -> 4 [label="True"]
2 -> 3 [label="False"]
4 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: a|MemberAccessExpressionSyntax: a.ToString|InvocationExpressionSyntax: a.ToString()}"]
4 -> 5
3 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeB b}"]
3 -> 6 [label="True"]
3 -> 7 [label="False"]
6 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: b|MemberAccessExpressionSyntax: b.ValueB|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: b.ValueB == 0}"]
6 -> 8 [label="True"]
6 -> 7 [label="False"]
8 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: b|MemberAccessExpressionSyntax: b.ToString|InvocationExpressionSyntax: b.ToString()}"]
8 -> 5
7 [shape=record label="{BINARY:CasePatternSwitchLabel|DeclarationPatternSyntax: TypeC c}"]
7 -> 9 [label="True"]
7 -> 10 [label="False"]
9 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: c|MemberAccessExpressionSyntax: c.ValueC|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: c.ValueC == 0}"]
9 -> 11 [label="True"]
9 -> 10 [label="False"]
11 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: c|MemberAccessExpressionSyntax: c.ToString|InvocationExpressionSyntax: c.ToString()}"]
11 -> 5
10 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: null}"]
10 -> 5
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.SwitchStatementIsWhen" {
label = "Roslyn.SwitchStatementIsWhen"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root2 [shape=record label="{BLOCK #Root2|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeA a|0# IsPatternOperation / DeclarationPatternSyntax: TypeA a|##########}"]
Root1 -> Root2
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: a|1# FieldReferenceOperation / MemberAccessExpressionSyntax: a.ValueA|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: a.ValueA == 0|##########}"]
Root2 -> Root3 [label="Else"]
Root4 [shape=record label="{BLOCK #Root4|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: a|0# InvocationOperation.ToString / InvocationExpressionSyntax: a.ToString()|##########}"]
Root3 -> Root4 [label="Else"]
Root5 [shape=record label="{BLOCK #Root5|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeB b|0# IsPatternOperation / DeclarationPatternSyntax: TypeB b|##########}"]
Root2 -> Root5 [label="WhenFalse"]
Root3 -> Root5 [label="WhenFalse"]
Root6 [shape=record label="{BLOCK #Root6|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: b|1# FieldReferenceOperation / MemberAccessExpressionSyntax: b.ValueB|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: b.ValueB == 0|##########}"]
Root5 -> Root6 [label="Else"]
Root7 [shape=record label="{BLOCK #Root7|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: b|0# InvocationOperation.ToString / InvocationExpressionSyntax: b.ToString()|##########}"]
Root6 -> Root7 [label="Else"]
Root8 [shape=record label="{BLOCK #Root8|## BranchValue ##|1# FlowCaptureReferenceOperation / IdentifierNameSyntax: arg|1# DeclarationPatternOperation / DeclarationPatternSyntax: TypeC c|0# IsPatternOperation / DeclarationPatternSyntax: TypeC c|##########}"]
Root5 -> Root8 [label="WhenFalse"]
Root6 -> Root8 [label="WhenFalse"]
Root9 [shape=record label="{BLOCK #Root9|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: c|1# FieldReferenceOperation / MemberAccessExpressionSyntax: c.ValueC|1# LiteralOperation / LiteralExpressionSyntax: 0|0# BinaryOperation / BinaryExpressionSyntax: c.ValueC == 0|##########}"]
Root8 -> Root9 [label="Else"]
Root10 [shape=record label="{BLOCK #Root10|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: c|0# InvocationOperation.ToString / InvocationExpressionSyntax: c.ToString()|##########}"]
Root9 -> Root10 [label="Else"]
Root11 [shape=record label="{BLOCK #Root11|## BranchValue ##|1# LiteralOperation / LiteralExpressionSyntax: null|0# ConversionOperation / LiteralExpressionSyntax: null|##########}"]
Root8 -> Root11 [label="WhenFalse"]
Root9 -> Root11 [label="WhenFalse"]
}
Root1 [shape=record label="{BLOCK #Root1|1# ParameterReferenceOperation / IdentifierNameSyntax: arg|0# FlowCaptureOperation / IdentifierNameSyntax: arg|##########}"]
Root0 -> Root1
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root12 [shape=record label="{EXIT #Root12}"]
Root4 -> Root12 [label="Return"]
Root7 -> Root12 [label="Return"]
Root10 -> Root12 [label="Return"]
Root11 -> Root12 [label="Return"]
}
}
