// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22IsType%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.IsType%22%20%7B%0Alabel%20%3D%20%22Sonar.IsType%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ALogicalAndExpression%7CIdentifierNameSyntax%3A%20a%7CIsPatternExpressionSyntax%3A%20a%20is%20string%20str%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%7CIdentifierNameSyntax%3A%20str%7CMemberAccessExpressionSyntax%3A%20str.Length%7CLiteralExpressionSyntax%3A%200%7CBinaryExpressionSyntax%3A%20str.Length%20%5C%3E%200%7D%22%5D%0D%0A1%20-%3E%202%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CVariableDeclaratorSyntax%3A%20ret%20%3D%20a%20is%20string%20str%20%26%26%20str.Length%20%5C%3E%200%7D%22%5D%0D%0A2%20-%3E%203%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.IsType%22%20%7B%0Alabel%20%3D%20%22Roslyn.IsType%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C%23%23%20BranchValue%20%23%23%7C1%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C1%23%20DeclarationPatternOperation%20%2F%20DeclarationPatternSyntax%3A%20string%20str%7C0%23%20IsPatternOperation%20%2F%20IsPatternExpressionSyntax%3A%20a%20is%20string%20str%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C3%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20str%7C2%23%20PropertyReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20str.Length%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C1%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20str.Length%20%5C%3E%200%7C0%23%20FlowCaptureOperation%20%2F%20BinaryExpressionSyntax%3A%20str.Length%20%5C%3E%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%20%5Blabel%3D%22Else%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C1%23%20LiteralOperation%20%2F%20IsPatternExpressionSyntax%3A%20a%20is%20string%20str%7C0%23%20FlowCaptureOperation%20%2F%20IsPatternExpressionSyntax%3A%20a%20is%20string%20str%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R3%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20a%20is%20string%20str%20%26%26%20str.Length%20%5C%3E%200%7C1%23%20FlowCaptureReferenceOperation%20%2F%20BinaryExpressionSyntax%3A%20a%20is%20string%20str%20%26%26%20str.Length%20%5C%3E%200%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20ret%20%3D%20a%20is%20string%20str%20%26%26%20str.Length%20%5C%3E%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R4%0D%0AR3%20-%3E%20R4%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R5%7D%22%5D%0D%0AR4%20-%3E%20R5%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void IsType(object a)
    {
        var ret = a is string str && str.Length > 0;
    }
*/

digraph "IsType" {
subgraph "cluster_Sonar.IsType" {
label = "Sonar.IsType"
0 [shape=record label="{BINARY:LogicalAndExpression|IdentifierNameSyntax: a|IsPatternExpressionSyntax: a is string str}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{BINARY|IdentifierNameSyntax: str|MemberAccessExpressionSyntax: str.Length|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: str.Length \> 0}"]
1 -> 2
2 [shape=record label="{SIMPLE|VariableDeclaratorSyntax: ret = a is string str && str.Length \> 0}"]
2 -> 3
3 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.IsType" {
label = "Roslyn.IsType"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|## BranchValue ##|1# ParameterReferenceOperation / IdentifierNameSyntax: a|1# DeclarationPatternOperation / DeclarationPatternSyntax: string str|0# IsPatternOperation / IsPatternExpressionSyntax: a is string str|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|3# LocalReferenceOperation / IdentifierNameSyntax: str|2# PropertyReferenceOperation / MemberAccessExpressionSyntax: str.Length|2# LiteralOperation / LiteralExpressionSyntax: 0|1# BinaryOperation / BinaryExpressionSyntax: str.Length \> 0|0# FlowCaptureOperation / BinaryExpressionSyntax: str.Length \> 0|##########}"]
R1 -> R2 [label="Else"]
R3 [shape=record label="{BLOCK #R3|1# LiteralOperation / IsPatternExpressionSyntax: a is string str|0# FlowCaptureOperation / IsPatternExpressionSyntax: a is string str|##########}"]
R1 -> R3 [label="WhenFalse"]
R4 [shape=record label="{BLOCK #R4|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = a is string str && str.Length \> 0|1# FlowCaptureReferenceOperation / BinaryExpressionSyntax: a is string str && str.Length \> 0|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = a is string str && str.Length \> 0|##########}"]
R2 -> R4
R3 -> R4
R5 [shape=record label="{EXIT #R5}"]
R4 -> R5
}
}
