// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22IsType%22+%7B%0D%0Asubgraph+%22cluster_Sonar.IsType%22+%7B%0Alabel+%3D+%22Sonar.IsType%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ALogicalAndExpression%7CIdentifierNameSyntax%3A+a%7CIsPatternExpressionSyntax%3A+a+is+string+str%7D%22%5D%0D%0A0+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A0+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BBINARY%7CIdentifierNameSyntax%3A+str%7CMemberAccessExpressionSyntax%3A+str.Length%7CLiteralExpressionSyntax%3A+0%7CBinaryExpressionSyntax%3A+str.Length+%5C%3E+0%7D%22%5D%0D%0A1+-%3E+2%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CVariableDeclaratorSyntax%3A+ret+%3D+a+is+string+str+%26%26+str.Length+%5C%3E+0%7D%22%5D%0D%0A2+-%3E+3%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.IsType%22+%7B%0Alabel+%3D+%22Roslyn.IsType%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C%23%23+BranchValue+%23%23%7C1%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+a%7C1%23+DeclarationPatternOperation+%2F+DeclarationPatternSyntax%3A+string+str%7C0%23+IsPatternOperation+%2F+IsPatternExpressionSyntax%3A+a+is+string+str%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root2%7C3%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+str%7C2%23+PropertyReferenceOperation+%2F+MemberAccessExpressionSyntax%3A+str.Length%7C2%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C1%23+BinaryOperation+%2F+BinaryExpressionSyntax%3A+str.Length+%5C%3E+0%7C0%23+FlowCaptureOperation+%2F+BinaryExpressionSyntax%3A+str.Length+%5C%3E+0%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root2+%5Blabel%3D%22Else%22%5D%0D%0ARoot3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root3%7C1%23+LiteralOperation+%2F+IsPatternExpressionSyntax%3A+a+is+string+str%7C0%23+FlowCaptureOperation+%2F+IsPatternExpressionSyntax%3A+a+is+string+str%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root3+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root4%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+ret+%3D+a+is+string+str+%26%26+str.Length+%5C%3E+0%7C1%23+FlowCaptureReferenceOperation+%2F+BinaryExpressionSyntax%3A+a+is+string+str+%26%26+str.Length+%5C%3E+0%7C0%23+SimpleAssignmentOperation+%2F+VariableDeclaratorSyntax%3A+ret+%3D+a+is+string+str+%26%26+str.Length+%5C%3E+0%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2+-%3E+Root4%0D%0ARoot3+-%3E+Root4%0D%0A%7D%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot5+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root5%7D%22%5D%0D%0ARoot4+-%3E+Root5%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void IsType(object a)
    {
        var ret = a is string str && str.Length > 0;
    }
*/

digraph "IsType" {
subgraph "cluster_Sonar.IsType" {
label = "Sonar.IsType"
0 [shape=record label="{BINARY:LogicalAndExpression|IdentifierNameSyntax: a|IsPatternExpressionSyntax: a is string str}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{BINARY|IdentifierNameSyntax: str|MemberAccessExpressionSyntax: str.Length|LiteralExpressionSyntax: 0|BinaryExpressionSyntax: str.Length \> 0}"]
1 -> 2
2 [shape=record label="{SIMPLE|VariableDeclaratorSyntax: ret = a is string str && str.Length \> 0}"]
2 -> 3
3 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.IsType" {
label = "Roslyn.IsType"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|1# ParameterReferenceOperation / IdentifierNameSyntax: a|1# DeclarationPatternOperation / DeclarationPatternSyntax: string str|0# IsPatternOperation / IsPatternExpressionSyntax: a is string str|##########}"]
Root0 -> Root1
Root2 [shape=record label="{BLOCK #Root2|3# LocalReferenceOperation / IdentifierNameSyntax: str|2# PropertyReferenceOperation / MemberAccessExpressionSyntax: str.Length|2# LiteralOperation / LiteralExpressionSyntax: 0|1# BinaryOperation / BinaryExpressionSyntax: str.Length \> 0|0# FlowCaptureOperation / BinaryExpressionSyntax: str.Length \> 0|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|1# LiteralOperation / IsPatternExpressionSyntax: a is string str|0# FlowCaptureOperation / IsPatternExpressionSyntax: a is string str|##########}"]
Root1 -> Root3 [label="WhenFalse"]
Root4 [shape=record label="{BLOCK #Root4|1# LocalReferenceOperation / VariableDeclaratorSyntax: ret = a is string str && str.Length \> 0|1# FlowCaptureReferenceOperation / BinaryExpressionSyntax: a is string str && str.Length \> 0|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ret = a is string str && str.Length \> 0|##########}"]
Root2 -> Root4
Root3 -> Root4
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root5 [shape=record label="{EXIT #Root5}"]
Root4 -> Root5
}
}
