// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22UsingThrow%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.UsingThrow%22%20%7B%0Alabel%20%3D%20%22Sonar.UsingThrow%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AUsingStatement%7CObjectCreationExpressionSyntax%3A%20new%20MemoryStream()%7CVariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AThrowStatement%7CIdentifierNameSyntax%3A%20ms%7CMemberAccessExpressionSyntax%3A%20ms.Write%7CLiteralExpressionSyntax%3A%20null%7CLiteralExpressionSyntax%3A%200%7CLiteralExpressionSyntax%3A%200%7CInvocationExpressionSyntax%3A%20ms.Write(null%2C%200%2C%200)%7CLiteralExpressionSyntax%3A%20%5C%22Message%5C%22%7CObjectCreationExpressionSyntax%3A%20new%20Exception(%5C%22Message%5C%22)%7D%22%5D%0D%0A1%20-%3E%202%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BUSING%3AUsingStatement%7CIdentifierNameSyntax%3A%20ms%7CMemberAccessExpressionSyntax%3A%20ms.Write%7CLiteralExpressionSyntax%3A%20null%7CLiteralExpressionSyntax%3A%201%7CLiteralExpressionSyntax%3A%201%7CInvocationExpressionSyntax%3A%20ms.Write(null%2C%201%2C%201)%7D%22%5D%0D%0A3%20-%3E%202%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.UsingThrow%22%20%7B%0Alabel%20%3D%20%22Roslyn.UsingThrow%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C1%23%20ObjectCreationOperation%20%2F%20ObjectCreationExpressionSyntax%3A%20new%20MemoryStream()%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ms%7C4%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C3%23%20ConversionOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20null%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%200%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%200%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20ms.Write(null%2C%200%2C%200)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20ms.Write(null%2C%200%2C%200)%3B%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Message%5C%22%7C1%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20%5C%22Message%5C%22%7C0%23%20ObjectCreationOperation%20%2F%20ObjectCreationExpressionSyntax%3A%20new%20Exception(%5C%22Message%5C%22)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ms%7C4%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C3%23%20ConversionOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20null%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%201%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%201%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20ms.Write(null%2C%201%2C%201)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20ms.Write(null%2C%201%2C%201)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C0%23%20IsNullOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R5%7C2%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C1%23%20ConversionOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C0%23%20InvocationOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20-%3E%20R5%20%5Blabel%3D%22Else%22%5D%0D%0AR6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R6%7D%22%5D%0D%0AR4%20-%3E%20R6%20%5Blabel%3D%22WhenTrue%22%5D%0D%0AR5%20-%3E%20R6%0D%0AR7%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R7%7D%22%5D%0D%0AR3%20-%3E%20R7%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void UsingThrow()
    {
        using (var ms = new MemoryStream())
        {
            ms.Write(null, 0, 0);
            throw new Exception("Message");
            ms.Write(null, 1, 1);
        }
    }
*/

digraph "UsingThrow" {
subgraph "cluster_Sonar.UsingThrow" {
label = "Sonar.UsingThrow"
0 [shape=record label="{JUMP:UsingStatement|ObjectCreationExpressionSyntax: new MemoryStream()|VariableDeclaratorSyntax: ms = new MemoryStream()}"]
0 -> 1
1 [shape=record label="{JUMP:ThrowStatement|IdentifierNameSyntax: ms|MemberAccessExpressionSyntax: ms.Write|LiteralExpressionSyntax: null|LiteralExpressionSyntax: 0|LiteralExpressionSyntax: 0|InvocationExpressionSyntax: ms.Write(null, 0, 0)|LiteralExpressionSyntax: \"Message\"|ObjectCreationExpressionSyntax: new Exception(\"Message\")}"]
1 -> 2
3 [shape=record label="{USING:UsingStatement|IdentifierNameSyntax: ms|MemberAccessExpressionSyntax: ms.Write|LiteralExpressionSyntax: null|LiteralExpressionSyntax: 1|LiteralExpressionSyntax: 1|InvocationExpressionSyntax: ms.Write(null, 1, 1)}"]
3 -> 2
2 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.UsingThrow" {
label = "Roslyn.UsingThrow"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# LocalReferenceOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|1# ObjectCreationOperation / ObjectCreationExpressionSyntax: new MemoryStream()|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|2# LocalReferenceOperation / IdentifierNameSyntax: ms|4# LiteralOperation / LiteralExpressionSyntax: null|3# ConversionOperation / LiteralExpressionSyntax: null|2# ArgumentOperation / ArgumentSyntax: null|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ArgumentOperation / ArgumentSyntax: 0|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ArgumentOperation / ArgumentSyntax: 0|1# InvocationOperation / InvocationExpressionSyntax: ms.Write(null, 0, 0)|0# ExpressionStatementOperation / ExpressionStatementSyntax: ms.Write(null, 0, 0);|##########|## BranchValue ##|2# LiteralOperation / LiteralExpressionSyntax: \"Message\"|1# ArgumentOperation / ArgumentSyntax: \"Message\"|0# ObjectCreationOperation / ObjectCreationExpressionSyntax: new Exception(\"Message\")|##########}"]
R1 -> R2
R3 [shape=record label="{BLOCK #R3|2# LocalReferenceOperation / IdentifierNameSyntax: ms|4# LiteralOperation / LiteralExpressionSyntax: null|3# ConversionOperation / LiteralExpressionSyntax: null|2# ArgumentOperation / ArgumentSyntax: null|3# LiteralOperation / LiteralExpressionSyntax: 1|2# ArgumentOperation / ArgumentSyntax: 1|3# LiteralOperation / LiteralExpressionSyntax: 1|2# ArgumentOperation / ArgumentSyntax: 1|1# InvocationOperation / InvocationExpressionSyntax: ms.Write(null, 1, 1)|0# ExpressionStatementOperation / ExpressionStatementSyntax: ms.Write(null, 1, 1);|##########}"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|1# LocalReferenceOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|0# IsNullOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|##########}"]
R5 [shape=record label="{BLOCK #R5|2# LocalReferenceOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|1# ConversionOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|0# InvocationOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|##########}"]
R4 -> R5 [label="Else"]
R6 [shape=record label="{BLOCK #R6}"]
R4 -> R6 [label="WhenTrue"]
R5 -> R6
R7 [shape=record label="{EXIT #R7}"]
R3 -> R7
}
}
