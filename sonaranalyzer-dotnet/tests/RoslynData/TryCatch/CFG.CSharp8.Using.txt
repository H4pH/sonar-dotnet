// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22Using%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.Using%22%20%7B%0Alabel%20%3D%20%22Sonar.Using%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AUsingStatement%7CObjectCreationExpressionSyntax%3A%20new%20MemoryStream()%7CVariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BUSING%3AUsingStatement%7CIdentifierNameSyntax%3A%20ms%7CMemberAccessExpressionSyntax%3A%20ms.Write%7CLiteralExpressionSyntax%3A%20null%7CLiteralExpressionSyntax%3A%200%7CLiteralExpressionSyntax%3A%200%7CInvocationExpressionSyntax%3A%20ms.Write(null%2C%200%2C%200)%7D%22%5D%0D%0A1%20-%3E%202%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.Using%22%20%7B%0Alabel%20%3D%20%22Roslyn.Using%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0Asubgraph%20%22cluster_TryAndFinally%20region%22%20%7B%0Alabel%20%3D%20%22TryAndFinally%20region%22%0D%0Asubgraph%20%22cluster_Try%20region%22%20%7B%0Alabel%20%3D%20%22Try%20region%22%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ms%7C4%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C3%23%20ConversionOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20null%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%200%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%200%7C1%23%20InvocationOperation.Write%20%2F%20InvocationExpressionSyntax%3A%20ms.Write(null%2C%200%2C%200)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20ms.Write(null%2C%200%2C%200)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%0D%0A%7D%0D%0Asubgraph%20%22cluster_Finally%20region%22%20%7B%0Alabel%20%3D%20%22Finally%20region%22%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C0%23%20IsNullOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C2%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C1%23%20ConversionOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C0%23%20InvocationOperation.Dispose%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3%20-%3E%20Root4%20%5Blabel%3D%22Else%22%5D%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root5%7D%22%5D%0D%0ARoot3%20-%3E%20Root5%20%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot4%20-%3E%20Root5%0D%0ARoot5%20-%3E%20NoDestinationRoot5%20%5Blabel%3D%22StructuredExceptionHandling%22%5D%0D%0A%7D%0D%0A%7D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C1%23%20ObjectCreationOperation%20%2F%20ObjectCreationExpressionSyntax%3A%20new%20MemoryStream()%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20ms%20%3D%20new%20MemoryStream()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot6%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root6%7D%22%5D%0D%0ARoot2%20-%3E%20Root6%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void Using()
    {
        using (var ms = new MemoryStream())
        {
            ms.Write(null, 0, 0);
        }
    }
*/

digraph "Using" {
subgraph "cluster_Sonar.Using" {
label = "Sonar.Using"
0 [shape=record label="{JUMP:UsingStatement|ObjectCreationExpressionSyntax: new MemoryStream()|VariableDeclaratorSyntax: ms = new MemoryStream()}"]
0 -> 1
1 [shape=record label="{USING:UsingStatement|IdentifierNameSyntax: ms|MemberAccessExpressionSyntax: ms.Write|LiteralExpressionSyntax: null|LiteralExpressionSyntax: 0|LiteralExpressionSyntax: 0|InvocationExpressionSyntax: ms.Write(null, 0, 0)}"]
1 -> 2
2 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.Using" {
label = "Roslyn.Using"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_TryAndFinally region" {
label = "TryAndFinally region"
subgraph "cluster_Try region" {
label = "Try region"
Root2 [shape=record label="{BLOCK #Root2|2# LocalReferenceOperation / IdentifierNameSyntax: ms|4# LiteralOperation / LiteralExpressionSyntax: null|3# ConversionOperation / LiteralExpressionSyntax: null|2# ArgumentOperation / ArgumentSyntax: null|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ArgumentOperation / ArgumentSyntax: 0|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ArgumentOperation / ArgumentSyntax: 0|1# InvocationOperation.Write / InvocationExpressionSyntax: ms.Write(null, 0, 0)|0# ExpressionStatementOperation / ExpressionStatementSyntax: ms.Write(null, 0, 0);|##########}"]
Root1 -> Root2
}
subgraph "cluster_Finally region" {
label = "Finally region"
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|1# LocalReferenceOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|0# IsNullOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|##########}"]
Root4 [shape=record label="{BLOCK #Root4|2# LocalReferenceOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|1# ConversionOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|0# InvocationOperation.Dispose / VariableDeclaratorSyntax: ms = new MemoryStream()|##########}"]
Root3 -> Root4 [label="Else"]
Root5 [shape=record label="{BLOCK #Root5}"]
Root3 -> Root5 [label="WhenTrue"]
Root4 -> Root5
Root5 -> NoDestinationRoot5 [label="StructuredExceptionHandling"]
}
}
Root1 [shape=record label="{BLOCK #Root1|1# LocalReferenceOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|1# ObjectCreationOperation / ObjectCreationExpressionSyntax: new MemoryStream()|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|##########}"]
Root0 -> Root1
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root6 [shape=record label="{EXIT #Root6}"]
Root2 -> Root6
}
}
