// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22TryMultiCatchFinally%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.TryMultiCatchFinally%22%20%7B%0Alabel%20%3D%20%22Sonar.TryMultiCatchFinally%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ATryStatement%7CIdentifierNameSyntax%3A%20A%7CInvocationExpressionSyntax%3A%20A()%7CIdentifierNameSyntax%3A%20B%7CInvocationExpressionSyntax%3A%20B()%7CIdentifierNameSyntax%3A%20C%7CInvocationExpressionSyntax%3A%20C()%7D%22%5D%0D%0A0%20-%3E%201%0D%0A0%20-%3E%202%0D%0A0%20-%3E%203%0D%0A0%20-%3E%204%0D%0A0%20-%3E%205%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20Handle%7CIdentifierNameSyntax%3A%20ex%7CInvocationExpressionSyntax%3A%20Handle(ex)%7D%22%5D%0D%0A4%20-%3E%205%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20Handle%7CIdentifierNameSyntax%3A%20ex%7CInvocationExpressionSyntax%3A%20Handle(ex)%7D%22%5D%0D%0A3%20-%3E%205%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ACatchFilterClause%7CIdentifierNameSyntax%3A%20ex%7CMemberAccessExpressionSyntax%3A%20ex.Message%7CMemberAccessExpressionSyntax%3A%20ex.Message.Contains%7CLiteralExpressionSyntax%3A%20%5C%22memory%5C%22%7CInvocationExpressionSyntax%3A%20ex.Message.Contains(%5C%22memory%5C%22)%7D%22%5D%0D%0A2%20-%3E%206%20%5Blabel%3D%22True%22%5D%0D%0A2%20-%3E%205%20%5Blabel%3D%22False%22%5D%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20Handle%7CIdentifierNameSyntax%3A%20ex%7CInvocationExpressionSyntax%3A%20Handle(ex)%7D%22%5D%0D%0A6%20-%3E%205%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20Handle%7CIdentifierNameSyntax%3A%20ex%7CInvocationExpressionSyntax%3A%20Handle(ex)%7D%22%5D%0D%0A1%20-%3E%205%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3AFinallyClause%7CIdentifierNameSyntax%3A%20F%7CInvocationExpressionSyntax%3A%20F()%7D%22%5D%0D%0A5%20-%3E%207%0D%0A5%20-%3E%207%0D%0A7%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.TryMultiCatchFinally%22%20%7B%0Alabel%20%3D%20%22Roslyn.TryMultiCatchFinally%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20A%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20A()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20A()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20B%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20B()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20B()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20C%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20C()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20C()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C1%23%20LocalReferenceOperation%20%2F%20CatchDeclarationSyntax%3A%20(FormatException%20ex)%7C1%23%20CaughtExceptionOperation%20%2F%20CatchDeclarationSyntax%3A%20(FormatException%20ex)%7C0%23%20SimpleAssignmentOperation%20%2F%20CatchDeclarationSyntax%3A%20(FormatException%20ex)%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20Handle%7C4%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C3%23%20ConversionOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20ex%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20Handle(ex)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20Handle(ex)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C1%23%20LocalReferenceOperation%20%2F%20CatchDeclarationSyntax%3A%20(ArgumentNullException%20ex)%7C1%23%20CaughtExceptionOperation%20%2F%20CatchDeclarationSyntax%3A%20(ArgumentNullException%20ex)%7C0%23%20SimpleAssignmentOperation%20%2F%20CatchDeclarationSyntax%3A%20(ArgumentNullException%20ex)%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20Handle%7C4%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C3%23%20ConversionOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20ex%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20Handle(ex)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20Handle(ex)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C1%23%20LocalReferenceOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C1%23%20CaughtExceptionOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C0%23%20SimpleAssignmentOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C1%23%20PropertyReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20ex.Message%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22memory%5C%22%7C1%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20%5C%22memory%5C%22%7C0%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20ex.Message.Contains(%5C%22memory%5C%22)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R5%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20Handle%7C3%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20ex%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20Handle(ex)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20Handle(ex)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20-%3E%20R5%20%5Blabel%3D%22WhenTrue%22%5D%0D%0AR6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R6%7C1%23%20LocalReferenceOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C1%23%20CaughtExceptionOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C0%23%20SimpleAssignmentOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20Handle%7C3%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20ex%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20Handle(ex)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20Handle(ex)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R7%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20F%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20F()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20F()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR8%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R8%7D%22%5D%0D%0AR1%20-%3E%20R8%0D%0AR2%20-%3E%20R8%0D%0AR3%20-%3E%20R8%0D%0AR5%20-%3E%20R8%0D%0AR6%20-%3E%20R8%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void TryMultiCatchFinally()
    {
        try
        {
            A();
            B();
            C();
        }
        catch (FormatException ex)
        {
            Handle(ex);
        }
        catch (ArgumentNullException ex)
        {
            Handle(ex);
        }
        catch (Exception ex) when (ex.Message.Contains("memory"))
        {
            Handle(ex);
        }
        catch (Exception ex)
        {
            Handle(ex);
        }
        finally
        {
            F();
        }
    }
*/

digraph "TryMultiCatchFinally" {
subgraph "cluster_Sonar.TryMultiCatchFinally" {
label = "Sonar.TryMultiCatchFinally"
0 [shape=record label="{BRANCH:TryStatement|IdentifierNameSyntax: A|InvocationExpressionSyntax: A()|IdentifierNameSyntax: B|InvocationExpressionSyntax: B()|IdentifierNameSyntax: C|InvocationExpressionSyntax: C()}"]
0 -> 1
0 -> 2
0 -> 3
0 -> 4
0 -> 5
4 [shape=record label="{SIMPLE|IdentifierNameSyntax: Handle|IdentifierNameSyntax: ex|InvocationExpressionSyntax: Handle(ex)}"]
4 -> 5
3 [shape=record label="{SIMPLE|IdentifierNameSyntax: Handle|IdentifierNameSyntax: ex|InvocationExpressionSyntax: Handle(ex)}"]
3 -> 5
2 [shape=record label="{BINARY:CatchFilterClause|IdentifierNameSyntax: ex|MemberAccessExpressionSyntax: ex.Message|MemberAccessExpressionSyntax: ex.Message.Contains|LiteralExpressionSyntax: \"memory\"|InvocationExpressionSyntax: ex.Message.Contains(\"memory\")}"]
2 -> 6 [label="True"]
2 -> 5 [label="False"]
6 [shape=record label="{SIMPLE|IdentifierNameSyntax: Handle|IdentifierNameSyntax: ex|InvocationExpressionSyntax: Handle(ex)}"]
6 -> 5
1 [shape=record label="{SIMPLE|IdentifierNameSyntax: Handle|IdentifierNameSyntax: ex|InvocationExpressionSyntax: Handle(ex)}"]
1 -> 5
5 [shape=record label="{BRANCH:FinallyClause|IdentifierNameSyntax: F|InvocationExpressionSyntax: F()}"]
5 -> 7
5 -> 7
7 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.TryMultiCatchFinally" {
label = "Roslyn.TryMultiCatchFinally"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|2# InstanceReferenceOperation / IdentifierNameSyntax: A|1# InvocationOperation / InvocationExpressionSyntax: A()|0# ExpressionStatementOperation / ExpressionStatementSyntax: A();|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: B|1# InvocationOperation / InvocationExpressionSyntax: B()|0# ExpressionStatementOperation / ExpressionStatementSyntax: B();|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: C|1# InvocationOperation / InvocationExpressionSyntax: C()|0# ExpressionStatementOperation / ExpressionStatementSyntax: C();|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|1# LocalReferenceOperation / CatchDeclarationSyntax: (FormatException ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (FormatException ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (FormatException ex)|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: Handle|4# LocalReferenceOperation / IdentifierNameSyntax: ex|3# ConversionOperation / IdentifierNameSyntax: ex|2# ArgumentOperation / ArgumentSyntax: ex|1# InvocationOperation / InvocationExpressionSyntax: Handle(ex)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Handle(ex);|##########}"]
R3 [shape=record label="{BLOCK #R3|1# LocalReferenceOperation / CatchDeclarationSyntax: (ArgumentNullException ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (ArgumentNullException ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (ArgumentNullException ex)|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: Handle|4# LocalReferenceOperation / IdentifierNameSyntax: ex|3# ConversionOperation / IdentifierNameSyntax: ex|2# ArgumentOperation / ArgumentSyntax: ex|1# InvocationOperation / InvocationExpressionSyntax: Handle(ex)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Handle(ex);|##########}"]
R4 [shape=record label="{BLOCK #R4|1# LocalReferenceOperation / CatchDeclarationSyntax: (Exception ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (Exception ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (Exception ex)|##########|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: ex|1# PropertyReferenceOperation / MemberAccessExpressionSyntax: ex.Message|2# LiteralOperation / LiteralExpressionSyntax: \"memory\"|1# ArgumentOperation / ArgumentSyntax: \"memory\"|0# InvocationOperation / InvocationExpressionSyntax: ex.Message.Contains(\"memory\")|##########}"]
R5 [shape=record label="{BLOCK #R5|2# InstanceReferenceOperation / IdentifierNameSyntax: Handle|3# LocalReferenceOperation / IdentifierNameSyntax: ex|2# ArgumentOperation / ArgumentSyntax: ex|1# InvocationOperation / InvocationExpressionSyntax: Handle(ex)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Handle(ex);|##########}"]
R4 -> R5 [label="WhenTrue"]
R6 [shape=record label="{BLOCK #R6|1# LocalReferenceOperation / CatchDeclarationSyntax: (Exception ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (Exception ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (Exception ex)|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: Handle|3# LocalReferenceOperation / IdentifierNameSyntax: ex|2# ArgumentOperation / ArgumentSyntax: ex|1# InvocationOperation / InvocationExpressionSyntax: Handle(ex)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Handle(ex);|##########}"]
R7 [shape=record label="{BLOCK #R7|2# InstanceReferenceOperation / IdentifierNameSyntax: F|1# InvocationOperation / InvocationExpressionSyntax: F()|0# ExpressionStatementOperation / ExpressionStatementSyntax: F();|##########}"]
R8 [shape=record label="{EXIT #R8}"]
R1 -> R8
R2 -> R8
R3 -> R8
R5 -> R8
R6 -> R8
}
}
