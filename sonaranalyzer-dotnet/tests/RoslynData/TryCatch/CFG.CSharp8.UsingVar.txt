// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22UsingVar%22+%7B%0D%0Asubgraph+%22cluster_Sonar.UsingVar%22+%7B%0Alabel+%3D+%22Sonar.UsingVar%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CObjectCreationExpressionSyntax%3A+new+MemoryStream()%7CVariableDeclaratorSyntax%3A+ms+%3D+new+MemoryStream()%7CIdentifierNameSyntax%3A+ms%7CMemberAccessExpressionSyntax%3A+ms.Write%7CLiteralExpressionSyntax%3A+null%7CLiteralExpressionSyntax%3A+0%7CLiteralExpressionSyntax%3A+0%7CInvocationExpressionSyntax%3A+ms.Write(null%2C+0%2C+0)%7D%22%5D%0D%0A0+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.UsingVar%22+%7B%0Alabel+%3D+%22Roslyn.UsingVar%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0Asubgraph+%22cluster_TryAndFinally+region%22+%7B%0Alabel+%3D+%22TryAndFinally+region%22%0D%0Asubgraph+%22cluster_Try+region%22+%7B%0Alabel+%3D+%22Try+region%22%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root2%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+ms%7C4%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+null%7C3%23+ConversionOperation+%2F+LiteralExpressionSyntax%3A+null%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+null%7C3%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+0%7C3%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+0%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+0%7C1%23+InvocationOperation.Write+%2F+InvocationExpressionSyntax%3A+ms.Write(null%2C+0%2C+0)%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+ms.Write(null%2C+0%2C+0)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root2%0D%0A%7D%0D%0Asubgraph+%22cluster_Finally+region%22+%7B%0Alabel+%3D+%22Finally+region%22%0D%0ARoot3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root3%7C%23%23+BranchValue+%23%23%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+ms+%3D+new+MemoryStream()%7C0%23+IsNullOperation+%2F+VariableDeclaratorSyntax%3A+ms+%3D+new+MemoryStream()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root4%7C2%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+ms+%3D+new+MemoryStream()%7C1%23+ConversionOperation+%2F+VariableDeclaratorSyntax%3A+ms+%3D+new+MemoryStream()%7C0%23+InvocationOperation.Dispose+%2F+VariableDeclaratorSyntax%3A+ms+%3D+new+MemoryStream()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3+-%3E+Root4+%5Blabel%3D%22Else%22%5D%0D%0ARoot5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root5%7D%22%5D%0D%0ARoot3+-%3E+Root5+%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot4+-%3E+Root5%0D%0ARoot5+-%3E+NoDestinationRoot5+%5Blabel%3D%22StructuredExceptionHandling%22%5D%0D%0A%7D%0D%0A%7D%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+ms+%3D+new+MemoryStream()%7C1%23+ObjectCreationOperation+%2F+ObjectCreationExpressionSyntax%3A+new+MemoryStream()%7C0%23+SimpleAssignmentOperation+%2F+VariableDeclaratorSyntax%3A+ms+%3D+new+MemoryStream()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0A%7D%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot6+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root6%7D%22%5D%0D%0ARoot2+-%3E+Root6%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void UsingVar()
    {
        using var ms = new MemoryStream();
        ms.Write(null, 0, 0);
    }
*/

digraph "UsingVar" {
subgraph "cluster_Sonar.UsingVar" {
label = "Sonar.UsingVar"
0 [shape=record label="{SIMPLE|ObjectCreationExpressionSyntax: new MemoryStream()|VariableDeclaratorSyntax: ms = new MemoryStream()|IdentifierNameSyntax: ms|MemberAccessExpressionSyntax: ms.Write|LiteralExpressionSyntax: null|LiteralExpressionSyntax: 0|LiteralExpressionSyntax: 0|InvocationExpressionSyntax: ms.Write(null, 0, 0)}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.UsingVar" {
label = "Roslyn.UsingVar"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
subgraph "cluster_TryAndFinally region" {
label = "TryAndFinally region"
subgraph "cluster_Try region" {
label = "Try region"
Root2 [shape=record label="{BLOCK #Root2|2# LocalReferenceOperation / IdentifierNameSyntax: ms|4# LiteralOperation / LiteralExpressionSyntax: null|3# ConversionOperation / LiteralExpressionSyntax: null|2# ArgumentOperation / ArgumentSyntax: null|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ArgumentOperation / ArgumentSyntax: 0|3# LiteralOperation / LiteralExpressionSyntax: 0|2# ArgumentOperation / ArgumentSyntax: 0|1# InvocationOperation.Write / InvocationExpressionSyntax: ms.Write(null, 0, 0)|0# ExpressionStatementOperation / ExpressionStatementSyntax: ms.Write(null, 0, 0);|##########}"]
Root1 -> Root2
}
subgraph "cluster_Finally region" {
label = "Finally region"
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|1# LocalReferenceOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|0# IsNullOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|##########}"]
Root4 [shape=record label="{BLOCK #Root4|2# LocalReferenceOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|1# ConversionOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|0# InvocationOperation.Dispose / VariableDeclaratorSyntax: ms = new MemoryStream()|##########}"]
Root3 -> Root4 [label="Else"]
Root5 [shape=record label="{BLOCK #Root5}"]
Root3 -> Root5 [label="WhenTrue"]
Root4 -> Root5
Root5 -> NoDestinationRoot5 [label="StructuredExceptionHandling"]
}
}
Root1 [shape=record label="{BLOCK #Root1|1# LocalReferenceOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|1# ObjectCreationOperation / ObjectCreationExpressionSyntax: new MemoryStream()|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: ms = new MemoryStream()|##########}"]
Root0 -> Root1
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root6 [shape=record label="{EXIT #Root6}"]
Root2 -> Root6
}
}
