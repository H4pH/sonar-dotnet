// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22DoTryBreakCatchContinueFinally%22+%7B%0D%0Asubgraph+%22cluster_Sonar.DoTryBreakCatchContinueFinally%22+%7B%0Alabel+%3D+%22Sonar.DoTryBreakCatchContinueFinally%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A+A%7CInvocationExpressionSyntax%3A+A()%7D%22%5D%0D%0A0+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BBRANCH%3ATryStatement%7CIdentifierNameSyntax%3A+B%7CInvocationExpressionSyntax%3A+B()%7D%22%5D%0D%0A1+-%3E+2%0D%0A1+-%3E+3%0D%0A1+-%3E+4%0D%0A5+%5Bshape%3Drecord+label%3D%22%7BBRANCH%3ATryStatement%7CIdentifierNameSyntax%3A+C%7CInvocationExpressionSyntax%3A+C()%7D%22%5D%0D%0A5+-%3E+2%0D%0A5+-%3E+3%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AContinueStatement%7CIdentifierNameSyntax%3A+Handle%7CIdentifierNameSyntax%3A+ex%7CInvocationExpressionSyntax%3A+Handle(ex)%7D%22%5D%0D%0A2+-%3E+6%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BBRANCH%3AFinallyClause%7CIdentifierNameSyntax%3A+F%7CInvocationExpressionSyntax%3A+F()%7D%22%5D%0D%0A3+-%3E+7%0D%0A3+-%3E+4%0D%0A7+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A+D%7CInvocationExpressionSyntax%3A+D()%7D%22%5D%0D%0A7+-%3E+6%0D%0A6+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ATrueLiteralExpression%7CLiteralExpressionSyntax%3A+true%7D%22%5D%0D%0A6+-%3E+0+%5Blabel%3D%22True%22%5D%0D%0A6+-%3E+4+%5Blabel%3D%22False%22%5D%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.DoTryBreakCatchContinueFinally%22+%7B%0Alabel+%3D+%22Roslyn.DoTryBreakCatchContinueFinally%22%0D%0Asubgraph+%22cluster_TryAndFinally+region%22+%7B%0Alabel+%3D+%22TryAndFinally+region%22%0D%0Asubgraph+%22cluster_Try+region%22+%7B%0Alabel+%3D+%22Try+region%22%0D%0Asubgraph+%22cluster_TryAndCatch+region%22+%7B%0Alabel+%3D+%22TryAndCatch+region%22%0D%0Asubgraph+%22cluster_Try+region%22+%7B%0Alabel+%3D+%22Try+region%22%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root2%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+B%7C1%23+InvocationOperation.B+%2F+InvocationExpressionSyntax%3A+B()%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+B()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root2%0D%0ARoot3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root3%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+C%7C1%23+InvocationOperation.C+%2F+InvocationExpressionSyntax%3A+C()%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+C()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Catch+region+System.Exception%22+%7B%0Alabel+%3D+%22Catch+region+System.Exception%22%0D%0ARoot4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root4%7C1%23+LocalReferenceOperation+%2F+CatchDeclarationSyntax%3A+(Exception+ex)%7C1%23+CaughtExceptionOperation+%2F+CatchDeclarationSyntax%3A+(Exception+ex)%7C0%23+SimpleAssignmentOperation+%2F+CatchDeclarationSyntax%3A+(Exception+ex)%7C%23%23%23%23%23%23%23%23%23%23%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+Handle%7C3%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+ex%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+ex%7C1%23+InvocationOperation.Handle+%2F+InvocationExpressionSyntax%3A+Handle(ex)%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+Handle(ex)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0A%7D%0D%0A%7D%0D%0Asubgraph+%22cluster_Finally+region%22+%7B%0Alabel+%3D+%22Finally+region%22%0D%0ARoot5+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root5%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+F%7C1%23+InvocationOperation.F+%2F+InvocationExpressionSyntax%3A+F()%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+F()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5+-%3E+NoDestinationRoot5+%5Blabel%3D%22StructuredExceptionHandling%22%5D%0D%0A%7D%0D%0A%7D%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+A%7C1%23+InvocationOperation.A+%2F+InvocationExpressionSyntax%3A+A()%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+A()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0ARoot7+-%3E+Root1+%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot6+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root6%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+D%7C1%23+InvocationOperation.D+%2F+InvocationExpressionSyntax%3A+D()%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+D()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3+-%3E+Root6%0D%0ARoot7+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root7%7C%23%23+BranchValue+%23%23%7C0%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+true%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4+-%3E+Root7%0D%0ARoot6+-%3E+Root7%0D%0ARoot8+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root8%7D%22%5D%0D%0ARoot2+-%3E+Root8%0D%0ARoot7+-%3E+Root8+%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void DoTryBreakCatchContinueFinally()
    {
        do
        {
            A();
            try
            {
                B();
                break;
                C();
            }
            catch (Exception ex)
            {
                Handle(ex);
                continue;
            }
            finally
            {
                F();
            }
            D();
        } while (true);
    }
*/

digraph "DoTryBreakCatchContinueFinally" {
subgraph "cluster_Sonar.DoTryBreakCatchContinueFinally" {
label = "Sonar.DoTryBreakCatchContinueFinally"
0 [shape=record label="{SIMPLE|IdentifierNameSyntax: A|InvocationExpressionSyntax: A()}"]
0 -> 1
1 [shape=record label="{BRANCH:TryStatement|IdentifierNameSyntax: B|InvocationExpressionSyntax: B()}"]
1 -> 2
1 -> 3
1 -> 4
5 [shape=record label="{BRANCH:TryStatement|IdentifierNameSyntax: C|InvocationExpressionSyntax: C()}"]
5 -> 2
5 -> 3
2 [shape=record label="{JUMP:ContinueStatement|IdentifierNameSyntax: Handle|IdentifierNameSyntax: ex|InvocationExpressionSyntax: Handle(ex)}"]
2 -> 6
3 [shape=record label="{BRANCH:FinallyClause|IdentifierNameSyntax: F|InvocationExpressionSyntax: F()}"]
3 -> 7
3 -> 4
7 [shape=record label="{SIMPLE|IdentifierNameSyntax: D|InvocationExpressionSyntax: D()}"]
7 -> 6
6 [shape=record label="{BINARY:TrueLiteralExpression|LiteralExpressionSyntax: true}"]
6 -> 0 [label="True"]
6 -> 4 [label="False"]
4 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.DoTryBreakCatchContinueFinally" {
label = "Roslyn.DoTryBreakCatchContinueFinally"
subgraph "cluster_TryAndFinally region" {
label = "TryAndFinally region"
subgraph "cluster_Try region" {
label = "Try region"
subgraph "cluster_TryAndCatch region" {
label = "TryAndCatch region"
subgraph "cluster_Try region" {
label = "Try region"
Root2 [shape=record label="{BLOCK #Root2|2# InstanceReferenceOperation / IdentifierNameSyntax: B|1# InvocationOperation.B / InvocationExpressionSyntax: B()|0# ExpressionStatementOperation / ExpressionStatementSyntax: B();|##########}"]
Root1 -> Root2
Root3 [shape=record label="{BLOCK #Root3|2# InstanceReferenceOperation / IdentifierNameSyntax: C|1# InvocationOperation.C / InvocationExpressionSyntax: C()|0# ExpressionStatementOperation / ExpressionStatementSyntax: C();|##########}"]
}
subgraph "cluster_Catch region System.Exception" {
label = "Catch region System.Exception"
Root4 [shape=record label="{BLOCK #Root4|1# LocalReferenceOperation / CatchDeclarationSyntax: (Exception ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (Exception ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (Exception ex)|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: Handle|3# LocalReferenceOperation / IdentifierNameSyntax: ex|2# ArgumentOperation / ArgumentSyntax: ex|1# InvocationOperation.Handle / InvocationExpressionSyntax: Handle(ex)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Handle(ex);|##########}"]
}
}
}
subgraph "cluster_Finally region" {
label = "Finally region"
Root5 [shape=record label="{BLOCK #Root5|2# InstanceReferenceOperation / IdentifierNameSyntax: F|1# InvocationOperation.F / InvocationExpressionSyntax: F()|0# ExpressionStatementOperation / ExpressionStatementSyntax: F();|##########}"]
Root5 -> NoDestinationRoot5 [label="StructuredExceptionHandling"]
}
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|2# InstanceReferenceOperation / IdentifierNameSyntax: A|1# InvocationOperation.A / InvocationExpressionSyntax: A()|0# ExpressionStatementOperation / ExpressionStatementSyntax: A();|##########}"]
Root0 -> Root1
Root7 -> Root1 [label="WhenTrue"]
Root6 [shape=record label="{BLOCK #Root6|2# InstanceReferenceOperation / IdentifierNameSyntax: D|1# InvocationOperation.D / InvocationExpressionSyntax: D()|0# ExpressionStatementOperation / ExpressionStatementSyntax: D();|##########}"]
Root3 -> Root6
Root7 [shape=record label="{BLOCK #Root7|## BranchValue ##|0# LiteralOperation / LiteralExpressionSyntax: true|##########}"]
Root4 -> Root7
Root6 -> Root7
Root8 [shape=record label="{EXIT #Root8}"]
Root2 -> Root8
Root7 -> Root8 [label="Else"]
}
}
