// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22DoTryBreakCatchContinueFinally%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.DoTryBreakCatchContinueFinally%22%20%7B%0Alabel%20%3D%20%22Sonar.DoTryBreakCatchContinueFinally%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20A%7CInvocationExpressionSyntax%3A%20A()%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ATryStatement%7CIdentifierNameSyntax%3A%20B%7CInvocationExpressionSyntax%3A%20B()%7D%22%5D%0D%0A1%20-%3E%202%0D%0A1%20-%3E%203%0D%0A1%20-%3E%204%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ATryStatement%7CIdentifierNameSyntax%3A%20C%7CInvocationExpressionSyntax%3A%20C()%7D%22%5D%0D%0A5%20-%3E%202%0D%0A5%20-%3E%203%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AContinueStatement%7CIdentifierNameSyntax%3A%20Handle%7CIdentifierNameSyntax%3A%20ex%7CInvocationExpressionSyntax%3A%20Handle(ex)%7D%22%5D%0D%0A2%20-%3E%206%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3AFinallyClause%7CIdentifierNameSyntax%3A%20F%7CInvocationExpressionSyntax%3A%20F()%7D%22%5D%0D%0A3%20-%3E%207%0D%0A3%20-%3E%204%0D%0A7%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20D%7CInvocationExpressionSyntax%3A%20D()%7D%22%5D%0D%0A7%20-%3E%206%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ATrueLiteralExpression%7CLiteralExpressionSyntax%3A%20true%7D%22%5D%0D%0A6%20-%3E%200%20%5Blabel%3D%22True%22%5D%0D%0A6%20-%3E%204%20%5Blabel%3D%22False%22%5D%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.DoTryBreakCatchContinueFinally%22%20%7B%0Alabel%20%3D%20%22Roslyn.DoTryBreakCatchContinueFinally%22%0D%0Asubgraph%20%22cluster_TryAndFinally%20region%22%20%7B%0Alabel%20%3D%20%22TryAndFinally%20region%22%0D%0Asubgraph%20%22cluster_Try%20region%22%20%7B%0Alabel%20%3D%20%22Try%20region%22%0D%0Asubgraph%20%22cluster_TryAndCatch%20region%22%20%7B%0Alabel%20%3D%20%22TryAndCatch%20region%22%0D%0Asubgraph%20%22cluster_Try%20region%22%20%7B%0Alabel%20%3D%20%22Try%20region%22%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20B%7C1%23%20InvocationOperation.B%20%2F%20InvocationExpressionSyntax%3A%20B()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20B()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20C%7C1%23%20InvocationOperation.C%20%2F%20InvocationExpressionSyntax%3A%20C()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20C()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Catch%20region%20System.Exception%22%20%7B%0Alabel%20%3D%20%22Catch%20region%20System.Exception%22%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C1%23%20LocalReferenceOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C1%23%20CaughtExceptionOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C0%23%20SimpleAssignmentOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20Handle%7C3%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20ex%7C1%23%20InvocationOperation.Handle%20%2F%20InvocationExpressionSyntax%3A%20Handle(ex)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20Handle(ex)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0A%7D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Finally%20region%22%20%7B%0Alabel%20%3D%20%22Finally%20region%22%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root5%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20F%7C1%23%20InvocationOperation.F%20%2F%20InvocationExpressionSyntax%3A%20F()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20F()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot5%20-%3E%20NoDestinationRoot5%20%5Blabel%3D%22StructuredExceptionHandling%22%5D%0D%0A%7D%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20A%7C1%23%20InvocationOperation.A%20%2F%20InvocationExpressionSyntax%3A%20A()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20A()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot7%20-%3E%20Root1%20%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root6%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20D%7C1%23%20InvocationOperation.D%20%2F%20InvocationExpressionSyntax%3A%20D()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20D()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot3%20-%3E%20Root6%0D%0ARoot7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root7%7C%23%23%20BranchValue%20%23%23%7C0%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20true%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot4%20-%3E%20Root7%0D%0ARoot6%20-%3E%20Root7%0D%0ARoot8%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root8%7D%22%5D%0D%0ARoot2%20-%3E%20Root8%0D%0ARoot7%20-%3E%20Root8%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void DoTryBreakCatchContinueFinally()
    {
        do
        {
            A();
            try
            {
                B();
                break;
                C();
            }
            catch (Exception ex)
            {
                Handle(ex);
                continue;
            }
            finally
            {
                F();
            }
            D();
        } while (true);
    }
*/

digraph "DoTryBreakCatchContinueFinally" {
subgraph "cluster_Sonar.DoTryBreakCatchContinueFinally" {
label = "Sonar.DoTryBreakCatchContinueFinally"
0 [shape=record label="{SIMPLE|IdentifierNameSyntax: A|InvocationExpressionSyntax: A()}"]
0 -> 1
1 [shape=record label="{BRANCH:TryStatement|IdentifierNameSyntax: B|InvocationExpressionSyntax: B()}"]
1 -> 2
1 -> 3
1 -> 4
5 [shape=record label="{BRANCH:TryStatement|IdentifierNameSyntax: C|InvocationExpressionSyntax: C()}"]
5 -> 2
5 -> 3
2 [shape=record label="{JUMP:ContinueStatement|IdentifierNameSyntax: Handle|IdentifierNameSyntax: ex|InvocationExpressionSyntax: Handle(ex)}"]
2 -> 6
3 [shape=record label="{BRANCH:FinallyClause|IdentifierNameSyntax: F|InvocationExpressionSyntax: F()}"]
3 -> 7
3 -> 4
7 [shape=record label="{SIMPLE|IdentifierNameSyntax: D|InvocationExpressionSyntax: D()}"]
7 -> 6
6 [shape=record label="{BINARY:TrueLiteralExpression|LiteralExpressionSyntax: true}"]
6 -> 0 [label="True"]
6 -> 4 [label="False"]
4 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.DoTryBreakCatchContinueFinally" {
label = "Roslyn.DoTryBreakCatchContinueFinally"
subgraph "cluster_TryAndFinally region" {
label = "TryAndFinally region"
subgraph "cluster_Try region" {
label = "Try region"
subgraph "cluster_TryAndCatch region" {
label = "TryAndCatch region"
subgraph "cluster_Try region" {
label = "Try region"
Root2 [shape=record label="{BLOCK #Root2|2# InstanceReferenceOperation / IdentifierNameSyntax: B|1# InvocationOperation.B / InvocationExpressionSyntax: B()|0# ExpressionStatementOperation / ExpressionStatementSyntax: B();|##########}"]
Root1 -> Root2
Root3 [shape=record label="{BLOCK #Root3|2# InstanceReferenceOperation / IdentifierNameSyntax: C|1# InvocationOperation.C / InvocationExpressionSyntax: C()|0# ExpressionStatementOperation / ExpressionStatementSyntax: C();|##########}"]
}
subgraph "cluster_Catch region System.Exception" {
label = "Catch region System.Exception"
Root4 [shape=record label="{BLOCK #Root4|1# LocalReferenceOperation / CatchDeclarationSyntax: (Exception ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (Exception ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (Exception ex)|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: Handle|3# LocalReferenceOperation / IdentifierNameSyntax: ex|2# ArgumentOperation / ArgumentSyntax: ex|1# InvocationOperation.Handle / InvocationExpressionSyntax: Handle(ex)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Handle(ex);|##########}"]
}
}
}
subgraph "cluster_Finally region" {
label = "Finally region"
Root5 [shape=record label="{BLOCK #Root5|2# InstanceReferenceOperation / IdentifierNameSyntax: F|1# InvocationOperation.F / InvocationExpressionSyntax: F()|0# ExpressionStatementOperation / ExpressionStatementSyntax: F();|##########}"]
Root5 -> NoDestinationRoot5 [label="StructuredExceptionHandling"]
}
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|2# InstanceReferenceOperation / IdentifierNameSyntax: A|1# InvocationOperation.A / InvocationExpressionSyntax: A()|0# ExpressionStatementOperation / ExpressionStatementSyntax: A();|##########}"]
Root0 -> Root1
Root7 -> Root1 [label="WhenTrue"]
Root6 [shape=record label="{BLOCK #Root6|2# InstanceReferenceOperation / IdentifierNameSyntax: D|1# InvocationOperation.D / InvocationExpressionSyntax: D()|0# ExpressionStatementOperation / ExpressionStatementSyntax: D();|##########}"]
Root3 -> Root6
Root7 [shape=record label="{BLOCK #Root7|## BranchValue ##|0# LiteralOperation / LiteralExpressionSyntax: true|##########}"]
Root4 -> Root7
Root6 -> Root7
Root8 [shape=record label="{EXIT #Root8}"]
Root2 -> Root8
Root7 -> Root8 [label="Else"]
}
}
