// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22TryThrowCatch%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.TryThrowCatch%22%20%7B%0Alabel%20%3D%20%22Sonar.TryThrowCatch%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AThrowStatement%7CIdentifierNameSyntax%3A%20A%7CInvocationExpressionSyntax%3A%20A()%7CIdentifierNameSyntax%3A%20B%7CInvocationExpressionSyntax%3A%20B()%7CLiteralExpressionSyntax%3A%20%5C%22Message%5C%22%7CObjectCreationExpressionSyntax%3A%20new%20Exception(%5C%22Message%5C%22)%7D%22%5D%0D%0A0%20-%3E%201%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ATryStatement%7CIdentifierNameSyntax%3A%20C%7CInvocationExpressionSyntax%3A%20C()%7D%22%5D%0D%0A2%20-%3E%203%0D%0A2%20-%3E%201%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20Handle%7CIdentifierNameSyntax%3A%20ex%7CInvocationExpressionSyntax%3A%20Handle(ex)%7D%22%5D%0D%0A3%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.TryThrowCatch%22%20%7B%0Alabel%20%3D%20%22Roslyn.TryThrowCatch%22%0D%0Asubgraph%20%22cluster_TryAndCatch%20region%22%20%7B%0Alabel%20%3D%20%22TryAndCatch%20region%22%0D%0Asubgraph%20%22cluster_Try%20region%22%20%7B%0Alabel%20%3D%20%22Try%20region%22%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20A%7C1%23%20InvocationOperation.A%20%2F%20InvocationExpressionSyntax%3A%20A()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20A()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20B%7C1%23%20InvocationOperation.B%20%2F%20InvocationExpressionSyntax%3A%20B()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20B()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Message%5C%22%7C1%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20%5C%22Message%5C%22%7C0%23%20ObjectCreationOperation%20%2F%20ObjectCreationExpressionSyntax%3A%20new%20Exception(%5C%22Message%5C%22)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot1%20-%3E%20NoDestinationRoot1%20%5Blabel%3D%22Throw%22%5D%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20C%7C1%23%20InvocationOperation.C%20%2F%20InvocationExpressionSyntax%3A%20C()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20C()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Catch%20region%20System.Exception%22%20%7B%0Alabel%20%3D%20%22Catch%20region%20System.Exception%22%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C1%23%20LocalReferenceOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C1%23%20CaughtExceptionOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C0%23%20SimpleAssignmentOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20Handle%7C3%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20ex%7C1%23%20InvocationOperation.Handle%20%2F%20InvocationExpressionSyntax%3A%20Handle(ex)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20Handle(ex)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root4%7D%22%5D%0D%0ARoot2%20-%3E%20Root4%0D%0ARoot3%20-%3E%20Root4%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void TryThrowCatch()
    {
        try
        {
            A();
            B();
            throw new Exception("Message");
            C();
        }
        catch (Exception ex)
        {
            Handle(ex);
        }
    }
*/

digraph "TryThrowCatch" {
subgraph "cluster_Sonar.TryThrowCatch" {
label = "Sonar.TryThrowCatch"
0 [shape=record label="{JUMP:ThrowStatement|IdentifierNameSyntax: A|InvocationExpressionSyntax: A()|IdentifierNameSyntax: B|InvocationExpressionSyntax: B()|LiteralExpressionSyntax: \"Message\"|ObjectCreationExpressionSyntax: new Exception(\"Message\")}"]
0 -> 1
2 [shape=record label="{BRANCH:TryStatement|IdentifierNameSyntax: C|InvocationExpressionSyntax: C()}"]
2 -> 3
2 -> 1
3 [shape=record label="{SIMPLE|IdentifierNameSyntax: Handle|IdentifierNameSyntax: ex|InvocationExpressionSyntax: Handle(ex)}"]
3 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.TryThrowCatch" {
label = "Roslyn.TryThrowCatch"
subgraph "cluster_TryAndCatch region" {
label = "TryAndCatch region"
subgraph "cluster_Try region" {
label = "Try region"
Root1 [shape=record label="{BLOCK #Root1|2# InstanceReferenceOperation / IdentifierNameSyntax: A|1# InvocationOperation.A / InvocationExpressionSyntax: A()|0# ExpressionStatementOperation / ExpressionStatementSyntax: A();|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: B|1# InvocationOperation.B / InvocationExpressionSyntax: B()|0# ExpressionStatementOperation / ExpressionStatementSyntax: B();|##########|## BranchValue ##|2# LiteralOperation / LiteralExpressionSyntax: \"Message\"|1# ArgumentOperation / ArgumentSyntax: \"Message\"|0# ObjectCreationOperation / ObjectCreationExpressionSyntax: new Exception(\"Message\")|##########}"]
Root0 -> Root1
Root1 -> NoDestinationRoot1 [label="Throw"]
Root2 [shape=record label="{BLOCK #Root2|2# InstanceReferenceOperation / IdentifierNameSyntax: C|1# InvocationOperation.C / InvocationExpressionSyntax: C()|0# ExpressionStatementOperation / ExpressionStatementSyntax: C();|##########}"]
}
subgraph "cluster_Catch region System.Exception" {
label = "Catch region System.Exception"
Root3 [shape=record label="{BLOCK #Root3|1# LocalReferenceOperation / CatchDeclarationSyntax: (Exception ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (Exception ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (Exception ex)|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: Handle|3# LocalReferenceOperation / IdentifierNameSyntax: ex|2# ArgumentOperation / ArgumentSyntax: ex|1# InvocationOperation.Handle / InvocationExpressionSyntax: Handle(ex)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Handle(ex);|##########}"]
}
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root4 [shape=record label="{EXIT #Root4}"]
Root2 -> Root4
Root3 -> Root4
}
}
