// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22TryCatchWhenFinally%22+%7B%0D%0Asubgraph+%22cluster_Sonar.TryCatchWhenFinally%22+%7B%0Alabel+%3D+%22Sonar.TryCatchWhenFinally%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBRANCH%3ATryStatement%7CIdentifierNameSyntax%3A+A%7CInvocationExpressionSyntax%3A+A()%7CIdentifierNameSyntax%3A+B%7CInvocationExpressionSyntax%3A+B()%7CIdentifierNameSyntax%3A+C%7CInvocationExpressionSyntax%3A+C()%7D%22%5D%0D%0A0+-%3E+1%0D%0A0+-%3E+2%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ACatchFilterClause%7CIdentifierNameSyntax%3A+ex%7CMemberAccessExpressionSyntax%3A+ex.Message%7CMemberAccessExpressionSyntax%3A+ex.Message.Contains%7CLiteralExpressionSyntax%3A+%5C%22memory%5C%22%7CInvocationExpressionSyntax%3A+ex.Message.Contains(%5C%22memory%5C%22)%7D%22%5D%0D%0A1+-%3E+3+%5Blabel%3D%22True%22%5D%0D%0A1+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A+Handle%7CIdentifierNameSyntax%3A+ex%7CInvocationExpressionSyntax%3A+Handle(ex)%7D%22%5D%0D%0A3+-%3E+2%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BBRANCH%3AFinallyClause%7CIdentifierNameSyntax%3A+F%7CInvocationExpressionSyntax%3A+F()%7D%22%5D%0D%0A2+-%3E+4%0D%0A2+-%3E+4%0D%0A4+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.TryCatchWhenFinally%22+%7B%0Alabel+%3D+%22Roslyn.TryCatchWhenFinally%22%0D%0Asubgraph+%22cluster_TryAndFinally+region%22+%7B%0Alabel+%3D+%22TryAndFinally+region%22%0D%0Asubgraph+%22cluster_Try+region%22+%7B%0Alabel+%3D+%22Try+region%22%0D%0Asubgraph+%22cluster_TryAndCatch+region%22+%7B%0Alabel+%3D+%22TryAndCatch+region%22%0D%0Asubgraph+%22cluster_Try+region%22+%7B%0Alabel+%3D+%22Try+region%22%0D%0AR1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R1%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+A%7C1%23+InvocationOperation.A+%2F+InvocationExpressionSyntax%3A+A()%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+A()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+B%7C1%23+InvocationOperation.B+%2F+InvocationExpressionSyntax%3A+B()%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+B()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+C%7C1%23+InvocationOperation.C+%2F+InvocationExpressionSyntax%3A+C()%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+C()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0+-%3E+R1%0D%0A%7D%0D%0Asubgraph+%22cluster_FilterAndHandler+region+System.Exception%22+%7B%0Alabel+%3D+%22FilterAndHandler+region+System.Exception%22%0D%0Asubgraph+%22cluster_Filter+region+System.Exception%22+%7B%0Alabel+%3D+%22Filter+region+System.Exception%22%0D%0AR2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R2%7C1%23+LocalReferenceOperation+%2F+CatchDeclarationSyntax%3A+(Exception+ex)%7C1%23+CaughtExceptionOperation+%2F+CatchDeclarationSyntax%3A+(Exception+ex)%7C0%23+SimpleAssignmentOperation+%2F+CatchDeclarationSyntax%3A+(Exception+ex)%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23+BranchValue+%23%23%7C2%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+ex%7C1%23+PropertyReferenceOperation+%2F+MemberAccessExpressionSyntax%3A+ex.Message%7C2%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22memory%5C%22%7C1%23+ArgumentOperation+%2F+ArgumentSyntax%3A+%5C%22memory%5C%22%7C0%23+InvocationOperation.Contains+%2F+InvocationExpressionSyntax%3A+ex.Message.Contains(%5C%22memory%5C%22)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2+-%3E+NoDestinationR2+%5Blabel%3D%22StructuredExceptionHandling%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Catch+region+System.Exception%22+%7B%0Alabel+%3D+%22Catch+region+System.Exception%22%0D%0AR3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R3%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+Handle%7C3%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+ex%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+ex%7C1%23+InvocationOperation.Handle+%2F+InvocationExpressionSyntax%3A+Handle(ex)%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+Handle(ex)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2+-%3E+R3+%5Blabel%3D%22WhenTrue%22%5D%0D%0A%7D%0D%0A%7D%0D%0A%7D%0D%0A%7D%0D%0Asubgraph+%22cluster_Finally+region%22+%7B%0Alabel+%3D+%22Finally+region%22%0D%0AR4+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R4%7C2%23+InstanceReferenceOperation+%2F+IdentifierNameSyntax%3A+F%7C1%23+InvocationOperation.F+%2F+InvocationExpressionSyntax%3A+F()%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+F()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4+-%3E+NoDestinationR4+%5Blabel%3D%22StructuredExceptionHandling%22%5D%0D%0A%7D%0D%0A%7D%0D%0AR0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23R0%7D%22%5D%0D%0AR5+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23R5%7D%22%5D%0D%0AR1+-%3E+R5%0D%0AR3+-%3E+R5%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void TryCatchWhenFinally()
    {
        try
        {
            A();
            B();
            C();
        }
        catch (Exception ex) when (ex.Message.Contains("memory"))
        {
            Handle(ex);
        }
        finally
        {
            F();
        }
    }
*/

digraph "TryCatchWhenFinally" {
subgraph "cluster_Sonar.TryCatchWhenFinally" {
label = "Sonar.TryCatchWhenFinally"
0 [shape=record label="{BRANCH:TryStatement|IdentifierNameSyntax: A|InvocationExpressionSyntax: A()|IdentifierNameSyntax: B|InvocationExpressionSyntax: B()|IdentifierNameSyntax: C|InvocationExpressionSyntax: C()}"]
0 -> 1
0 -> 2
1 [shape=record label="{BINARY:CatchFilterClause|IdentifierNameSyntax: ex|MemberAccessExpressionSyntax: ex.Message|MemberAccessExpressionSyntax: ex.Message.Contains|LiteralExpressionSyntax: \"memory\"|InvocationExpressionSyntax: ex.Message.Contains(\"memory\")}"]
1 -> 3 [label="True"]
1 -> 2 [label="False"]
3 [shape=record label="{SIMPLE|IdentifierNameSyntax: Handle|IdentifierNameSyntax: ex|InvocationExpressionSyntax: Handle(ex)}"]
3 -> 2
2 [shape=record label="{BRANCH:FinallyClause|IdentifierNameSyntax: F|InvocationExpressionSyntax: F()}"]
2 -> 4
2 -> 4
4 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.TryCatchWhenFinally" {
label = "Roslyn.TryCatchWhenFinally"
subgraph "cluster_TryAndFinally region" {
label = "TryAndFinally region"
subgraph "cluster_Try region" {
label = "Try region"
subgraph "cluster_TryAndCatch region" {
label = "TryAndCatch region"
subgraph "cluster_Try region" {
label = "Try region"
R1 [shape=record label="{BLOCK #R1|2# InstanceReferenceOperation / IdentifierNameSyntax: A|1# InvocationOperation.A / InvocationExpressionSyntax: A()|0# ExpressionStatementOperation / ExpressionStatementSyntax: A();|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: B|1# InvocationOperation.B / InvocationExpressionSyntax: B()|0# ExpressionStatementOperation / ExpressionStatementSyntax: B();|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: C|1# InvocationOperation.C / InvocationExpressionSyntax: C()|0# ExpressionStatementOperation / ExpressionStatementSyntax: C();|##########}"]
R0 -> R1
}
subgraph "cluster_FilterAndHandler region System.Exception" {
label = "FilterAndHandler region System.Exception"
subgraph "cluster_Filter region System.Exception" {
label = "Filter region System.Exception"
R2 [shape=record label="{BLOCK #R2|1# LocalReferenceOperation / CatchDeclarationSyntax: (Exception ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (Exception ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (Exception ex)|##########|## BranchValue ##|2# LocalReferenceOperation / IdentifierNameSyntax: ex|1# PropertyReferenceOperation / MemberAccessExpressionSyntax: ex.Message|2# LiteralOperation / LiteralExpressionSyntax: \"memory\"|1# ArgumentOperation / ArgumentSyntax: \"memory\"|0# InvocationOperation.Contains / InvocationExpressionSyntax: ex.Message.Contains(\"memory\")|##########}"]
R2 -> NoDestinationR2 [label="StructuredExceptionHandling"]
}
subgraph "cluster_Catch region System.Exception" {
label = "Catch region System.Exception"
R3 [shape=record label="{BLOCK #R3|2# InstanceReferenceOperation / IdentifierNameSyntax: Handle|3# LocalReferenceOperation / IdentifierNameSyntax: ex|2# ArgumentOperation / ArgumentSyntax: ex|1# InvocationOperation.Handle / InvocationExpressionSyntax: Handle(ex)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Handle(ex);|##########}"]
R2 -> R3 [label="WhenTrue"]
}
}
}
}
subgraph "cluster_Finally region" {
label = "Finally region"
R4 [shape=record label="{BLOCK #R4|2# InstanceReferenceOperation / IdentifierNameSyntax: F|1# InvocationOperation.F / InvocationExpressionSyntax: F()|0# ExpressionStatementOperation / ExpressionStatementSyntax: F();|##########}"]
R4 -> NoDestinationR4 [label="StructuredExceptionHandling"]
}
}
R0 [shape=record label="{ENTRY #R0}"]
R5 [shape=record label="{EXIT #R5}"]
R1 -> R5
R3 -> R5
}
}
