// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22TryCatchRethrowNested%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.TryCatchRethrowNested%22%20%7B%0Alabel%20%3D%20%22Sonar.TryCatchRethrowNested%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ATryStatement%7CIdentifierNameSyntax%3A%20A%7CInvocationExpressionSyntax%3A%20A()%7D%22%5D%0D%0A0%20-%3E%201%0D%0A0%20-%3E%202%0D%0A0%20-%3E%203%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ATryStatement%7CIdentifierNameSyntax%3A%20B%7CInvocationExpressionSyntax%3A%20B()%7CIdentifierNameSyntax%3A%20C%7CInvocationExpressionSyntax%3A%20C()%7CIdentifierNameSyntax%3A%20D%7CInvocationExpressionSyntax%3A%20D()%7D%22%5D%0D%0A3%20-%3E%204%0D%0A3%20-%3E%205%0D%0A3%20-%3E%206%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AThrowStatement%7D%22%5D%0D%0A4%20-%3E%206%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ATryStatement%7CIdentifierNameSyntax%3A%20E%7CInvocationExpressionSyntax%3A%20E()%7D%22%5D%0D%0A5%20-%3E%201%0D%0A5%20-%3E%202%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20Handle%7CIdentifierNameSyntax%3A%20ex%7CInvocationExpressionSyntax%3A%20Handle(ex)%7D%22%5D%0D%0A1%20-%3E%202%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20F%7CInvocationExpressionSyntax%3A%20F()%7D%22%5D%0D%0A2%20-%3E%206%0D%0A6%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.TryCatchRethrowNested%22%20%7B%0Alabel%20%3D%20%22Roslyn.TryCatchRethrowNested%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20A%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20A()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20A()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20B%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20B()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20B()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20C%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20C()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20C()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20D%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20D()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20D()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C1%23%20LocalReferenceOperation%20%2F%20CatchDeclarationSyntax%3A%20(NullReferenceException%20nre)%7C1%23%20CaughtExceptionOperation%20%2F%20CatchDeclarationSyntax%3A%20(NullReferenceException%20nre)%7C0%23%20SimpleAssignmentOperation%20%2F%20CatchDeclarationSyntax%3A%20(NullReferenceException%20nre)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20E%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20E()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20E()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R4%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R5%7C1%23%20LocalReferenceOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C1%23%20CaughtExceptionOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C0%23%20SimpleAssignmentOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20Handle%7C3%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20ex%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20Handle(ex)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20Handle(ex)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R6%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20F%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20F()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20F()%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR4%20-%3E%20R6%0D%0AR5%20-%3E%20R6%0D%0AR7%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R7%7D%22%5D%0D%0AR6%20-%3E%20R7%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void TryCatchRethrowNested()
    {
        try
        {
            A();
            try
            {
                B();
                C();
                D();
            }
            catch (NullReferenceException nre)
            {
                throw;
            }
            E();
        }
        catch (Exception ex)
        {
            Handle(ex);
        }
        F();
    }
*/

digraph "TryCatchRethrowNested" {
subgraph "cluster_Sonar.TryCatchRethrowNested" {
label = "Sonar.TryCatchRethrowNested"
0 [shape=record label="{BRANCH:TryStatement|IdentifierNameSyntax: A|InvocationExpressionSyntax: A()}"]
0 -> 1
0 -> 2
0 -> 3
3 [shape=record label="{BRANCH:TryStatement|IdentifierNameSyntax: B|InvocationExpressionSyntax: B()|IdentifierNameSyntax: C|InvocationExpressionSyntax: C()|IdentifierNameSyntax: D|InvocationExpressionSyntax: D()}"]
3 -> 4
3 -> 5
3 -> 6
4 [shape=record label="{JUMP:ThrowStatement}"]
4 -> 6
5 [shape=record label="{BRANCH:TryStatement|IdentifierNameSyntax: E|InvocationExpressionSyntax: E()}"]
5 -> 1
5 -> 2
1 [shape=record label="{SIMPLE|IdentifierNameSyntax: Handle|IdentifierNameSyntax: ex|InvocationExpressionSyntax: Handle(ex)}"]
1 -> 2
2 [shape=record label="{SIMPLE|IdentifierNameSyntax: F|InvocationExpressionSyntax: F()}"]
2 -> 6
6 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.TryCatchRethrowNested" {
label = "Roslyn.TryCatchRethrowNested"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|2# InstanceReferenceOperation / IdentifierNameSyntax: A|1# InvocationOperation / InvocationExpressionSyntax: A()|0# ExpressionStatementOperation / ExpressionStatementSyntax: A();|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|2# InstanceReferenceOperation / IdentifierNameSyntax: B|1# InvocationOperation / InvocationExpressionSyntax: B()|0# ExpressionStatementOperation / ExpressionStatementSyntax: B();|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: C|1# InvocationOperation / InvocationExpressionSyntax: C()|0# ExpressionStatementOperation / ExpressionStatementSyntax: C();|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: D|1# InvocationOperation / InvocationExpressionSyntax: D()|0# ExpressionStatementOperation / ExpressionStatementSyntax: D();|##########}"]
R1 -> R2
R3 [shape=record label="{BLOCK #R3|1# LocalReferenceOperation / CatchDeclarationSyntax: (NullReferenceException nre)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (NullReferenceException nre)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (NullReferenceException nre)|##########}"]
R4 [shape=record label="{BLOCK #R4|2# InstanceReferenceOperation / IdentifierNameSyntax: E|1# InvocationOperation / InvocationExpressionSyntax: E()|0# ExpressionStatementOperation / ExpressionStatementSyntax: E();|##########}"]
R2 -> R4
R5 [shape=record label="{BLOCK #R5|1# LocalReferenceOperation / CatchDeclarationSyntax: (Exception ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (Exception ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (Exception ex)|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: Handle|3# LocalReferenceOperation / IdentifierNameSyntax: ex|2# ArgumentOperation / ArgumentSyntax: ex|1# InvocationOperation / InvocationExpressionSyntax: Handle(ex)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Handle(ex);|##########}"]
R6 [shape=record label="{BLOCK #R6|2# InstanceReferenceOperation / IdentifierNameSyntax: F|1# InvocationOperation / InvocationExpressionSyntax: F()|0# ExpressionStatementOperation / ExpressionStatementSyntax: F();|##########}"]
R4 -> R6
R5 -> R6
R7 [shape=record label="{EXIT #R7}"]
R6 -> R7
}
}
