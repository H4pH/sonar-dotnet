digraph "Roslyn.DoTryBreakCatchContinueFinally" {
0 [shape=record label="{ENTRY #0}"]
1 [shape=record label="{BLOCK #1|2# InstanceReferenceOperation / IdentifierNameSyntax: A|1# InvocationOperation / InvocationExpressionSyntax: A()|0# ExpressionStatementOperation / ExpressionStatementSyntax: A();|##########}"]
0 -> 1
7 -> 1 [label="WhenTrue"]
2 [shape=record label="{BLOCK #2|2# InstanceReferenceOperation / IdentifierNameSyntax: B|1# InvocationOperation / InvocationExpressionSyntax: B()|0# ExpressionStatementOperation / ExpressionStatementSyntax: B();|##########}"]
1 -> 2
3 [shape=record label="{BLOCK #3|2# InstanceReferenceOperation / IdentifierNameSyntax: C|1# InvocationOperation / InvocationExpressionSyntax: C()|0# ExpressionStatementOperation / ExpressionStatementSyntax: C();|##########}"]
4 [shape=record label="{BLOCK #4|1# LocalReferenceOperation / CatchDeclarationSyntax: (Exception ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (Exception ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (Exception ex)|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: Handle|3# LocalReferenceOperation / IdentifierNameSyntax: ex|2# ArgumentOperation / ArgumentSyntax: ex|1# InvocationOperation / InvocationExpressionSyntax: Handle(ex)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Handle(ex);|##########}"]
5 [shape=record label="{BLOCK #5|2# InstanceReferenceOperation / IdentifierNameSyntax: F|1# InvocationOperation / InvocationExpressionSyntax: F()|0# ExpressionStatementOperation / ExpressionStatementSyntax: F();|##########}"]
6 [shape=record label="{BLOCK #6|2# InstanceReferenceOperation / IdentifierNameSyntax: D|1# InvocationOperation / InvocationExpressionSyntax: D()|0# ExpressionStatementOperation / ExpressionStatementSyntax: D();|##########}"]
3 -> 6
7 [shape=record label="{BLOCK #7|## BranchValue ##|0# LiteralOperation / LiteralExpressionSyntax: true|##########}"]
4 -> 7
6 -> 7
8 [shape=record label="{EXIT #8}"]
2 -> 8
7 -> 8 [label="Else"]
}
