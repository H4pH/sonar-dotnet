// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22TryReturnCatchReturn%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.TryReturnCatchReturn%22%20%7B%0Alabel%20%3D%20%22Sonar.TryReturnCatchReturn%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBRANCH%3ATryStatement%7D%22%5D%0D%0A0%20-%3E%201%0D%0A0%20-%3E%202%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CIdentifierNameSyntax%3A%20A%7CInvocationExpressionSyntax%3A%20A()%7CIdentifierNameSyntax%3A%20B%7CInvocationExpressionSyntax%3A%20B()%7CIdentifierNameSyntax%3A%20C%7CInvocationExpressionSyntax%3A%20C()%7CLiteralExpressionSyntax%3A%20%5C%22OK%5C%22%7D%22%5D%0D%0A1%20-%3E%203%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A%20%5C%22Error%3A%20%5C%22%7CIdentifierNameSyntax%3A%20ex%7CMemberAccessExpressionSyntax%3A%20ex.Message%7CBinaryExpressionSyntax%3A%20%5C%22Error%3A%20%5C%22%20%2B%20ex.Message%7D%22%5D%0D%0A2%20-%3E%203%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.TryReturnCatchReturn%22%20%7B%0Alabel%20%3D%20%22Roslyn.TryReturnCatchReturn%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20A%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20A()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20A()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20B%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20B()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20B()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20C%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20C()%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20C()%3B%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C0%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22OK%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C1%23%20LocalReferenceOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C1%23%20CaughtExceptionOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C0%23%20SimpleAssignmentOperation%20%2F%20CatchDeclarationSyntax%3A%20(Exception%20ex)%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Error%3A%20%5C%22%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ex%7C1%23%20PropertyReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20ex.Message%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20%5C%22Error%3A%20%5C%22%20%2B%20ex.Message%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R3%7D%22%5D%0D%0AR1%20-%3E%20R3%0D%0AR2%20-%3E%20R3%0D%0A%7D%0D%0A%7D%0D%0A

/*
public string TryReturnCatchReturn()
    {
        try
        {
            A();
            B();
            C();
            return "OK";
        }
        catch(Exception ex)
        {
            return "Error: " + ex.Message;
        }
    }
*/

digraph "TryReturnCatchReturn" {
subgraph "cluster_Sonar.TryReturnCatchReturn" {
label = "Sonar.TryReturnCatchReturn"
0 [shape=record label="{BRANCH:TryStatement}"]
0 -> 1
0 -> 2
1 [shape=record label="{JUMP:ReturnStatement|IdentifierNameSyntax: A|InvocationExpressionSyntax: A()|IdentifierNameSyntax: B|InvocationExpressionSyntax: B()|IdentifierNameSyntax: C|InvocationExpressionSyntax: C()|LiteralExpressionSyntax: \"OK\"}"]
1 -> 3
2 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: \"Error: \"|IdentifierNameSyntax: ex|MemberAccessExpressionSyntax: ex.Message|BinaryExpressionSyntax: \"Error: \" + ex.Message}"]
2 -> 3
3 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.TryReturnCatchReturn" {
label = "Roslyn.TryReturnCatchReturn"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|2# InstanceReferenceOperation / IdentifierNameSyntax: A|1# InvocationOperation / InvocationExpressionSyntax: A()|0# ExpressionStatementOperation / ExpressionStatementSyntax: A();|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: B|1# InvocationOperation / InvocationExpressionSyntax: B()|0# ExpressionStatementOperation / ExpressionStatementSyntax: B();|##########|2# InstanceReferenceOperation / IdentifierNameSyntax: C|1# InvocationOperation / InvocationExpressionSyntax: C()|0# ExpressionStatementOperation / ExpressionStatementSyntax: C();|##########|## BranchValue ##|0# LiteralOperation / LiteralExpressionSyntax: \"OK\"|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|1# LocalReferenceOperation / CatchDeclarationSyntax: (Exception ex)|1# CaughtExceptionOperation / CatchDeclarationSyntax: (Exception ex)|0# SimpleAssignmentOperation / CatchDeclarationSyntax: (Exception ex)|##########|## BranchValue ##|1# LiteralOperation / LiteralExpressionSyntax: \"Error: \"|2# LocalReferenceOperation / IdentifierNameSyntax: ex|1# PropertyReferenceOperation / MemberAccessExpressionSyntax: ex.Message|0# BinaryOperation / BinaryExpressionSyntax: \"Error: \" + ex.Message|##########}"]
R3 [shape=record label="{EXIT #R3}"]
R1 -> R3
R2 -> R3
}
}
