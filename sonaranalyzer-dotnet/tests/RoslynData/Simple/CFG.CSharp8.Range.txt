// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22Range%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.Range%22%20%7B%0Alabel%20%3D%20%22Sonar.Range%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20arr%7CRangeExpressionSyntax%3A%201..4%7CElementAccessExpressionSyntax%3A%20arr%5B1..4%5D%7CVariableDeclaratorSyntax%3A%20value%20%3D%20arr%5B1..4%5D%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.Range%22%20%7B%0Alabel%20%3D%20%22Roslyn.Range%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20arr%5B1..4%5D%7C2%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arr%7C4%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C3%23%20ConversionOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C4%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%204%7C3%23%20ConversionOperation%20%2F%20LiteralExpressionSyntax%3A%204%7C2%23%20RangeOperation%20%2F%20RangeExpressionSyntax%3A%201..4%7C1%23%20ArrayElementReferenceOperation%20%2F%20ElementAccessExpressionSyntax%3A%20arr%5B1..4%5D%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20arr%5B1..4%5D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R2%7D%22%5D%0D%0AR1%20-%3E%20R2%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void Range(string[] arr)
    {
        var value = arr[1..4];
    }
*/

digraph "Range" {
subgraph "cluster_Sonar.Range" {
label = "Sonar.Range"
0 [shape=record label="{SIMPLE|IdentifierNameSyntax: arr|RangeExpressionSyntax: 1..4|ElementAccessExpressionSyntax: arr[1..4]|VariableDeclaratorSyntax: value = arr[1..4]}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.Range" {
label = "Roslyn.Range"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# LocalReferenceOperation / VariableDeclaratorSyntax: value = arr[1..4]|2# ParameterReferenceOperation / IdentifierNameSyntax: arr|4# LiteralOperation / LiteralExpressionSyntax: 1|3# ConversionOperation / LiteralExpressionSyntax: 1|4# LiteralOperation / LiteralExpressionSyntax: 4|3# ConversionOperation / LiteralExpressionSyntax: 4|2# RangeOperation / RangeExpressionSyntax: 1..4|1# ArrayElementReferenceOperation / ElementAccessExpressionSyntax: arr[1..4]|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: value = arr[1..4]|##########}"]
R0 -> R1
R2 [shape=record label="{EXIT #R2}"]
R1 -> R2
}
}
