digraph "Roslyn.ConditionAndOr" {
0 [shape=record label="{ENTRY #0}"]
1 [shape=record label="{BLOCK #1|1# LocalReferenceOperation / VariableDeclaratorSyntax: value = \"Init\"|1# LiteralOperation / LiteralExpressionSyntax: \"Init\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: value = \"Init\"|##########|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: a|##########}"]
0 -> 1
2 [shape=record label="{BLOCK #2|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: b|##########}"]
1 -> 2 [label="Else"]
3 [shape=record label="{BLOCK #3|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: c|##########}"]
2 -> 3 [label="Else"]
4 [shape=record label="{BLOCK #4|2# LocalReferenceOperation / IdentifierNameSyntax: value|2# LiteralOperation / LiteralExpressionSyntax: \"Modified\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: value = \"Modified\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: value = \"Modified\";|##########}"]
2 -> 4 [label="WhenTrue"]
3 -> 4 [label="Else"]
5 [shape=record label="{BLOCK #5|## BranchValue ##|0# LocalReferenceOperation / IdentifierNameSyntax: value|##########}"]
1 -> 5 [label="WhenFalse"]
3 -> 5 [label="WhenFalse"]
4 -> 5
6 [shape=record label="{EXIT #6}"]
5 -> 6
}
