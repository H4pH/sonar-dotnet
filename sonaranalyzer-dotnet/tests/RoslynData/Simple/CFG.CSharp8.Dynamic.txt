// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22Dynamic%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.Dynamic%22%20%7B%0Alabel%20%3D%20%22Sonar.Dynamic%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20arg%7CMemberAccessExpressionSyntax%3A%20arg.Field%7CLiteralExpressionSyntax%3A%2042%7CAssignmentExpressionSyntax%3A%20arg.Field%20%3D%2042%7CIdentifierNameSyntax%3A%20arg%7CMemberAccessExpressionSyntax%3A%20arg.Value%7CInvocationExpressionSyntax%3A%20arg.Value()%7CVariableDeclaratorSyntax%3A%20invocation%20%3D%20arg.Value()%7CIdentifierNameSyntax%3A%20arg%7CMemberAccessExpressionSyntax%3A%20arg.Field%7CVariableDeclaratorSyntax%3A%20field%20%3D%20arg.Field%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.Dynamic%22%20%7B%0Alabel%20%3D%20%22Roslyn.Dynamic%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C3%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C2%23%20DynamicMemberReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20arg.Field%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%2042%7C1%23%20SimpleAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20arg.Field%20%3D%2042%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20arg.Field%20%3D%2042%3B%7C%23%23%23%23%23%23%23%23%23%23%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20invocation%20%3D%20arg.Value()%7C3%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C2%23%20DynamicMemberReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20arg.Value%7C1%23%20DynamicInvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20arg.Value()%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20invocation%20%3D%20arg.Value()%7C%23%23%23%23%23%23%23%23%23%23%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20field%20%3D%20arg.Field%7C2%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arg%7C1%23%20DynamicMemberReferenceOperation%20%2F%20MemberAccessExpressionSyntax%3A%20arg.Field%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20field%20%3D%20arg.Field%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root2%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void Dynamic(dynamic arg)
    {
        arg.Field = 42;
        var invocation = arg.Value();
        var field = arg.Field;
    }
*/

digraph "Dynamic" {
subgraph "cluster_Sonar.Dynamic" {
label = "Sonar.Dynamic"
0 [shape=record label="{SIMPLE|IdentifierNameSyntax: arg|MemberAccessExpressionSyntax: arg.Field|LiteralExpressionSyntax: 42|AssignmentExpressionSyntax: arg.Field = 42|IdentifierNameSyntax: arg|MemberAccessExpressionSyntax: arg.Value|InvocationExpressionSyntax: arg.Value()|VariableDeclaratorSyntax: invocation = arg.Value()|IdentifierNameSyntax: arg|MemberAccessExpressionSyntax: arg.Field|VariableDeclaratorSyntax: field = arg.Field}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.Dynamic" {
label = "Roslyn.Dynamic"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|3# ParameterReferenceOperation / IdentifierNameSyntax: arg|2# DynamicMemberReferenceOperation / MemberAccessExpressionSyntax: arg.Field|2# LiteralOperation / LiteralExpressionSyntax: 42|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: arg.Field = 42|0# ExpressionStatementOperation / ExpressionStatementSyntax: arg.Field = 42;|##########|1# LocalReferenceOperation / VariableDeclaratorSyntax: invocation = arg.Value()|3# ParameterReferenceOperation / IdentifierNameSyntax: arg|2# DynamicMemberReferenceOperation / MemberAccessExpressionSyntax: arg.Value|1# DynamicInvocationOperation / InvocationExpressionSyntax: arg.Value()|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: invocation = arg.Value()|##########|1# LocalReferenceOperation / VariableDeclaratorSyntax: field = arg.Field|2# ParameterReferenceOperation / IdentifierNameSyntax: arg|1# DynamicMemberReferenceOperation / MemberAccessExpressionSyntax: arg.Field|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: field = arg.Field|##########}"]
Root0 -> Root1
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root2 [shape=record label="{EXIT #Root2}"]
Root1 -> Root2
}
}
