// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22VariableDeclaration%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.VariableDeclaration%22%20%7B%0Alabel%20%3D%20%22Sonar.VariableDeclaration%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%201%7CVariableDeclaratorSyntax%3A%20a%20%3D%201%7CIdentifierNameSyntax%3A%20a%7CLiteralExpressionSyntax%3A%201%7CBinaryExpressionSyntax%3A%20a%20%2B%201%7CVariableDeclaratorSyntax%3A%20b%20%3D%20a%20%2B%201%7CLiteralExpressionSyntax%3A%201%7CLiteralExpressionSyntax%3A%202%7CBinaryExpressionSyntax%3A%201%20%2B%202%7CLiteralExpressionSyntax%3A%203%7CBinaryExpressionSyntax%3A%201%20%2B%202%20%2B%203%7CVariableDeclaratorSyntax%3A%20c%20%3D%201%20%2B%202%20%2B%203%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.VariableDeclaration%22%20%7B%0Alabel%20%3D%20%22Roslyn.VariableDeclaration%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20a%20%3D%201%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20a%20%3D%201%7C%23%23%23%23%23%23%23%23%23%23%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20b%20%3D%20a%20%2B%201%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C1%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20a%20%2B%201%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20b%20%3D%20a%20%2B%201%7C%23%23%23%23%23%23%23%23%23%23%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20c%20%3D%201%20%2B%202%20%2B%203%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%202%7C2%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%201%20%2B%202%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%203%7C1%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%201%20%2B%202%20%2B%203%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20c%20%3D%201%20%2B%202%20%2B%203%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root2%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void VariableDeclaration()
    {
        int a = 1, b = a + 1, c = 1 + 2 + 3;
    }
*/

digraph "VariableDeclaration" {
subgraph "cluster_Sonar.VariableDeclaration" {
label = "Sonar.VariableDeclaration"
0 [shape=record label="{SIMPLE|LiteralExpressionSyntax: 1|VariableDeclaratorSyntax: a = 1|IdentifierNameSyntax: a|LiteralExpressionSyntax: 1|BinaryExpressionSyntax: a + 1|VariableDeclaratorSyntax: b = a + 1|LiteralExpressionSyntax: 1|LiteralExpressionSyntax: 2|BinaryExpressionSyntax: 1 + 2|LiteralExpressionSyntax: 3|BinaryExpressionSyntax: 1 + 2 + 3|VariableDeclaratorSyntax: c = 1 + 2 + 3}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.VariableDeclaration" {
label = "Roslyn.VariableDeclaration"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|1# LocalReferenceOperation / VariableDeclaratorSyntax: a = 1|1# LiteralOperation / LiteralExpressionSyntax: 1|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: a = 1|##########|1# LocalReferenceOperation / VariableDeclaratorSyntax: b = a + 1|2# LocalReferenceOperation / IdentifierNameSyntax: a|2# LiteralOperation / LiteralExpressionSyntax: 1|1# BinaryOperation / BinaryExpressionSyntax: a + 1|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: b = a + 1|##########|1# LocalReferenceOperation / VariableDeclaratorSyntax: c = 1 + 2 + 3|3# LiteralOperation / LiteralExpressionSyntax: 1|3# LiteralOperation / LiteralExpressionSyntax: 2|2# BinaryOperation / BinaryExpressionSyntax: 1 + 2|2# LiteralOperation / LiteralExpressionSyntax: 3|1# BinaryOperation / BinaryExpressionSyntax: 1 + 2 + 3|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: c = 1 + 2 + 3|##########}"]
Root0 -> Root1
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root2 [shape=record label="{EXIT #Root2}"]
Root1 -> Root2
}
}
