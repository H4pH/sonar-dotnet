// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22BinarySyntax%22+%7B%0D%0Asubgraph+%22cluster_Sonar.BinarySyntax%22+%7B%0Alabel+%3D+%22Sonar.BinarySyntax%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A+%5C%22Lorem%5C%22%7CLiteralExpressionSyntax%3A+%5C%22Ipsum%5C%22%7CBinaryExpressionSyntax%3A+%5C%22Lorem%5C%22+%2B+%5C%22Ipsum%5C%22%7CLiteralExpressionSyntax%3A+%5C%22Dolor%5C%22%7CBinaryExpressionSyntax%3A+%5C%22Lorem%5C%22+%2B+%5C%22Ipsum%5C%22+%2B+%5C%22Dolor%5C%22%7CLiteralExpressionSyntax%3A+%5C%22Samet%5C%22%7CBinaryExpressionSyntax%3A+%5C%22Lorem%5C%22+%2B+%5C%22Ipsum%5C%22+%2B+%5C%22Dolor%5C%22+%2B+%5C%22Samet%5C%22%7CVariableDeclaratorSyntax%3A+value+%3D+%5C%22Lorem%5C%22+%2B+%5C%22Ipsum%5C%22+%2B+%5C%22Dolor%5C%22+%2B+%5C%22Samet%5C%22%7CIdentifierNameSyntax%3A+Console%7CMemberAccessExpressionSyntax%3A+Console.WriteLine%7CIdentifierNameSyntax%3A+value%7CInvocationExpressionSyntax%3A+Console.WriteLine(value)%7D%22%5D%0D%0A0+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.BinarySyntax%22+%7B%0Alabel+%3D+%22Roslyn.BinarySyntax%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0AR1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23R1%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+value+%3D+%5C%22Lorem%5C%22+%2B+%5C%22Ipsum%5C%22+%2B+%5C%22Dolor%5C%22+%2B+%5C%22Samet%5C%22%7C4%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Lorem%5C%22%7C4%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Ipsum%5C%22%7C3%23+BinaryOperation+%2F+BinaryExpressionSyntax%3A+%5C%22Lorem%5C%22+%2B+%5C%22Ipsum%5C%22%7C3%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Dolor%5C%22%7C2%23+BinaryOperation+%2F+BinaryExpressionSyntax%3A+%5C%22Lorem%5C%22+%2B+%5C%22Ipsum%5C%22+%2B+%5C%22Dolor%5C%22%7C2%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22Samet%5C%22%7C1%23+BinaryOperation+%2F+BinaryExpressionSyntax%3A+%5C%22Lorem%5C%22+%2B+%5C%22Ipsum%5C%22+%2B+%5C%22Dolor%5C%22+%2B+%5C%22Samet%5C%22%7C0%23+SimpleAssignmentOperation+%2F+VariableDeclaratorSyntax%3A+value+%3D+%5C%22Lorem%5C%22+%2B+%5C%22Ipsum%5C%22+%2B+%5C%22Dolor%5C%22+%2B+%5C%22Samet%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7C3%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+value%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+value%7C1%23+InvocationOperation+%2F+InvocationExpressionSyntax%3A+Console.WriteLine(value)%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+Console.WriteLine(value)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0+-%3E+R1%0D%0A%7D%0D%0AR0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23R0%7D%22%5D%0D%0AR2+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23R2%7D%22%5D%0D%0AR1+-%3E+R2%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void BinarySyntax()
    {
        var value = "Lorem" + "Ipsum" + "Dolor" + "Samet";
        Console.WriteLine(value);
    }
*/

digraph "BinarySyntax" {
subgraph "cluster_Sonar.BinarySyntax" {
label = "Sonar.BinarySyntax"
0 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Lorem\"|LiteralExpressionSyntax: \"Ipsum\"|BinaryExpressionSyntax: \"Lorem\" + \"Ipsum\"|LiteralExpressionSyntax: \"Dolor\"|BinaryExpressionSyntax: \"Lorem\" + \"Ipsum\" + \"Dolor\"|LiteralExpressionSyntax: \"Samet\"|BinaryExpressionSyntax: \"Lorem\" + \"Ipsum\" + \"Dolor\" + \"Samet\"|VariableDeclaratorSyntax: value = \"Lorem\" + \"Ipsum\" + \"Dolor\" + \"Samet\"|IdentifierNameSyntax: Console|MemberAccessExpressionSyntax: Console.WriteLine|IdentifierNameSyntax: value|InvocationExpressionSyntax: Console.WriteLine(value)}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.BinarySyntax" {
label = "Roslyn.BinarySyntax"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
R1 [shape=record label="{BLOCK #R1|1# LocalReferenceOperation / VariableDeclaratorSyntax: value = \"Lorem\" + \"Ipsum\" + \"Dolor\" + \"Samet\"|4# LiteralOperation / LiteralExpressionSyntax: \"Lorem\"|4# LiteralOperation / LiteralExpressionSyntax: \"Ipsum\"|3# BinaryOperation / BinaryExpressionSyntax: \"Lorem\" + \"Ipsum\"|3# LiteralOperation / LiteralExpressionSyntax: \"Dolor\"|2# BinaryOperation / BinaryExpressionSyntax: \"Lorem\" + \"Ipsum\" + \"Dolor\"|2# LiteralOperation / LiteralExpressionSyntax: \"Samet\"|1# BinaryOperation / BinaryExpressionSyntax: \"Lorem\" + \"Ipsum\" + \"Dolor\" + \"Samet\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: value = \"Lorem\" + \"Ipsum\" + \"Dolor\" + \"Samet\"|##########|3# LocalReferenceOperation / IdentifierNameSyntax: value|2# ArgumentOperation / ArgumentSyntax: value|1# InvocationOperation / InvocationExpressionSyntax: Console.WriteLine(value)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Console.WriteLine(value);|##########}"]
R0 -> R1
}
R0 [shape=record label="{ENTRY #R0}"]
R2 [shape=record label="{EXIT #R2}"]
R1 -> R2
}
}
