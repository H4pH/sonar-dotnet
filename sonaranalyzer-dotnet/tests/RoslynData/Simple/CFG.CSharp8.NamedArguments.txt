// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22NamedArguments%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.NamedArguments%22%20%7B%0Alabel%20%3D%20%22Sonar.NamedArguments%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20ArrowAdd%7CLiteralExpressionSyntax%3A%201%7CLiteralExpressionSyntax%3A%20100%7CInvocationExpressionSyntax%3A%20ArrowAdd(b%3A%201%2C%20a%3A%20100)%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.NamedArguments%22%20%7B%0Alabel%20%3D%20%22Roslyn.NamedArguments%22%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C2%23%20InstanceReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20ArrowAdd%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20b%3A%201%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20100%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20a%3A%20100%7C1%23%20InvocationOperation.ArrowAdd%20%2F%20InvocationExpressionSyntax%3A%20ArrowAdd(b%3A%201%2C%20a%3A%20100)%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20ArrowAdd(b%3A%201%2C%20a%3A%20100)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root2%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void NamedArguments()
    {
        ArrowAdd(b: 1, a: 100);
    }
*/

digraph "NamedArguments" {
subgraph "cluster_Sonar.NamedArguments" {
label = "Sonar.NamedArguments"
0 [shape=record label="{SIMPLE|IdentifierNameSyntax: ArrowAdd|LiteralExpressionSyntax: 1|LiteralExpressionSyntax: 100|InvocationExpressionSyntax: ArrowAdd(b: 1, a: 100)}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.NamedArguments" {
label = "Roslyn.NamedArguments"
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|2# InstanceReferenceOperation / IdentifierNameSyntax: ArrowAdd|3# LiteralOperation / LiteralExpressionSyntax: 1|2# ArgumentOperation / ArgumentSyntax: b: 1|3# LiteralOperation / LiteralExpressionSyntax: 100|2# ArgumentOperation / ArgumentSyntax: a: 100|1# InvocationOperation.ArrowAdd / InvocationExpressionSyntax: ArrowAdd(b: 1, a: 100)|0# ExpressionStatementOperation / ExpressionStatementSyntax: ArrowAdd(b: 1, a: 100);|##########}"]
Root0 -> Root1
Root2 [shape=record label="{EXIT #Root2}"]
Root1 -> Root2
}
}
