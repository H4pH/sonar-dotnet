// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22Index%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.Index%22%20%7B%0Alabel%20%3D%20%22Sonar.Index%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20arr%7CPrefixUnaryExpressionSyntax%3A%20%5E1%7CElementAccessExpressionSyntax%3A%20arr%5B%5E1%5D%7CVariableDeclaratorSyntax%3A%20value%20%3D%20arr%5B%5E1%5D%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.Index%22%20%7B%0Alabel%20%3D%20%22Roslyn.Index%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20arr%5B%5E1%5D%7C2%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20arr%7C3%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C2%23%20UnaryOperation%20%2F%20PrefixUnaryExpressionSyntax%3A%20%5E1%7C1%23%20ArrayElementReferenceOperation%20%2F%20ElementAccessExpressionSyntax%3A%20arr%5B%5E1%5D%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20arr%5B%5E1%5D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root2%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void Index(string[] arr)
    {
        var value = arr[^1];
    }
*/

digraph "Index" {
subgraph "cluster_Sonar.Index" {
label = "Sonar.Index"
0 [shape=record label="{SIMPLE|IdentifierNameSyntax: arr|PrefixUnaryExpressionSyntax: ^1|ElementAccessExpressionSyntax: arr[^1]|VariableDeclaratorSyntax: value = arr[^1]}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.Index" {
label = "Roslyn.Index"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|1# LocalReferenceOperation / VariableDeclaratorSyntax: value = arr[^1]|2# ParameterReferenceOperation / IdentifierNameSyntax: arr|3# LiteralOperation / LiteralExpressionSyntax: 1|2# UnaryOperation / PrefixUnaryExpressionSyntax: ^1|1# ArrayElementReferenceOperation / ElementAccessExpressionSyntax: arr[^1]|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: value = arr[^1]|##########}"]
Root0 -> Root1
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root2 [shape=record label="{EXIT #Root2}"]
Root1 -> Root2
}
}
