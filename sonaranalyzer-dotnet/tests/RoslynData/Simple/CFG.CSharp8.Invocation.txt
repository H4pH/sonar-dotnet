// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22Invocation%22+%7B%0D%0Asubgraph+%22cluster_Sonar.Invocation%22+%7B%0Alabel+%3D+%22Sonar.Invocation%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A+arg%7CMemberAccessExpressionSyntax%3A+arg.ToString%7CInvocationExpressionSyntax%3A+arg.ToString()%7CVariableDeclaratorSyntax%3A+value+%3D+arg.ToString()%7CIdentifierNameSyntax%3A+Console%7CMemberAccessExpressionSyntax%3A+Console.WriteLine%7CIdentifierNameSyntax%3A+value%7CInvocationExpressionSyntax%3A+Console.WriteLine(value)%7D%22%5D%0D%0A0+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.Invocation%22+%7B%0Alabel+%3D+%22Roslyn.Invocation%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+value+%3D+arg.ToString()%7C2%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+arg%7C1%23+InvocationOperation.ToString+%2F+InvocationExpressionSyntax%3A+arg.ToString()%7C0%23+SimpleAssignmentOperation+%2F+VariableDeclaratorSyntax%3A+value+%3D+arg.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7C3%23+LocalReferenceOperation+%2F+IdentifierNameSyntax%3A+value%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+value%7C1%23+InvocationOperation.WriteLine+%2F+InvocationExpressionSyntax%3A+Console.WriteLine(value)%7C0%23+ExpressionStatementOperation+%2F+ExpressionStatementSyntax%3A+Console.WriteLine(value)%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0A%7D%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root2%7D%22%5D%0D%0ARoot1+-%3E+Root2%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void Invocation(object arg)
    {
        var value = arg.ToString();
        Console.WriteLine(value);
    }
*/

digraph "Invocation" {
subgraph "cluster_Sonar.Invocation" {
label = "Sonar.Invocation"
0 [shape=record label="{SIMPLE|IdentifierNameSyntax: arg|MemberAccessExpressionSyntax: arg.ToString|InvocationExpressionSyntax: arg.ToString()|VariableDeclaratorSyntax: value = arg.ToString()|IdentifierNameSyntax: Console|MemberAccessExpressionSyntax: Console.WriteLine|IdentifierNameSyntax: value|InvocationExpressionSyntax: Console.WriteLine(value)}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.Invocation" {
label = "Roslyn.Invocation"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root1 [shape=record label="{BLOCK #Root1|1# LocalReferenceOperation / VariableDeclaratorSyntax: value = arg.ToString()|2# ParameterReferenceOperation / IdentifierNameSyntax: arg|1# InvocationOperation.ToString / InvocationExpressionSyntax: arg.ToString()|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: value = arg.ToString()|##########|3# LocalReferenceOperation / IdentifierNameSyntax: value|2# ArgumentOperation / ArgumentSyntax: value|1# InvocationOperation.WriteLine / InvocationExpressionSyntax: Console.WriteLine(value)|0# ExpressionStatementOperation / ExpressionStatementSyntax: Console.WriteLine(value);|##########}"]
Root0 -> Root1
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root2 [shape=record label="{EXIT #Root2}"]
Root1 -> Root2
}
}
