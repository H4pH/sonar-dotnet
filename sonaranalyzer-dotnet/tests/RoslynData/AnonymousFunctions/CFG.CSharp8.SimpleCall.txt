// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22SimpleCall%22+%7B%0D%0Asubgraph+%22cluster_Sonar.SimpleCall%22+%7B%0Alabel+%3D+%22Sonar.SimpleCall%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CImplicitArrayCreationExpressionSyntax%3A+new%5B%5D+%5C%7B1%2C+2%5C%7D%7CLiteralExpressionSyntax%3A+1%7CLiteralExpressionSyntax%3A+2%7CInitializerExpressionSyntax%3A+%5C%7B1%2C+2%5C%7D%7CMemberAccessExpressionSyntax%3A+new%5B%5D+%5C%7B1%2C+2%5C%7D.OrderBy%7CSimpleLambdaExpressionSyntax%3A+x+%3D%5C%3E+x%7CInvocationExpressionSyntax%3A+new%5B%5D+%5C%7B1%2C+2%5C%7D.OrderBy(x+%3D%5C%3E+x)%7D%22%5D%0D%0A0+-%3E+1%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.SimpleCall%22+%7B%0Alabel+%3D+%22Roslyn.SimpleCall%22%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C%23%23+BranchValue+%23%23%7C5%23+LiteralOperation+%2F+ImplicitArrayCreationExpressionSyntax%3A+new%5B%5D+%5C%7B1%2C+2%5C%7D%7C6%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+1%7C6%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+2%7C5%23+ArrayInitializerOperation+%2F+InitializerExpressionSyntax%3A+%5C%7B1%2C+2%5C%7D%7C4%23+ArrayCreationOperation+%2F+ImplicitArrayCreationExpressionSyntax%3A+new%5B%5D+%5C%7B1%2C+2%5C%7D%7C3%23+ConversionOperation+%2F+ImplicitArrayCreationExpressionSyntax%3A+new%5B%5D+%5C%7B1%2C+2%5C%7D%7C2%23+ArgumentOperation+%2F+ImplicitArrayCreationExpressionSyntax%3A+new%5B%5D+%5C%7B1%2C+2%5C%7D%7C4%23+FlowAnonymousFunctionOperation+%2F+SimpleLambdaExpressionSyntax%3A+x+%3D%5C%3E+x%7C3%23+DelegateCreationOperation+%2F+SimpleLambdaExpressionSyntax%3A+x+%3D%5C%3E+x%7C2%23+ArgumentOperation+%2F+ArgumentSyntax%3A+x+%3D%5C%3E+x%7C1%23+InvocationOperation.OrderBy+%2F+InvocationExpressionSyntax%3A+new%5B%5D+%5C%7B1%2C+2%5C%7D.OrderBy(x+%3D%5C%3E+x)%7C0%23+ConversionOperation+%2F+InvocationExpressionSyntax%3A+new%5B%5D+%5C%7B1%2C+2%5C%7D.OrderBy(x+%3D%5C%3E+x)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root2%7D%22%5D%0D%0ARoot1+-%3E+Root2+%5Blabel%3D%22Return%22%5D%0D%0Asubgraph+%22cluster_Roslyn.SimpleCall.anonymous%22+%7B%0Alabel+%3D+%22Roslyn.SimpleCall.anonymous%22%0D%0AA0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23A0%7D%22%5D%0D%0AA1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23A1%7C%23%23+BranchValue+%23%23%7C0%23+ParameterReferenceOperation+%2F+IdentifierNameSyntax%3A+x%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AA0+-%3E+A1%0D%0AA2+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23A2%7D%22%5D%0D%0AA1+-%3E+A2+%5Blabel%3D%22Return%22%5D%0D%0A%7D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public IEnumerable<int> SimpleCall() => new[] {1, 2}.OrderBy(x => x);
*/

digraph "SimpleCall" {
subgraph "cluster_Sonar.SimpleCall" {
label = "Sonar.SimpleCall"
0 [shape=record label="{SIMPLE|ImplicitArrayCreationExpressionSyntax: new[] \{1, 2\}|LiteralExpressionSyntax: 1|LiteralExpressionSyntax: 2|InitializerExpressionSyntax: \{1, 2\}|MemberAccessExpressionSyntax: new[] \{1, 2\}.OrderBy|SimpleLambdaExpressionSyntax: x =\> x|InvocationExpressionSyntax: new[] \{1, 2\}.OrderBy(x =\> x)}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.SimpleCall" {
label = "Roslyn.SimpleCall"
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|5# LiteralOperation / ImplicitArrayCreationExpressionSyntax: new[] \{1, 2\}|6# LiteralOperation / LiteralExpressionSyntax: 1|6# LiteralOperation / LiteralExpressionSyntax: 2|5# ArrayInitializerOperation / InitializerExpressionSyntax: \{1, 2\}|4# ArrayCreationOperation / ImplicitArrayCreationExpressionSyntax: new[] \{1, 2\}|3# ConversionOperation / ImplicitArrayCreationExpressionSyntax: new[] \{1, 2\}|2# ArgumentOperation / ImplicitArrayCreationExpressionSyntax: new[] \{1, 2\}|4# FlowAnonymousFunctionOperation / SimpleLambdaExpressionSyntax: x =\> x|3# DelegateCreationOperation / SimpleLambdaExpressionSyntax: x =\> x|2# ArgumentOperation / ArgumentSyntax: x =\> x|1# InvocationOperation.OrderBy / InvocationExpressionSyntax: new[] \{1, 2\}.OrderBy(x =\> x)|0# ConversionOperation / InvocationExpressionSyntax: new[] \{1, 2\}.OrderBy(x =\> x)|##########}"]
Root0 -> Root1
Root2 [shape=record label="{EXIT #Root2}"]
Root1 -> Root2 [label="Return"]
subgraph "cluster_Roslyn.SimpleCall.anonymous" {
label = "Roslyn.SimpleCall.anonymous"
A0 [shape=record label="{ENTRY #A0}"]
A1 [shape=record label="{BLOCK #A1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: x|##########}"]
A0 -> A1
A2 [shape=record label="{EXIT #A2}"]
A1 -> A2 [label="Return"]
}
}
}
