// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22SimpleCall%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.SimpleCall%22%20%7B%0Alabel%20%3D%20%22Sonar.SimpleCall%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B1%2C%202%5C%7D%7CLiteralExpressionSyntax%3A%201%7CLiteralExpressionSyntax%3A%202%7CInitializerExpressionSyntax%3A%20%5C%7B1%2C%202%5C%7D%7CMemberAccessExpressionSyntax%3A%20new%5B%5D%20%5C%7B1%2C%202%5C%7D.OrderBy%7CSimpleLambdaExpressionSyntax%3A%20x%20%3D%5C%3E%20x%7CInvocationExpressionSyntax%3A%20new%5B%5D%20%5C%7B1%2C%202%5C%7D.OrderBy(x%20%3D%5C%3E%20x)%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.SimpleCall%22%20%7B%0Alabel%20%3D%20%22Roslyn.SimpleCall%22%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C%23%23%20BranchValue%20%23%23%7C5%23%20LiteralOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B1%2C%202%5C%7D%7C6%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C6%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%202%7C5%23%20ArrayInitializerOperation%20%2F%20InitializerExpressionSyntax%3A%20%5C%7B1%2C%202%5C%7D%7C4%23%20ArrayCreationOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B1%2C%202%5C%7D%7C3%23%20ConversionOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B1%2C%202%5C%7D%7C2%23%20ArgumentOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B1%2C%202%5C%7D%7C4%23%20FlowAnonymousFunctionOperation%20%2F%20SimpleLambdaExpressionSyntax%3A%20x%20%3D%5C%3E%20x%7C3%23%20DelegateCreationOperation%20%2F%20SimpleLambdaExpressionSyntax%3A%20x%20%3D%5C%3E%20x%7C2%23%20ArgumentOperation%20%2F%20ArgumentSyntax%3A%20x%20%3D%5C%3E%20x%7C1%23%20InvocationOperation.OrderBy%20%2F%20InvocationExpressionSyntax%3A%20new%5B%5D%20%5C%7B1%2C%202%5C%7D.OrderBy(x%20%3D%5C%3E%20x)%7C0%23%20ConversionOperation%20%2F%20InvocationExpressionSyntax%3A%20new%5B%5D%20%5C%7B1%2C%202%5C%7D.OrderBy(x%20%3D%5C%3E%20x)%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root2%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%20%5Blabel%3D%22Return%22%5D%0D%0Asubgraph%20%22cluster_Roslyn.SimpleCall.anonymous%22%20%7B%0Alabel%20%3D%20%22Roslyn.SimpleCall.anonymous%22%0D%0AA0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23A0%7D%22%5D%0D%0AA1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23A1%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20x%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AA0%20-%3E%20A1%0D%0AA2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23A2%7D%22%5D%0D%0AA1%20-%3E%20A2%20%5Blabel%3D%22Return%22%5D%0D%0A%7D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public IEnumerable<int> SimpleCall() => new[] {1, 2}.OrderBy(x => x);
*/

digraph "SimpleCall" {
subgraph "cluster_Sonar.SimpleCall" {
label = "Sonar.SimpleCall"
0 [shape=record label="{SIMPLE|ImplicitArrayCreationExpressionSyntax: new[] \{1, 2\}|LiteralExpressionSyntax: 1|LiteralExpressionSyntax: 2|InitializerExpressionSyntax: \{1, 2\}|MemberAccessExpressionSyntax: new[] \{1, 2\}.OrderBy|SimpleLambdaExpressionSyntax: x =\> x|InvocationExpressionSyntax: new[] \{1, 2\}.OrderBy(x =\> x)}"]
0 -> 1
1 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.SimpleCall" {
label = "Roslyn.SimpleCall"
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|5# LiteralOperation / ImplicitArrayCreationExpressionSyntax: new[] \{1, 2\}|6# LiteralOperation / LiteralExpressionSyntax: 1|6# LiteralOperation / LiteralExpressionSyntax: 2|5# ArrayInitializerOperation / InitializerExpressionSyntax: \{1, 2\}|4# ArrayCreationOperation / ImplicitArrayCreationExpressionSyntax: new[] \{1, 2\}|3# ConversionOperation / ImplicitArrayCreationExpressionSyntax: new[] \{1, 2\}|2# ArgumentOperation / ImplicitArrayCreationExpressionSyntax: new[] \{1, 2\}|4# FlowAnonymousFunctionOperation / SimpleLambdaExpressionSyntax: x =\> x|3# DelegateCreationOperation / SimpleLambdaExpressionSyntax: x =\> x|2# ArgumentOperation / ArgumentSyntax: x =\> x|1# InvocationOperation.OrderBy / InvocationExpressionSyntax: new[] \{1, 2\}.OrderBy(x =\> x)|0# ConversionOperation / InvocationExpressionSyntax: new[] \{1, 2\}.OrderBy(x =\> x)|##########}"]
Root0 -> Root1
Root2 [shape=record label="{EXIT #Root2}"]
Root1 -> Root2 [label="Return"]
subgraph "cluster_Roslyn.SimpleCall.anonymous" {
label = "Roslyn.SimpleCall.anonymous"
A0 [shape=record label="{ENTRY #A0}"]
A1 [shape=record label="{BLOCK #A1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: x|##########}"]
A0 -> A1
A2 [shape=record label="{EXIT #A2}"]
A1 -> A2 [label="Return"]
}
}
}
