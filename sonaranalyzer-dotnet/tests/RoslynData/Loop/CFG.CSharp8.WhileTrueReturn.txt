// http://viz-js.com/
// http://magjac.com/graphviz-visual-editor/?dot=digraph+%22WhileTrueReturn%22+%7B%0D%0Asubgraph+%22cluster_Sonar.WhileTrueReturn%22+%7B%0Alabel+%3D+%22Sonar.WhileTrueReturn%22%0D%0A0+%5Bshape%3Drecord+label%3D%22%7BBINARY%3ATrueLiteralExpression%7CLiteralExpressionSyntax%3A+true%7D%22%5D%0D%0A0+-%3E+1+%5Blabel%3D%22True%22%5D%0D%0A0+-%3E+2+%5Blabel%3D%22False%22%5D%0D%0A1+%5Bshape%3Drecord+label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A+%5C%22BeforeReturn%5C%22%7CVariableDeclaratorSyntax%3A+beforeReturn+%3D+%5C%22BeforeReturn%5C%22%7D%22%5D%0D%0A1+-%3E+2%0D%0A3+%5Bshape%3Drecord+label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A+%5C%22afterReturn%5C%22%7CVariableDeclaratorSyntax%3A+afterReturn+%3D+%5C%22afterReturn%5C%22%7D%22%5D%0D%0A3+-%3E+0%0D%0A2+%5Bshape%3Drecord+label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph+%22cluster_Roslyn.WhileTrueReturn%22+%7B%0Alabel+%3D+%22Roslyn.WhileTrueReturn%22%0D%0Asubgraph+%22cluster_LocalLifetime+region%22+%7B%0Alabel+%3D+%22LocalLifetime+region%22%0D%0ARoot2+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root2%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+beforeReturn+%3D+%5C%22BeforeReturn%5C%22%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22BeforeReturn%5C%22%7C0%23+SimpleAssignmentOperation+%2F+VariableDeclaratorSyntax%3A+beforeReturn+%3D+%5C%22BeforeReturn%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1+-%3E+Root2+%5Blabel%3D%22Else%22%5D%0D%0ARoot3+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root3%7C1%23+LocalReferenceOperation+%2F+VariableDeclaratorSyntax%3A+afterReturn+%3D+%5C%22afterReturn%5C%22%7C1%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+%5C%22afterReturn%5C%22%7C0%23+SimpleAssignmentOperation+%2F+VariableDeclaratorSyntax%3A+afterReturn+%3D+%5C%22afterReturn%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0ARoot0+%5Bshape%3Drecord+label%3D%22%7BENTRY+%23Root0%7D%22%5D%0D%0ARoot1+%5Bshape%3Drecord+label%3D%22%7BBLOCK+%23Root1%7C%23%23+BranchValue+%23%23%7C0%23+LiteralOperation+%2F+LiteralExpressionSyntax%3A+true%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0+-%3E+Root1%0D%0ARoot3+-%3E+Root1%0D%0ARoot4+%5Bshape%3Drecord+label%3D%22%7BEXIT+%23Root4%7D%22%5D%0D%0ARoot1+-%3E+Root4+%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot2+-%3E+Root4%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void WhileTrueReturn()
    {
        while (true)
        {
            var beforeReturn = "BeforeReturn";
            return;
            var afterReturn = "afterReturn";
        }
    }
*/

digraph "WhileTrueReturn" {
subgraph "cluster_Sonar.WhileTrueReturn" {
label = "Sonar.WhileTrueReturn"
0 [shape=record label="{BINARY:TrueLiteralExpression|LiteralExpressionSyntax: true}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: \"BeforeReturn\"|VariableDeclaratorSyntax: beforeReturn = \"BeforeReturn\"}"]
1 -> 2
3 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"afterReturn\"|VariableDeclaratorSyntax: afterReturn = \"afterReturn\"}"]
3 -> 0
2 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.WhileTrueReturn" {
label = "Roslyn.WhileTrueReturn"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root2 [shape=record label="{BLOCK #Root2|1# LocalReferenceOperation / VariableDeclaratorSyntax: beforeReturn = \"BeforeReturn\"|1# LiteralOperation / LiteralExpressionSyntax: \"BeforeReturn\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: beforeReturn = \"BeforeReturn\"|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|1# LocalReferenceOperation / VariableDeclaratorSyntax: afterReturn = \"afterReturn\"|1# LiteralOperation / LiteralExpressionSyntax: \"afterReturn\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: afterReturn = \"afterReturn\"|##########}"]
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|0# LiteralOperation / LiteralExpressionSyntax: true|##########}"]
Root0 -> Root1
Root3 -> Root1
Root4 [shape=record label="{EXIT #Root4}"]
Root1 -> Root4 [label="WhenFalse"]
Root2 -> Root4
}
}
