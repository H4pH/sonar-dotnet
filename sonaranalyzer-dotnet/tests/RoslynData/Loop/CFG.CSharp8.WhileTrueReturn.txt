// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22WhileTrueReturn%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.WhileTrueReturn%22%20%7B%0Alabel%20%3D%20%22Sonar.WhileTrueReturn%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ATrueLiteralExpression%7CLiteralExpressionSyntax%3A%20true%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AReturnStatement%7CLiteralExpressionSyntax%3A%20%5C%22BeforeReturn%5C%22%7CVariableDeclaratorSyntax%3A%20beforeReturn%20%3D%20%5C%22BeforeReturn%5C%22%7D%22%5D%0D%0A1%20-%3E%202%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22afterReturn%5C%22%7CVariableDeclaratorSyntax%3A%20afterReturn%20%3D%20%5C%22afterReturn%5C%22%7D%22%5D%0D%0A3%20-%3E%200%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.WhileTrueReturn%22%20%7B%0Alabel%20%3D%20%22Roslyn.WhileTrueReturn%22%0D%0Asubgraph%20%22cluster_LocalLifetime%20region%22%20%7B%0Alabel%20%3D%20%22LocalLifetime%20region%22%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20beforeReturn%20%3D%20%5C%22BeforeReturn%5C%22%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22BeforeReturn%5C%22%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20beforeReturn%20%3D%20%5C%22BeforeReturn%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%20%5Blabel%3D%22Else%22%5D%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20afterReturn%20%3D%20%5C%22afterReturn%5C%22%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22afterReturn%5C%22%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20afterReturn%20%3D%20%5C%22afterReturn%5C%22%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0A%7D%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C%23%23%20BranchValue%20%23%23%7C0%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20true%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot3%20-%3E%20Root1%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root4%7D%22%5D%0D%0ARoot1%20-%3E%20Root4%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot2%20-%3E%20Root4%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void WhileTrueReturn()
    {
        while (true)
        {
            var beforeReturn = "BeforeReturn";
            return;
            var afterReturn = "afterReturn";
        }
    }
*/

digraph "WhileTrueReturn" {
subgraph "cluster_Sonar.WhileTrueReturn" {
label = "Sonar.WhileTrueReturn"
0 [shape=record label="{BINARY:TrueLiteralExpression|LiteralExpressionSyntax: true}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{JUMP:ReturnStatement|LiteralExpressionSyntax: \"BeforeReturn\"|VariableDeclaratorSyntax: beforeReturn = \"BeforeReturn\"}"]
1 -> 2
3 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"afterReturn\"|VariableDeclaratorSyntax: afterReturn = \"afterReturn\"}"]
3 -> 0
2 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.WhileTrueReturn" {
label = "Roslyn.WhileTrueReturn"
subgraph "cluster_LocalLifetime region" {
label = "LocalLifetime region"
Root2 [shape=record label="{BLOCK #Root2|1# LocalReferenceOperation / VariableDeclaratorSyntax: beforeReturn = \"BeforeReturn\"|1# LiteralOperation / LiteralExpressionSyntax: \"BeforeReturn\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: beforeReturn = \"BeforeReturn\"|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|1# LocalReferenceOperation / VariableDeclaratorSyntax: afterReturn = \"afterReturn\"|1# LiteralOperation / LiteralExpressionSyntax: \"afterReturn\"|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: afterReturn = \"afterReturn\"|##########}"]
}
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|0# LiteralOperation / LiteralExpressionSyntax: true|##########}"]
Root0 -> Root1
Root3 -> Root1
Root4 [shape=record label="{EXIT #Root4}"]
Root1 -> Root4 [label="WhenFalse"]
Root2 -> Root4
}
}
