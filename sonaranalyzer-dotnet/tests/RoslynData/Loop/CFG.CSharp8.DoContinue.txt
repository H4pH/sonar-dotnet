// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22DoContinue%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.DoContinue%22%20%7B%0Alabel%20%3D%20%22Sonar.DoContinue%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%200%7CVariableDeclaratorSyntax%3A%20i%20%3D%200%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ALessThanExpression%7CIdentifierNameSyntax%3A%20i%7CPostfixUnaryExpressionSyntax%3A%20i%2B%2B%7CIdentifierNameSyntax%3A%20i%7CLiteralExpressionSyntax%3A%205%7CBinaryExpressionSyntax%3A%20i%20%5C%3C%205%7D%22%5D%0D%0A1%20-%3E%202%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BJUMP%3AContinueStatement%7D%22%5D%0D%0A2%20-%3E%204%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20i%7CLiteralExpressionSyntax%3A%2010%7CAssignmentExpressionSyntax%3A%20i%20%2B%3D%2010%7D%22%5D%0D%0A3%20-%3E%204%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3ALessThanExpression%7CIdentifierNameSyntax%3A%20i%7CLiteralExpressionSyntax%3A%2010%7CBinaryExpressionSyntax%3A%20i%20%5C%3C%2010%7D%22%5D%0D%0A4%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A4%20-%3E%205%20%5Blabel%3D%22False%22%5D%0D%0A5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.DoContinue%22%20%7B%0Alabel%20%3D%20%22Roslyn.DoContinue%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20i%20%3D%200%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20i%20%3D%200%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C1%23%20IncrementOrDecrementOperation%20%2F%20PostfixUnaryExpressionSyntax%3A%20i%2B%2B%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20i%2B%2B%3B%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%205%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20i%20%5C%3C%205%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%0D%0AR4%20-%3E%20R2%20%5Blabel%3D%22WhenTrue%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%2010%7C1%23%20CompoundAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20i%20%2B%3D%2010%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20i%20%2B%3D%2010%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R3%20%5Blabel%3D%22WhenFalse%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C1%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%2010%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20i%20%5C%3C%2010%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R4%20%5Blabel%3D%22Else%22%5D%0D%0AR3%20-%3E%20R4%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R5%7D%22%5D%0D%0AR4%20-%3E%20R5%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void DoContinue()
    {
        var i = 0;
        do
        {
            i++;
            if (i < 5)
            {
                continue;
            }
            i += 10;
        } while (i < 10);
    }
*/

digraph "DoContinue" {
subgraph "cluster_Sonar.DoContinue" {
label = "Sonar.DoContinue"
0 [shape=record label="{SIMPLE|LiteralExpressionSyntax: 0|VariableDeclaratorSyntax: i = 0}"]
0 -> 1
1 [shape=record label="{BINARY:LessThanExpression|IdentifierNameSyntax: i|PostfixUnaryExpressionSyntax: i++|IdentifierNameSyntax: i|LiteralExpressionSyntax: 5|BinaryExpressionSyntax: i \< 5}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{JUMP:ContinueStatement}"]
2 -> 4
3 [shape=record label="{SIMPLE|IdentifierNameSyntax: i|LiteralExpressionSyntax: 10|AssignmentExpressionSyntax: i += 10}"]
3 -> 4
4 [shape=record label="{BINARY:LessThanExpression|IdentifierNameSyntax: i|LiteralExpressionSyntax: 10|BinaryExpressionSyntax: i \< 10}"]
4 -> 1 [label="True"]
4 -> 5 [label="False"]
5 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.DoContinue" {
label = "Roslyn.DoContinue"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# LocalReferenceOperation / VariableDeclaratorSyntax: i = 0|1# LiteralOperation / LiteralExpressionSyntax: 0|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: i = 0|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|2# LocalReferenceOperation / IdentifierNameSyntax: i|1# IncrementOrDecrementOperation / PostfixUnaryExpressionSyntax: i++|0# ExpressionStatementOperation / ExpressionStatementSyntax: i++;|##########|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: i|1# LiteralOperation / LiteralExpressionSyntax: 5|0# BinaryOperation / BinaryExpressionSyntax: i \< 5|##########}"]
R1 -> R2
R4 -> R2 [label="WhenTrue"]
R3 [shape=record label="{BLOCK #R3|2# LocalReferenceOperation / IdentifierNameSyntax: i|2# LiteralOperation / LiteralExpressionSyntax: 10|1# CompoundAssignmentOperation / AssignmentExpressionSyntax: i += 10|0# ExpressionStatementOperation / ExpressionStatementSyntax: i += 10;|##########}"]
R2 -> R3 [label="WhenFalse"]
R4 [shape=record label="{BLOCK #R4|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: i|1# LiteralOperation / LiteralExpressionSyntax: 10|0# BinaryOperation / BinaryExpressionSyntax: i \< 10|##########}"]
R2 -> R4 [label="Else"]
R3 -> R4
R5 [shape=record label="{EXIT #R5}"]
R4 -> R5 [label="Else"]
}
}
