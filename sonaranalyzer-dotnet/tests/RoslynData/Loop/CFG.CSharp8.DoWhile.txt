// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22DoWhile%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.DoWhile%22%20%7B%0Alabel%20%3D%20%22Sonar.DoWhile%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20null%7CVariableDeclaratorSyntax%3A%20value%20%3D%20null%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20%5C%22Value%5C%22%7CAssignmentExpressionSyntax%3A%20value%20%3D%20%5C%22Value%5C%22%7D%22%5D%0D%0A1%20-%3E%202%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AEqualsExpression%7CIdentifierNameSyntax%3A%20value%7CLiteralExpressionSyntax%3A%20null%7CBinaryExpressionSyntax%3A%20value%20%3D%3D%20null%7D%22%5D%0D%0A2%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A2%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.DoWhile%22%20%7B%0Alabel%20%3D%20%22Roslyn.DoWhile%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20null%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C1%23%20ConversionOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20null%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20%5C%22Value%5C%22%7C1%23%20SimpleAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20value%20%3D%20%5C%22Value%5C%22%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20value%20%3D%20%5C%22Value%5C%22%3B%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20value%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C1%23%20ConversionOperation%20%2F%20LiteralExpressionSyntax%3A%20null%7C0%23%20BinaryOperation%20%2F%20BinaryExpressionSyntax%3A%20value%20%3D%3D%20null%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%0D%0AR2%20-%3E%20R2%20%5Blabel%3D%22WhenTrue%22%5D%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R3%7D%22%5D%0D%0AR2%20-%3E%20R3%20%5Blabel%3D%22Else%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void DoWhile()
    {
        string value = null;
        do
        {
            value = "Value";
        } while (value == null);
    }
*/

digraph "DoWhile" {
subgraph "cluster_Sonar.DoWhile" {
label = "Sonar.DoWhile"
0 [shape=record label="{SIMPLE|LiteralExpressionSyntax: null|VariableDeclaratorSyntax: value = null}"]
0 -> 1
1 [shape=record label="{SIMPLE|LiteralExpressionSyntax: \"Value\"|AssignmentExpressionSyntax: value = \"Value\"}"]
1 -> 2
2 [shape=record label="{BINARY:EqualsExpression|IdentifierNameSyntax: value|LiteralExpressionSyntax: null|BinaryExpressionSyntax: value == null}"]
2 -> 1 [label="True"]
2 -> 3 [label="False"]
3 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.DoWhile" {
label = "Roslyn.DoWhile"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|1# LocalReferenceOperation / VariableDeclaratorSyntax: value = null|2# LiteralOperation / LiteralExpressionSyntax: null|1# ConversionOperation / LiteralExpressionSyntax: null|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: value = null|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|2# LocalReferenceOperation / IdentifierNameSyntax: value|2# LiteralOperation / LiteralExpressionSyntax: \"Value\"|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: value = \"Value\"|0# ExpressionStatementOperation / ExpressionStatementSyntax: value = \"Value\";|##########|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: value|2# LiteralOperation / LiteralExpressionSyntax: null|1# ConversionOperation / LiteralExpressionSyntax: null|0# BinaryOperation / BinaryExpressionSyntax: value == null|##########}"]
R1 -> R2
R2 -> R2 [label="WhenTrue"]
R3 [shape=record label="{EXIT #R3}"]
R2 -> R3 [label="Else"]
}
}
