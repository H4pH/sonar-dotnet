digraph "Roslyn.DoContinue" {
0 [shape=record label="{ENTRY #0}"]
1 [shape=record label="{BLOCK #1|1# LocalReferenceOperation / VariableDeclaratorSyntax: i = 0|1# LiteralOperation / LiteralExpressionSyntax: 0|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: i = 0|##########}"]
0 -> 1
2 [shape=record label="{BLOCK #2|2# LocalReferenceOperation / IdentifierNameSyntax: i|1# IncrementOrDecrementOperation / PostfixUnaryExpressionSyntax: i++|0# ExpressionStatementOperation / ExpressionStatementSyntax: i++;|##########|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: i|1# LiteralOperation / LiteralExpressionSyntax: 5|0# BinaryOperation / BinaryExpressionSyntax: i \< 5|##########}"]
1 -> 2
4 -> 2 [label="WhenTrue"]
3 [shape=record label="{BLOCK #3|2# LocalReferenceOperation / IdentifierNameSyntax: i|2# LiteralOperation / LiteralExpressionSyntax: 10|1# CompoundAssignmentOperation / AssignmentExpressionSyntax: i += 10|0# ExpressionStatementOperation / ExpressionStatementSyntax: i += 10;|##########}"]
2 -> 3 [label="WhenFalse"]
4 [shape=record label="{BLOCK #4|## BranchValue ##|1# LocalReferenceOperation / IdentifierNameSyntax: i|1# LiteralOperation / LiteralExpressionSyntax: 10|0# BinaryOperation / BinaryExpressionSyntax: i \< 10|##########}"]
2 -> 4 [label="Else"]
3 -> 4
5 [shape=record label="{EXIT #5}"]
4 -> 5 [label="Else"]
}
