// http://viz-js.com/
// https://edotor.net/?engine=dot#digraph%20%22WhileAndOr%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.WhileAndOr%22%20%7B%0Alabel%20%3D%20%22Sonar.WhileAndOr%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A%20a%7D%22%5D%0D%0A0%20-%3E%201%20%5Blabel%3D%22True%22%5D%0D%0A0%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A%20b%7D%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%204%20%5Blabel%3D%22False%22%5D%0D%0A4%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AIdentifierName%7CIdentifierNameSyntax%3A%20c%7D%22%5D%0D%0A4%20-%3E%203%20%5Blabel%3D%22True%22%5D%0D%0A4%20-%3E%202%20%5Blabel%3D%22False%22%5D%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CLiteralExpressionSyntax%3A%20false%7CAssignmentExpressionSyntax%3A%20a%20%3D%20false%7D%22%5D%0D%0A3%20-%3E%200%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.WhileAndOr%22%20%7B%0Alabel%20%3D%20%22Roslyn.WhileAndOr%22%0D%0ARoot0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23Root0%7D%22%5D%0D%0ARoot1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root1%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot0%20-%3E%20Root1%0D%0ARoot4%20-%3E%20Root1%0D%0ARoot2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root2%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20b%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot1%20-%3E%20Root2%20%5Blabel%3D%22Else%22%5D%0D%0ARoot3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root3%7C%23%23%20BranchValue%20%23%23%7C0%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20c%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root3%20%5Blabel%3D%22Else%22%5D%0D%0ARoot4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23Root4%7C2%23%20ParameterReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20a%7C2%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%20false%7C1%23%20SimpleAssignmentOperation%20%2F%20AssignmentExpressionSyntax%3A%20a%20%3D%20false%7C0%23%20ExpressionStatementOperation%20%2F%20ExpressionStatementSyntax%3A%20a%20%3D%20false%3B%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0ARoot2%20-%3E%20Root4%20%5Blabel%3D%22WhenTrue%22%5D%0D%0ARoot3%20-%3E%20Root4%20%5Blabel%3D%22Else%22%5D%0D%0ARoot5%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23Root5%7D%22%5D%0D%0ARoot1%20-%3E%20Root5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0ARoot3%20-%3E%20Root5%20%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void WhileAndOr(bool a, bool b, bool c)
    {
        while (a && (b || c))
        {
            a = false;
        }
    }
*/

digraph "WhileAndOr" {
subgraph "cluster_Sonar.WhileAndOr" {
label = "Sonar.WhileAndOr"
0 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: a}"]
0 -> 1 [label="True"]
0 -> 2 [label="False"]
1 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: b}"]
1 -> 3 [label="True"]
1 -> 4 [label="False"]
4 [shape=record label="{BINARY:IdentifierName|IdentifierNameSyntax: c}"]
4 -> 3 [label="True"]
4 -> 2 [label="False"]
3 [shape=record label="{SIMPLE|LiteralExpressionSyntax: false|AssignmentExpressionSyntax: a = false}"]
3 -> 0
2 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.WhileAndOr" {
label = "Roslyn.WhileAndOr"
Root0 [shape=record label="{ENTRY #Root0}"]
Root1 [shape=record label="{BLOCK #Root1|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: a|##########}"]
Root0 -> Root1
Root4 -> Root1
Root2 [shape=record label="{BLOCK #Root2|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: b|##########}"]
Root1 -> Root2 [label="Else"]
Root3 [shape=record label="{BLOCK #Root3|## BranchValue ##|0# ParameterReferenceOperation / IdentifierNameSyntax: c|##########}"]
Root2 -> Root3 [label="Else"]
Root4 [shape=record label="{BLOCK #Root4|2# ParameterReferenceOperation / IdentifierNameSyntax: a|2# LiteralOperation / LiteralExpressionSyntax: false|1# SimpleAssignmentOperation / AssignmentExpressionSyntax: a = false|0# ExpressionStatementOperation / ExpressionStatementSyntax: a = false;|##########}"]
Root2 -> Root4 [label="WhenTrue"]
Root3 -> Root4 [label="Else"]
Root5 [shape=record label="{EXIT #Root5}"]
Root1 -> Root5 [label="WhenFalse"]
Root3 -> Root5 [label="WhenFalse"]
}
}
