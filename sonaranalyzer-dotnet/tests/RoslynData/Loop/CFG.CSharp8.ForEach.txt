// http://viz-js.com/
// https://dreampuf.github.io/GraphvizOnline/#digraph%20%22ForEach%22%20%7B%0D%0Asubgraph%20%22cluster_Sonar.ForEach%22%20%7B%0Alabel%20%3D%20%22Sonar.ForEach%22%0D%0A0%20%5Bshape%3Drecord%20label%3D%22%7BFOREACH%3AForEachStatement%7CImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7CLiteralExpressionSyntax%3A%200%7CLiteralExpressionSyntax%3A%201%7CLiteralExpressionSyntax%3A%202%7CLiteralExpressionSyntax%3A%204%7CLiteralExpressionSyntax%3A%208%7CLiteralExpressionSyntax%3A%2016%7CInitializerExpressionSyntax%3A%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7D%22%5D%0D%0A0%20-%3E%201%0D%0A1%20%5Bshape%3Drecord%20label%3D%22%7BBINARY%3AForEachStatement%7D%22%5D%0D%0A1%20-%3E%202%20%5Blabel%3D%22True%22%5D%0D%0A1%20-%3E%203%20%5Blabel%3D%22False%22%5D%0D%0A2%20%5Bshape%3Drecord%20label%3D%22%7BSIMPLE%7CIdentifierNameSyntax%3A%20i%7CMemberAccessExpressionSyntax%3A%20i.ToString%7CInvocationExpressionSyntax%3A%20i.ToString()%7CVariableDeclaratorSyntax%3A%20value%20%3D%20i.ToString()%7D%22%5D%0D%0A2%20-%3E%201%0D%0A3%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%7D%22%5D%0D%0A%7D%0D%0Asubgraph%20%22cluster_Roslyn.ForEach%22%20%7B%0Alabel%20%3D%20%22Roslyn.ForEach%22%0D%0AR0%20%5Bshape%3Drecord%20label%3D%22%7BENTRY%20%23R0%7D%22%5D%0D%0AR1%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R1%7C4%23%20LiteralOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C5%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%200%7C5%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%201%7C5%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%202%7C5%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%204%7C5%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%208%7C5%23%20LiteralOperation%20%2F%20LiteralExpressionSyntax%3A%2016%7C4%23%20ArrayInitializerOperation%20%2F%20InitializerExpressionSyntax%3A%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C3%23%20ArrayCreationOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C2%23%20ConversionOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C1%23%20InvocationOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C0%23%20FlowCaptureOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR0%20-%3E%20R1%0D%0AR2%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R2%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C0%23%20InvocationOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR1%20-%3E%20R2%0D%0AR4%20-%3E%20R2%0D%0AR3%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R3%7C1%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20var%7C3%23%20FlowCaptureReferenceOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C2%23%20PropertyReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20var%7C1%23%20ConversionOperation%20%2F%20IdentifierNameSyntax%3A%20var%7C0%23%20SimpleAssignmentOperation%20%2F%20IdentifierNameSyntax%3A%20var%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR2%20-%3E%20R3%20%5Blabel%3D%22Else%22%5D%0D%0AR4%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R4%7C1%23%20LocalReferenceOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20i.ToString()%7C2%23%20LocalReferenceOperation%20%2F%20IdentifierNameSyntax%3A%20i%7C1%23%20InvocationOperation%20%2F%20InvocationExpressionSyntax%3A%20i.ToString()%7C0%23%20SimpleAssignmentOperation%20%2F%20VariableDeclaratorSyntax%3A%20value%20%3D%20i.ToString()%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR3%20-%3E%20R4%0D%0AR5%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R5%7C2%23%20FlowCaptureReferenceOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C1%23%20ConversionOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C0%23%20FlowCaptureOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7C%23%23%20BranchValue%20%23%23%7C1%23%20FlowCaptureReferenceOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C0%23%20IsNullOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR6%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R6%7C1%23%20FlowCaptureReferenceOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C0%23%20InvocationOperation%20%2F%20ImplicitArrayCreationExpressionSyntax%3A%20new%5B%5D%20%5C%7B%200%2C%201%2C%202%2C%204%2C%208%2C%2016%20%5C%7D%7C%23%23%23%23%23%23%23%23%23%23%7D%22%5D%0D%0AR5%20-%3E%20R6%20%5Blabel%3D%22Else%22%5D%0D%0AR7%20%5Bshape%3Drecord%20label%3D%22%7BBLOCK%20%23R7%7D%22%5D%0D%0AR5%20-%3E%20R7%20%5Blabel%3D%22WhenTrue%22%5D%0D%0AR6%20-%3E%20R7%0D%0AR8%20%5Bshape%3Drecord%20label%3D%22%7BEXIT%20%23R8%7D%22%5D%0D%0AR2%20-%3E%20R8%20%5Blabel%3D%22WhenFalse%22%5D%0D%0A%7D%0D%0A%7D%0D%0A

/*
public void ForEach()
    {
        foreach(var i in new[] { 0, 1, 2, 4, 8, 16 })
        {
            var value = i.ToString();
        }
    }
*/

digraph "ForEach" {
subgraph "cluster_Sonar.ForEach" {
label = "Sonar.ForEach"
0 [shape=record label="{FOREACH:ForEachStatement|ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|LiteralExpressionSyntax: 0|LiteralExpressionSyntax: 1|LiteralExpressionSyntax: 2|LiteralExpressionSyntax: 4|LiteralExpressionSyntax: 8|LiteralExpressionSyntax: 16|InitializerExpressionSyntax: \{ 0, 1, 2, 4, 8, 16 \}}"]
0 -> 1
1 [shape=record label="{BINARY:ForEachStatement}"]
1 -> 2 [label="True"]
1 -> 3 [label="False"]
2 [shape=record label="{SIMPLE|IdentifierNameSyntax: i|MemberAccessExpressionSyntax: i.ToString|InvocationExpressionSyntax: i.ToString()|VariableDeclaratorSyntax: value = i.ToString()}"]
2 -> 1
3 [shape=record label="{EXIT}"]
}
subgraph "cluster_Roslyn.ForEach" {
label = "Roslyn.ForEach"
R0 [shape=record label="{ENTRY #R0}"]
R1 [shape=record label="{BLOCK #R1|4# LiteralOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|5# LiteralOperation / LiteralExpressionSyntax: 0|5# LiteralOperation / LiteralExpressionSyntax: 1|5# LiteralOperation / LiteralExpressionSyntax: 2|5# LiteralOperation / LiteralExpressionSyntax: 4|5# LiteralOperation / LiteralExpressionSyntax: 8|5# LiteralOperation / LiteralExpressionSyntax: 16|4# ArrayInitializerOperation / InitializerExpressionSyntax: \{ 0, 1, 2, 4, 8, 16 \}|3# ArrayCreationOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|2# ConversionOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|1# InvocationOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|0# FlowCaptureOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|##########}"]
R0 -> R1
R2 [shape=record label="{BLOCK #R2|## BranchValue ##|1# FlowCaptureReferenceOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|0# InvocationOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|##########}"]
R1 -> R2
R4 -> R2
R3 [shape=record label="{BLOCK #R3|1# LocalReferenceOperation / IdentifierNameSyntax: var|3# FlowCaptureReferenceOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|2# PropertyReferenceOperation / IdentifierNameSyntax: var|1# ConversionOperation / IdentifierNameSyntax: var|0# SimpleAssignmentOperation / IdentifierNameSyntax: var|##########}"]
R2 -> R3 [label="Else"]
R4 [shape=record label="{BLOCK #R4|1# LocalReferenceOperation / VariableDeclaratorSyntax: value = i.ToString()|2# LocalReferenceOperation / IdentifierNameSyntax: i|1# InvocationOperation / InvocationExpressionSyntax: i.ToString()|0# SimpleAssignmentOperation / VariableDeclaratorSyntax: value = i.ToString()|##########}"]
R3 -> R4
R5 [shape=record label="{BLOCK #R5|2# FlowCaptureReferenceOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|1# ConversionOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|0# FlowCaptureOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|##########|## BranchValue ##|1# FlowCaptureReferenceOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|0# IsNullOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|##########}"]
R6 [shape=record label="{BLOCK #R6|1# FlowCaptureReferenceOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|0# InvocationOperation / ImplicitArrayCreationExpressionSyntax: new[] \{ 0, 1, 2, 4, 8, 16 \}|##########}"]
R5 -> R6 [label="Else"]
R7 [shape=record label="{BLOCK #R7}"]
R5 -> R7 [label="WhenTrue"]
R6 -> R7
R8 [shape=record label="{EXIT #R8}"]
R2 -> R8 [label="WhenFalse"]
}
}
